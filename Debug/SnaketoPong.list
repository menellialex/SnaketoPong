
SnaketoPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  080060ac  080060ac  000160ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062e8  080062e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080062e8  080062e8  000162e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062f0  080062f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062f0  080062f0  000162f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062f4  080062f4  000162f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080062f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000074  0800636c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  0800636c  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001596e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ec  00000000  00000000  00035a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00038af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  00039d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af5e  00000000  00000000  0003adc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168b4  00000000  00000000  00055d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a51fa  00000000  00000000  0006c5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001117cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab4  00000000  00000000  0011181c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006094 	.word	0x08006094

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08006094 	.word	0x08006094

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f834 	bl	80004a0 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_lmul>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	46ce      	mov	lr, r9
 8000448:	4647      	mov	r7, r8
 800044a:	b580      	push	{r7, lr}
 800044c:	0007      	movs	r7, r0
 800044e:	4699      	mov	r9, r3
 8000450:	0c3b      	lsrs	r3, r7, #16
 8000452:	469c      	mov	ip, r3
 8000454:	0413      	lsls	r3, r2, #16
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	001d      	movs	r5, r3
 800045a:	000e      	movs	r6, r1
 800045c:	4661      	mov	r1, ip
 800045e:	0400      	lsls	r0, r0, #16
 8000460:	0c14      	lsrs	r4, r2, #16
 8000462:	0c00      	lsrs	r0, r0, #16
 8000464:	4345      	muls	r5, r0
 8000466:	434b      	muls	r3, r1
 8000468:	4360      	muls	r0, r4
 800046a:	4361      	muls	r1, r4
 800046c:	18c0      	adds	r0, r0, r3
 800046e:	0c2c      	lsrs	r4, r5, #16
 8000470:	1820      	adds	r0, r4, r0
 8000472:	468c      	mov	ip, r1
 8000474:	4283      	cmp	r3, r0
 8000476:	d903      	bls.n	8000480 <__aeabi_lmul+0x3c>
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	025b      	lsls	r3, r3, #9
 800047c:	4698      	mov	r8, r3
 800047e:	44c4      	add	ip, r8
 8000480:	4649      	mov	r1, r9
 8000482:	4379      	muls	r1, r7
 8000484:	4372      	muls	r2, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	4463      	add	r3, ip
 800048a:	042d      	lsls	r5, r5, #16
 800048c:	0c2d      	lsrs	r5, r5, #16
 800048e:	18c9      	adds	r1, r1, r3
 8000490:	0400      	lsls	r0, r0, #16
 8000492:	1940      	adds	r0, r0, r5
 8000494:	1889      	adds	r1, r1, r2
 8000496:	bcc0      	pop	{r6, r7}
 8000498:	46b9      	mov	r9, r7
 800049a:	46b0      	mov	r8, r6
 800049c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__udivmoddi4>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	4657      	mov	r7, sl
 80004a4:	464e      	mov	r6, r9
 80004a6:	4645      	mov	r5, r8
 80004a8:	46de      	mov	lr, fp
 80004aa:	b5e0      	push	{r5, r6, r7, lr}
 80004ac:	0004      	movs	r4, r0
 80004ae:	000d      	movs	r5, r1
 80004b0:	4692      	mov	sl, r2
 80004b2:	4699      	mov	r9, r3
 80004b4:	b083      	sub	sp, #12
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d830      	bhi.n	800051c <__udivmoddi4+0x7c>
 80004ba:	d02d      	beq.n	8000518 <__udivmoddi4+0x78>
 80004bc:	4649      	mov	r1, r9
 80004be:	4650      	mov	r0, sl
 80004c0:	f000 f8ba 	bl	8000638 <__clzdi2>
 80004c4:	0029      	movs	r1, r5
 80004c6:	0006      	movs	r6, r0
 80004c8:	0020      	movs	r0, r4
 80004ca:	f000 f8b5 	bl	8000638 <__clzdi2>
 80004ce:	1a33      	subs	r3, r6, r0
 80004d0:	4698      	mov	r8, r3
 80004d2:	3b20      	subs	r3, #32
 80004d4:	469b      	mov	fp, r3
 80004d6:	d433      	bmi.n	8000540 <__udivmoddi4+0xa0>
 80004d8:	465a      	mov	r2, fp
 80004da:	4653      	mov	r3, sl
 80004dc:	4093      	lsls	r3, r2
 80004de:	4642      	mov	r2, r8
 80004e0:	001f      	movs	r7, r3
 80004e2:	4653      	mov	r3, sl
 80004e4:	4093      	lsls	r3, r2
 80004e6:	001e      	movs	r6, r3
 80004e8:	42af      	cmp	r7, r5
 80004ea:	d83a      	bhi.n	8000562 <__udivmoddi4+0xc2>
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d100      	bne.n	80004f2 <__udivmoddi4+0x52>
 80004f0:	e078      	b.n	80005e4 <__udivmoddi4+0x144>
 80004f2:	465b      	mov	r3, fp
 80004f4:	1ba4      	subs	r4, r4, r6
 80004f6:	41bd      	sbcs	r5, r7
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	da00      	bge.n	80004fe <__udivmoddi4+0x5e>
 80004fc:	e075      	b.n	80005ea <__udivmoddi4+0x14a>
 80004fe:	2200      	movs	r2, #0
 8000500:	2300      	movs	r3, #0
 8000502:	9200      	str	r2, [sp, #0]
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2301      	movs	r3, #1
 8000508:	465a      	mov	r2, fp
 800050a:	4093      	lsls	r3, r2
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	4642      	mov	r2, r8
 8000512:	4093      	lsls	r3, r2
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	e028      	b.n	800056a <__udivmoddi4+0xca>
 8000518:	4282      	cmp	r2, r0
 800051a:	d9cf      	bls.n	80004bc <__udivmoddi4+0x1c>
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <__udivmoddi4+0x8e>
 800052a:	601c      	str	r4, [r3, #0]
 800052c:	605d      	str	r5, [r3, #4]
 800052e:	9800      	ldr	r0, [sp, #0]
 8000530:	9901      	ldr	r1, [sp, #4]
 8000532:	b003      	add	sp, #12
 8000534:	bcf0      	pop	{r4, r5, r6, r7}
 8000536:	46bb      	mov	fp, r7
 8000538:	46b2      	mov	sl, r6
 800053a:	46a9      	mov	r9, r5
 800053c:	46a0      	mov	r8, r4
 800053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000540:	4642      	mov	r2, r8
 8000542:	2320      	movs	r3, #32
 8000544:	1a9b      	subs	r3, r3, r2
 8000546:	4652      	mov	r2, sl
 8000548:	40da      	lsrs	r2, r3
 800054a:	4641      	mov	r1, r8
 800054c:	0013      	movs	r3, r2
 800054e:	464a      	mov	r2, r9
 8000550:	408a      	lsls	r2, r1
 8000552:	0017      	movs	r7, r2
 8000554:	4642      	mov	r2, r8
 8000556:	431f      	orrs	r7, r3
 8000558:	4653      	mov	r3, sl
 800055a:	4093      	lsls	r3, r2
 800055c:	001e      	movs	r6, r3
 800055e:	42af      	cmp	r7, r5
 8000560:	d9c4      	bls.n	80004ec <__udivmoddi4+0x4c>
 8000562:	2200      	movs	r2, #0
 8000564:	2300      	movs	r3, #0
 8000566:	9200      	str	r2, [sp, #0]
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	4643      	mov	r3, r8
 800056c:	2b00      	cmp	r3, #0
 800056e:	d0d9      	beq.n	8000524 <__udivmoddi4+0x84>
 8000570:	07fb      	lsls	r3, r7, #31
 8000572:	0872      	lsrs	r2, r6, #1
 8000574:	431a      	orrs	r2, r3
 8000576:	4646      	mov	r6, r8
 8000578:	087b      	lsrs	r3, r7, #1
 800057a:	e00e      	b.n	800059a <__udivmoddi4+0xfa>
 800057c:	42ab      	cmp	r3, r5
 800057e:	d101      	bne.n	8000584 <__udivmoddi4+0xe4>
 8000580:	42a2      	cmp	r2, r4
 8000582:	d80c      	bhi.n	800059e <__udivmoddi4+0xfe>
 8000584:	1aa4      	subs	r4, r4, r2
 8000586:	419d      	sbcs	r5, r3
 8000588:	2001      	movs	r0, #1
 800058a:	1924      	adds	r4, r4, r4
 800058c:	416d      	adcs	r5, r5
 800058e:	2100      	movs	r1, #0
 8000590:	3e01      	subs	r6, #1
 8000592:	1824      	adds	r4, r4, r0
 8000594:	414d      	adcs	r5, r1
 8000596:	2e00      	cmp	r6, #0
 8000598:	d006      	beq.n	80005a8 <__udivmoddi4+0x108>
 800059a:	42ab      	cmp	r3, r5
 800059c:	d9ee      	bls.n	800057c <__udivmoddi4+0xdc>
 800059e:	3e01      	subs	r6, #1
 80005a0:	1924      	adds	r4, r4, r4
 80005a2:	416d      	adcs	r5, r5
 80005a4:	2e00      	cmp	r6, #0
 80005a6:	d1f8      	bne.n	800059a <__udivmoddi4+0xfa>
 80005a8:	9800      	ldr	r0, [sp, #0]
 80005aa:	9901      	ldr	r1, [sp, #4]
 80005ac:	465b      	mov	r3, fp
 80005ae:	1900      	adds	r0, r0, r4
 80005b0:	4169      	adcs	r1, r5
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	db24      	blt.n	8000600 <__udivmoddi4+0x160>
 80005b6:	002b      	movs	r3, r5
 80005b8:	465a      	mov	r2, fp
 80005ba:	4644      	mov	r4, r8
 80005bc:	40d3      	lsrs	r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	40e2      	lsrs	r2, r4
 80005c2:	001c      	movs	r4, r3
 80005c4:	465b      	mov	r3, fp
 80005c6:	0015      	movs	r5, r2
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db2a      	blt.n	8000622 <__udivmoddi4+0x182>
 80005cc:	0026      	movs	r6, r4
 80005ce:	409e      	lsls	r6, r3
 80005d0:	0033      	movs	r3, r6
 80005d2:	0026      	movs	r6, r4
 80005d4:	4647      	mov	r7, r8
 80005d6:	40be      	lsls	r6, r7
 80005d8:	0032      	movs	r2, r6
 80005da:	1a80      	subs	r0, r0, r2
 80005dc:	4199      	sbcs	r1, r3
 80005de:	9000      	str	r0, [sp, #0]
 80005e0:	9101      	str	r1, [sp, #4]
 80005e2:	e79f      	b.n	8000524 <__udivmoddi4+0x84>
 80005e4:	42a3      	cmp	r3, r4
 80005e6:	d8bc      	bhi.n	8000562 <__udivmoddi4+0xc2>
 80005e8:	e783      	b.n	80004f2 <__udivmoddi4+0x52>
 80005ea:	4642      	mov	r2, r8
 80005ec:	2320      	movs	r3, #32
 80005ee:	2100      	movs	r1, #0
 80005f0:	1a9b      	subs	r3, r3, r2
 80005f2:	2200      	movs	r2, #0
 80005f4:	9100      	str	r1, [sp, #0]
 80005f6:	9201      	str	r2, [sp, #4]
 80005f8:	2201      	movs	r2, #1
 80005fa:	40da      	lsrs	r2, r3
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	e786      	b.n	800050e <__udivmoddi4+0x6e>
 8000600:	4642      	mov	r2, r8
 8000602:	2320      	movs	r3, #32
 8000604:	1a9b      	subs	r3, r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	4646      	mov	r6, r8
 800060a:	409a      	lsls	r2, r3
 800060c:	0023      	movs	r3, r4
 800060e:	40f3      	lsrs	r3, r6
 8000610:	4644      	mov	r4, r8
 8000612:	4313      	orrs	r3, r2
 8000614:	002a      	movs	r2, r5
 8000616:	40e2      	lsrs	r2, r4
 8000618:	001c      	movs	r4, r3
 800061a:	465b      	mov	r3, fp
 800061c:	0015      	movs	r5, r2
 800061e:	2b00      	cmp	r3, #0
 8000620:	dad4      	bge.n	80005cc <__udivmoddi4+0x12c>
 8000622:	4642      	mov	r2, r8
 8000624:	002f      	movs	r7, r5
 8000626:	2320      	movs	r3, #32
 8000628:	0026      	movs	r6, r4
 800062a:	4097      	lsls	r7, r2
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	40de      	lsrs	r6, r3
 8000630:	003b      	movs	r3, r7
 8000632:	4333      	orrs	r3, r6
 8000634:	e7cd      	b.n	80005d2 <__udivmoddi4+0x132>
 8000636:	46c0      	nop			; (mov r8, r8)

08000638 <__clzdi2>:
 8000638:	b510      	push	{r4, lr}
 800063a:	2900      	cmp	r1, #0
 800063c:	d103      	bne.n	8000646 <__clzdi2+0xe>
 800063e:	f000 f807 	bl	8000650 <__clzsi2>
 8000642:	3020      	adds	r0, #32
 8000644:	e002      	b.n	800064c <__clzdi2+0x14>
 8000646:	0008      	movs	r0, r1
 8000648:	f000 f802 	bl	8000650 <__clzsi2>
 800064c:	bd10      	pop	{r4, pc}
 800064e:	46c0      	nop			; (mov r8, r8)

08000650 <__clzsi2>:
 8000650:	211c      	movs	r1, #28
 8000652:	2301      	movs	r3, #1
 8000654:	041b      	lsls	r3, r3, #16
 8000656:	4298      	cmp	r0, r3
 8000658:	d301      	bcc.n	800065e <__clzsi2+0xe>
 800065a:	0c00      	lsrs	r0, r0, #16
 800065c:	3910      	subs	r1, #16
 800065e:	0a1b      	lsrs	r3, r3, #8
 8000660:	4298      	cmp	r0, r3
 8000662:	d301      	bcc.n	8000668 <__clzsi2+0x18>
 8000664:	0a00      	lsrs	r0, r0, #8
 8000666:	3908      	subs	r1, #8
 8000668:	091b      	lsrs	r3, r3, #4
 800066a:	4298      	cmp	r0, r3
 800066c:	d301      	bcc.n	8000672 <__clzsi2+0x22>
 800066e:	0900      	lsrs	r0, r0, #4
 8000670:	3904      	subs	r1, #4
 8000672:	a202      	add	r2, pc, #8	; (adr r2, 800067c <__clzsi2+0x2c>)
 8000674:	5c10      	ldrb	r0, [r2, r0]
 8000676:	1840      	adds	r0, r0, r1
 8000678:	4770      	bx	lr
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	02020304 	.word	0x02020304
 8000680:	01010101 	.word	0x01010101
	...

0800068c <DebouncedEdgeDetector_init>:
#include <quadknob.h>
#include "main.h"


void
    DebouncedEdgeDetector_init(DebouncedEdgeDetector *self){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	    self->update = &DebouncedEdgeDetector_update;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <DebouncedEdgeDetector_init+0x28>)
 8000698:	605a      	str	r2, [r3, #4]
	    self->get = &DebouncedEdgeDetector_get;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <DebouncedEdgeDetector_init+0x2c>)
 800069e:	609a      	str	r2, [r3, #8]
	    self->output = DED_UNDEF;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2204      	movs	r2, #4
 80006a4:	705a      	strb	r2, [r3, #1]
		self->prior_state = DED_HIDDEN_XX;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2204      	movs	r2, #4
 80006aa:	701a      	strb	r2, [r3, #0]
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b002      	add	sp, #8
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	080006bd 	.word	0x080006bd
 80006b8:	080007e5 	.word	0x080007e5

080006bc <DebouncedEdgeDetector_update>:
// We need a pair for these for each "Quad encoder" knob -- each decoding
// either pin A or pin B. (Another function will compare A-high and B-rising,
// etc. to decipher user intent).
// This state machine will report RISING or FALLING only after 2 consecutive
// readings of the polarity opposite the old state - then emit the edge notice.
void DebouncedEdgeDetector_update (DebouncedEdgeDetector *self, bool new_bit){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	000a      	movs	r2, r1
 80006c6:	1cfb      	adds	r3, r7, #3
 80006c8:	701a      	strb	r2, [r3, #0]
	enum DED outVal = DED_UNDEF;
 80006ca:	230f      	movs	r3, #15
 80006cc:	18fb      	adds	r3, r7, r3
 80006ce:	2204      	movs	r2, #4
 80006d0:	701a      	strb	r2, [r3, #0]
	switch (self->prior_state){
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	d900      	bls.n	80006dc <DebouncedEdgeDetector_update+0x20>
 80006da:	e071      	b.n	80007c0 <DebouncedEdgeDetector_update+0x104>
 80006dc:	009a      	lsls	r2, r3, #2
 80006de:	4b40      	ldr	r3, [pc, #256]	; (80007e0 <DebouncedEdgeDetector_update+0x124>)
 80006e0:	18d3      	adds	r3, r2, r3
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	469f      	mov	pc, r3
	case DED_HIDDEN_XX:
		if (new_bit == false){
 80006e6:	1cfb      	adds	r3, r7, #3
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2201      	movs	r2, #1
 80006ec:	4053      	eors	r3, r2
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d007      	beq.n	8000704 <DebouncedEdgeDetector_update+0x48>
			self->prior_state = DED_HIDDEN_00;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
			outVal = DED_LOW;
 80006fa:	230f      	movs	r3, #15
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
		} else {
			self->prior_state = DED_HIDDEN_11;
			outVal = DED_HIGH;
		}
		break;
 8000702:	e064      	b.n	80007ce <DebouncedEdgeDetector_update+0x112>
			self->prior_state = DED_HIDDEN_11;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2202      	movs	r2, #2
 8000708:	701a      	strb	r2, [r3, #0]
			outVal = DED_HIGH;
 800070a:	230f      	movs	r3, #15
 800070c:	18fb      	adds	r3, r7, r3
 800070e:	2202      	movs	r2, #2
 8000710:	701a      	strb	r2, [r3, #0]
		break;
 8000712:	e05c      	b.n	80007ce <DebouncedEdgeDetector_update+0x112>
	case DED_HIDDEN_00:
		if (new_bit == false){
 8000714:	1cfb      	adds	r3, r7, #3
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2201      	movs	r2, #1
 800071a:	4053      	eors	r3, r2
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <DebouncedEdgeDetector_update+0x70>
			// prior_state stays LOW
			outVal = DED_LOW;
 8000722:	230f      	movs	r3, #15
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
		}
		else{
			self->prior_state = DED_HIDDEN_01;
			outVal = DED_LOW;
		}
		break;
 800072a:	e050      	b.n	80007ce <DebouncedEdgeDetector_update+0x112>
			self->prior_state = DED_HIDDEN_01;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
			outVal = DED_LOW;
 8000732:	230f      	movs	r3, #15
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
		break;
 800073a:	e048      	b.n	80007ce <DebouncedEdgeDetector_update+0x112>
	case (DED_HIDDEN_01):
	    if (new_bit == false){
 800073c:	1cfb      	adds	r3, r7, #3
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2201      	movs	r2, #1
 8000742:	4053      	eors	r3, r2
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d007      	beq.n	800075a <DebouncedEdgeDetector_update+0x9e>
	    	self->prior_state = DED_HIDDEN_00; // False alarm
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
	    	outVal = DED_LOW;
 8000750:	230f      	movs	r3, #15
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
	    } else {
	    	self->prior_state = DED_HIDDEN_11; // Confirmed: 0-to-1
	    	outVal = DED_RISING;
	    }
	break;
 8000758:	e039      	b.n	80007ce <DebouncedEdgeDetector_update+0x112>
	    	self->prior_state = DED_HIDDEN_11; // Confirmed: 0-to-1
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2202      	movs	r2, #2
 800075e:	701a      	strb	r2, [r3, #0]
	    	outVal = DED_RISING;
 8000760:	230f      	movs	r3, #15
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
	break;
 8000768:	e031      	b.n	80007ce <DebouncedEdgeDetector_update+0x112>
	case (DED_HIDDEN_11):
			if (new_bit == false){
 800076a:	1cfb      	adds	r3, r7, #3
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2201      	movs	r2, #1
 8000770:	4053      	eors	r3, r2
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2b00      	cmp	r3, #0
 8000776:	d007      	beq.n	8000788 <DebouncedEdgeDetector_update+0xcc>
				self->prior_state = DED_HIDDEN_01;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
				outVal = DED_HIGH;
 800077e:	230f      	movs	r3, #15
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	2202      	movs	r2, #2
 8000784:	701a      	strb	r2, [r3, #0]
			} else {
				// prior_state stays high
				outVal = DED_HIGH;
			}
	break;
 8000786:	e022      	b.n	80007ce <DebouncedEdgeDetector_update+0x112>
				outVal = DED_HIGH;
 8000788:	230f      	movs	r3, #15
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	2202      	movs	r2, #2
 800078e:	701a      	strb	r2, [r3, #0]
	break;
 8000790:	e01d      	b.n	80007ce <DebouncedEdgeDetector_update+0x112>
	case (DED_HIDDEN_10):
	    if (new_bit == false){
 8000792:	1cfb      	adds	r3, r7, #3
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2201      	movs	r2, #1
 8000798:	4053      	eors	r3, r2
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d007      	beq.n	80007b0 <DebouncedEdgeDetector_update+0xf4>
	    	self->prior_state = DED_HIDDEN_00; // Confirmed
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
	    	outVal = DED_FALLING;
 80007a6:	230f      	movs	r3, #15
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	2203      	movs	r2, #3
 80007ac:	701a      	strb	r2, [r3, #0]
	    } else {
	    	self->prior_state = DED_HIDDEN_11; // False alarm
	    	outVal = DED_HIGH;
	    }
	break;
 80007ae:	e00e      	b.n	80007ce <DebouncedEdgeDetector_update+0x112>
	    	self->prior_state = DED_HIDDEN_11; // False alarm
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2202      	movs	r2, #2
 80007b4:	701a      	strb	r2, [r3, #0]
	    	outVal = DED_HIGH;
 80007b6:	230f      	movs	r3, #15
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	2202      	movs	r2, #2
 80007bc:	701a      	strb	r2, [r3, #0]
	break;
 80007be:	e006      	b.n	80007ce <DebouncedEdgeDetector_update+0x112>
	default:
		self->prior_state = DED_HIDDEN_XX;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2204      	movs	r2, #4
 80007c4:	701a      	strb	r2, [r3, #0]
		outVal = DED_UNDEF;
 80007c6:	230f      	movs	r3, #15
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	2204      	movs	r2, #4
 80007cc:	701a      	strb	r2, [r3, #0]
	}
    self->output = outVal;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	220f      	movs	r2, #15
 80007d2:	18ba      	adds	r2, r7, r2
 80007d4:	7812      	ldrb	r2, [r2, #0]
 80007d6:	705a      	strb	r2, [r3, #1]
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b004      	add	sp, #16
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	080060ac 	.word	0x080060ac

080007e4 <DebouncedEdgeDetector_get>:


enum DED DebouncedEdgeDetector_get(const DebouncedEdgeDetector *self){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	return self->output;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	785b      	ldrb	r3, [r3, #1]
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b002      	add	sp, #8
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <quadknob_init>:

void
    quadknob_init(QuadKnob *self) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	// Initialize all methods:
	self->update = &quadknob_update;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <quadknob_init+0x34>)
 8000804:	61da      	str	r2, [r3, #28]
	self->get = &QuadKnob_get;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a09      	ldr	r2, [pc, #36]	; (8000830 <quadknob_init+0x38>)
 800080a:	621a      	str	r2, [r3, #32]

	// Initialize all attributes.
	self->turning = QUADKNOB_STILL;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2202      	movs	r2, #2
 8000810:	761a      	strb	r2, [r3, #24]
	// The edge-detector attributes are objects, so call their init functions.
	// In C++, the compiler would do this for us, but in C we must request it.
	DebouncedEdgeDetector_init(&(self->signal_A));
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	0018      	movs	r0, r3
 8000816:	f7ff ff39 	bl	800068c <DebouncedEdgeDetector_init>
	DebouncedEdgeDetector_init(&(self->signal_B));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	330c      	adds	r3, #12
 800081e:	0018      	movs	r0, r3
 8000820:	f7ff ff34 	bl	800068c <DebouncedEdgeDetector_init>
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b002      	add	sp, #8
 800082a:	bd80      	pop	{r7, pc}
 800082c:	08000835 	.word	0x08000835
 8000830:	080008f1 	.word	0x080008f1

08000834 <quadknob_update>:


void quadknob_update(QuadKnob *self, bool a_is_active, bool b_is_active){
 8000834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000836:	b089      	sub	sp, #36	; 0x24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	0008      	movs	r0, r1
 800083e:	0011      	movs	r1, r2
 8000840:	1cfb      	adds	r3, r7, #3
 8000842:	1c02      	adds	r2, r0, #0
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	1cbb      	adds	r3, r7, #2
 8000848:	1c0a      	adds	r2, r1, #0
 800084a:	701a      	strb	r2, [r3, #0]
	enum Twist result = QUADKNOB_STILL;
 800084c:	251f      	movs	r5, #31
 800084e:	197b      	adds	r3, r7, r5
 8000850:	2202      	movs	r2, #2
 8000852:	701a      	strb	r2, [r3, #0]
	// and DED_B for the two DebouncedEdgeDetectors.
	//
	// Then we call on each machine to update itself based on the logic-level input
	// x_is_active.

	DebouncedEdgeDetector* DED_A = &(self->signal_A);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	61bb      	str	r3, [r7, #24]
	DED_A->update(DED_A, a_is_active);
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	1cfa      	adds	r2, r7, #3
 800085e:	7811      	ldrb	r1, [r2, #0]
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	0010      	movs	r0, r2
 8000864:	4798      	blx	r3
	enum DED edge_a = DED_A->get(DED_A);
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	2617      	movs	r6, #23
 800086c:	19bc      	adds	r4, r7, r6
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	0010      	movs	r0, r2
 8000872:	4798      	blx	r3
 8000874:	0003      	movs	r3, r0
 8000876:	7023      	strb	r3, [r4, #0]

	DebouncedEdgeDetector* DED_B = &(self->signal_B);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	330c      	adds	r3, #12
 800087c:	613b      	str	r3, [r7, #16]
	DED_B->update(DED_B, b_is_active);
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	1cba      	adds	r2, r7, #2
 8000884:	7811      	ldrb	r1, [r2, #0]
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	0010      	movs	r0, r2
 800088a:	4798      	blx	r3
	enum DED edge_b = DED_B->get(DED_B);
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	220f      	movs	r2, #15
 8000892:	18bc      	adds	r4, r7, r2
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	0010      	movs	r0, r2
 8000898:	4798      	blx	r3
 800089a:	0003      	movs	r3, r0
 800089c:	7023      	strb	r3, [r4, #0]

	if ((edge_a == DED_RISING) && (edge_b == DED_LOW))
 800089e:	19bb      	adds	r3, r7, r6
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d108      	bne.n	80008b8 <quadknob_update+0x84>
 80008a6:	220f      	movs	r2, #15
 80008a8:	18bb      	adds	r3, r7, r2
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d103      	bne.n	80008b8 <quadknob_update+0x84>
			result = QUADKNOB_CCW;
 80008b0:	197b      	adds	r3, r7, r5
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
 80008b6:	e012      	b.n	80008de <quadknob_update+0xaa>
	else if ((edge_a == DED_LOW) && (edge_b == DED_RISING))
 80008b8:	2317      	movs	r3, #23
 80008ba:	18fb      	adds	r3, r7, r3
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d109      	bne.n	80008d6 <quadknob_update+0xa2>
 80008c2:	230f      	movs	r3, #15
 80008c4:	18fb      	adds	r3, r7, r3
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d104      	bne.n	80008d6 <quadknob_update+0xa2>
			result = QUADKNOB_CW;
 80008cc:	231f      	movs	r3, #31
 80008ce:	18fb      	adds	r3, r7, r3
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
 80008d4:	e003      	b.n	80008de <quadknob_update+0xaa>
	else
		result = QUADKNOB_STILL;
 80008d6:	231f      	movs	r3, #31
 80008d8:	18fb      	adds	r3, r7, r3
 80008da:	2202      	movs	r2, #2
 80008dc:	701a      	strb	r2, [r3, #0]

	self->turning = result;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	221f      	movs	r2, #31
 80008e2:	18ba      	adds	r2, r7, r2
 80008e4:	7812      	ldrb	r2, [r2, #0]
 80008e6:	761a      	strb	r2, [r3, #24]
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b009      	add	sp, #36	; 0x24
 80008ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008f0 <QuadKnob_get>:


enum Twist QuadKnob_get(const  QuadKnob *self){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	return self->turning;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7e1b      	ldrb	r3, [r3, #24]
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b002      	add	sp, #8
 8000902:	bd80      	pop	{r7, pc}

08000904 <spi_msg_out>:
// to HAL_SPI_Transmit(&hspi2 ...) won't build.




static void spi_msg_out(DOGS_packet pkt){
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	8018      	strh	r0, [r3, #0]
	const int16_t twelve_us = 20;
 800090e:	2312      	movs	r3, #18
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	2214      	movs	r2, #20
 8000914:	801a      	strh	r2, [r3, #0]
	const uint32_t SPI_timeout = 100;
 8000916:	2364      	movs	r3, #100	; 0x64
 8000918:	60fb      	str	r3, [r7, #12]
	// Pulse the CS line high to mark change-of-packet
	// GPIOD->ODR |= GPIO_ODR_OD9;
	//  -- or, in HAL notation -- //
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);  // * GPIO_PIN_9 == 1<<9
 800091a:	2380      	movs	r3, #128	; 0x80
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	481e      	ldr	r0, [pc, #120]	; (8000998 <spi_msg_out+0x94>)
 8000920:	2201      	movs	r2, #1
 8000922:	0019      	movs	r1, r3
 8000924:	f001 fff3 	bl	800290e <HAL_GPIO_WritePin>
	for (int32_t i = 0; i<twelve_us; i++)
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	e002      	b.n	8000934 <spi_msg_out+0x30>
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	3301      	adds	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	2312      	movs	r3, #18
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	2200      	movs	r2, #0
 800093a:	5e9b      	ldrsh	r3, [r3, r2]
 800093c:	697a      	ldr	r2, [r7, #20]
 800093e:	429a      	cmp	r2, r3
 8000940:	dbf5      	blt.n	800092e <spi_msg_out+0x2a>
	   {;}                   // just counting to waste time for about 12 us
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4814      	ldr	r0, [pc, #80]	; (8000998 <spi_msg_out+0x94>)
 8000948:	2200      	movs	r2, #0
 800094a:	0019      	movs	r1, r3
 800094c:	f001 ffdf 	bl	800290e <HAL_GPIO_WritePin>

	// Assert the Command/Data line
	if (pkt.nCD){
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2201      	movs	r2, #1
 8000956:	4013      	ands	r3, r2
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d008      	beq.n	8000970 <spi_msg_out+0x6c>
       GPIOA->ODR |= GPIO_ODR_OD1;
 800095e:	23a0      	movs	r3, #160	; 0xa0
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	695a      	ldr	r2, [r3, #20]
 8000964:	23a0      	movs	r3, #160	; 0xa0
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	2102      	movs	r1, #2
 800096a:	430a      	orrs	r2, r1
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	e007      	b.n	8000980 <spi_msg_out+0x7c>
	}else{
        GPIOA->ODR &=~ GPIO_ODR_OD1;
 8000970:	23a0      	movs	r3, #160	; 0xa0
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	695a      	ldr	r2, [r3, #20]
 8000976:	23a0      	movs	r3, #160	; 0xa0
 8000978:	05db      	lsls	r3, r3, #23
 800097a:	2102      	movs	r1, #2
 800097c:	438a      	bics	r2, r1
 800097e:	615a      	str	r2, [r3, #20]

	// Send one packet (a byte).
	// Use the HAL.
	// SPI1: Send 1 byte of pkt.byte, and timeout only after 100 ticks
	// EXPECT ABOUT 16 us of delay from PD_6 low to SCK action.
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&pkt.byte, 1, SPI_timeout);
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	1c59      	adds	r1, r3, #1
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <spi_msg_out+0x98>)
 8000988:	0013      	movs	r3, r2
 800098a:	2201      	movs	r2, #1
 800098c:	f002 ff5c 	bl	8003848 <HAL_SPI_Transmit>
}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b006      	add	sp, #24
 8000996:	bd80      	pop	{r7, pc}
 8000998:	50000c00 	.word	0x50000c00
 800099c:	20000090 	.word	0x20000090

080009a0 <display_init>:
	{0, 0x81},  // Set volume = contrast
	{0, 0x02},
	{0, 0xaf}  // Display Active!
}; // Send another "!" shape

void display_init(void){
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af00      	add	r7, sp, #0

	const uint32_t five_ms = 40000;
 80009a6:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <display_init+0xe0>)
 80009a8:	607b      	str	r3, [r7, #4]
	const int init_stream_length = sizeof(init_stream)/ sizeof(init_stream[0]);
 80009aa:	230b      	movs	r3, #11
 80009ac:	603b      	str	r3, [r7, #0]
	// - LET CUBEMX CONFIGURE REGISTERS // config_periph();
	// Hardware reset first:
	HAL_GPIO_WritePin(DOGS_reset_GPIO_Port, DOGS_reset_Pin, GPIO_PIN_RESET);
 80009ae:	23a0      	movs	r3, #160	; 0xa0
 80009b0:	05db      	lsls	r3, r3, #23
 80009b2:	2200      	movs	r2, #0
 80009b4:	2101      	movs	r1, #1
 80009b6:	0018      	movs	r0, r3
 80009b8:	f001 ffa9 	bl	800290e <HAL_GPIO_WritePin>
	// Or use the bit-banging method to do the same thing:
	GPIOA->ODR &=~ GPIO_ODR_OD0; // nReset Low
 80009bc:	23a0      	movs	r3, #160	; 0xa0
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	695a      	ldr	r2, [r3, #20]
 80009c2:	23a0      	movs	r3, #160	; 0xa0
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	2101      	movs	r1, #1
 80009c8:	438a      	bics	r2, r1
 80009ca:	615a      	str	r2, [r3, #20]

	GPIOA->ODR |= GPIO_ODR_OD1;  // nCS high -
 80009cc:	23a0      	movs	r3, #160	; 0xa0
 80009ce:	05db      	lsls	r3, r3, #23
 80009d0:	695a      	ldr	r2, [r3, #20]
 80009d2:	23a0      	movs	r3, #160	; 0xa0
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	2102      	movs	r1, #2
 80009d8:	430a      	orrs	r2, r1
 80009da:	615a      	str	r2, [r3, #20]

	for (uint32_t i = 0; i < five_ms; i++){;} // pause 5 ms
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	e002      	b.n	80009e8 <display_init+0x48>
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d3f8      	bcc.n	80009e2 <display_init+0x42>

	GPIOA->ODR |= GPIO_ODR_OD0; // nReset High
 80009f0:	23a0      	movs	r3, #160	; 0xa0
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	695a      	ldr	r2, [r3, #20]
 80009f6:	23a0      	movs	r3, #160	; 0xa0
 80009f8:	05db      	lsls	r3, r3, #23
 80009fa:	2101      	movs	r1, #1
 80009fc:	430a      	orrs	r2, r1
 80009fe:	615a      	str	r2, [r3, #20]

	for (uint32_t i = 0; i < five_ms; i++){;} // pause 5 ms
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	e002      	b.n	8000a0c <display_init+0x6c>
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d3f8      	bcc.n	8000a06 <display_init+0x66>

	GPIOA->ODR &= ~GPIO_ODR_OD1;  // nCS low
 8000a14:	23a0      	movs	r3, #160	; 0xa0
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	695a      	ldr	r2, [r3, #20]
 8000a1a:	23a0      	movs	r3, #160	; 0xa0
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	2102      	movs	r1, #2
 8000a20:	438a      	bics	r2, r1
 8000a22:	615a      	str	r2, [r3, #20]
	for (uint32_t i = 0; i < five_ms; i++){;} // pause 5 ms
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	e002      	b.n	8000a30 <display_init+0x90>
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fa      	ldr	r2, [r7, #12]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d3f8      	bcc.n	8000a2a <display_init+0x8a>

	// Initialize the DOGS with a 11-command stream, then send a simple image to plot
	for (uint16_t init_index = 0; init_index < init_stream_length; init_index++){
 8000a38:	230a      	movs	r3, #10
 8000a3a:	18fb      	adds	r3, r7, r3
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	801a      	strh	r2, [r3, #0]
 8000a40:	e013      	b.n	8000a6a <display_init+0xca>
        spi_msg_out(init_stream[init_index]);
 8000a42:	240a      	movs	r4, #10
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	881a      	ldrh	r2, [r3, #0]
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <display_init+0xe4>)
 8000a4a:	0052      	lsls	r2, r2, #1
 8000a4c:	5ad2      	ldrh	r2, [r2, r3]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	0412      	lsls	r2, r2, #16
 8000a52:	0c12      	lsrs	r2, r2, #16
 8000a54:	0c1b      	lsrs	r3, r3, #16
 8000a56:	041b      	lsls	r3, r3, #16
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff ff52 	bl	8000904 <spi_msg_out>
	for (uint16_t init_index = 0; init_index < init_stream_length; init_index++){
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	881a      	ldrh	r2, [r3, #0]
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	3201      	adds	r2, #1
 8000a68:	801a      	strh	r2, [r3, #0]
 8000a6a:	230a      	movs	r3, #10
 8000a6c:	18fb      	adds	r3, r7, r3
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	dce5      	bgt.n	8000a42 <display_init+0xa2>
    }
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b007      	add	sp, #28
 8000a7e:	bd90      	pop	{r4, r7, pc}
 8000a80:	00009c40 	.word	0x00009c40
 8000a84:	080060c0 	.word	0x080060c0

08000a88 <display_blank>:



void display_blank(void){
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
	const int display_width = DISPLAY_WIDTH;
 8000a8e:	2366      	movs	r3, #102	; 0x66
 8000a90:	613b      	str	r3, [r7, #16]
	const DOGS_packet white = {1, 0x00};
 8000a92:	200c      	movs	r0, #12
 8000a94:	183b      	adds	r3, r7, r0
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	2101      	movs	r1, #1
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	183b      	adds	r3, r7, r0
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	705a      	strb	r2, [r3, #1]
	for (uint16_t pg = 0; pg < CHECKS_WIDE; pg++){
 8000aa4:	2316      	movs	r3, #22
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	801a      	strh	r2, [r3, #0]
 8000aac:	e05c      	b.n	8000b68 <display_blank+0xe0>
		DOGS_packet page_set = {0, 0xb0|pg};
 8000aae:	2008      	movs	r0, #8
 8000ab0:	183b      	adds	r3, r7, r0
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	438a      	bics	r2, r1
 8000ab8:	701a      	strb	r2, [r3, #0]
 8000aba:	2316      	movs	r3, #22
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2250      	movs	r2, #80	; 0x50
 8000ac4:	4252      	negs	r2, r2
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	183b      	adds	r3, r7, r0
 8000acc:	705a      	strb	r2, [r3, #1]
		for (uint16_t col = 0; col < display_width; col++){
 8000ace:	2314      	movs	r3, #20
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	801a      	strh	r2, [r3, #0]
 8000ad6:	e03b      	b.n	8000b50 <display_blank+0xc8>
			spi_msg_out(page_set);
 8000ad8:	2308      	movs	r3, #8
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	6818      	ldr	r0, [r3, #0]
 8000ade:	f7ff ff11 	bl	8000904 <spi_msg_out>
			DOGS_packet col_set[2] = {{0, (col &0x0f)}, {0, 0x10|(col>>4)}};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	438a      	bics	r2, r1
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	2414      	movs	r4, #20
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	220f      	movs	r2, #15
 8000af6:	4013      	ands	r3, r2
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	705a      	strb	r2, [r3, #1]
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	789a      	ldrb	r2, [r3, #2]
 8000b02:	2101      	movs	r1, #1
 8000b04:	438a      	bics	r2, r1
 8000b06:	709a      	strb	r2, [r3, #2]
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	091b      	lsrs	r3, r3, #4
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2210      	movs	r2, #16
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	70da      	strb	r2, [r3, #3]
			spi_msg_out(col_set[0]);
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	6818      	ldr	r0, [r3, #0]
 8000b20:	f7ff fef0 	bl	8000904 <spi_msg_out>
			spi_msg_out(col_set[1]);
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2202      	movs	r2, #2
 8000b28:	5a9a      	ldrh	r2, [r3, r2]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	0412      	lsls	r2, r2, #16
 8000b2e:	0c12      	lsrs	r2, r2, #16
 8000b30:	0c1b      	lsrs	r3, r3, #16
 8000b32:	041b      	lsls	r3, r3, #16
 8000b34:	4313      	orrs	r3, r2
 8000b36:	0018      	movs	r0, r3
 8000b38:	f7ff fee4 	bl	8000904 <spi_msg_out>
			spi_msg_out(white);
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	f7ff fedf 	bl	8000904 <spi_msg_out>
		for (uint16_t col = 0; col < display_width; col++){
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	881a      	ldrh	r2, [r3, #0]
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	3201      	adds	r2, #1
 8000b4e:	801a      	strh	r2, [r3, #0]
 8000b50:	2314      	movs	r3, #20
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dcbd      	bgt.n	8000ad8 <display_blank+0x50>
	for (uint16_t pg = 0; pg < CHECKS_WIDE; pg++){
 8000b5c:	2116      	movs	r1, #22
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	881a      	ldrh	r2, [r3, #0]
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	3201      	adds	r2, #1
 8000b66:	801a      	strh	r2, [r3, #0]
 8000b68:	2316      	movs	r3, #22
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	2b07      	cmp	r3, #7
 8000b70:	d99d      	bls.n	8000aae <display_blank+0x26>
		}
	}
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b007      	add	sp, #28
 8000b7a:	bd90      	pop	{r4, r7, pc}

08000b7c <display_checkerboard>:


void display_checkerboard(void){
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
	const int checkerboard_squares = CHECKS_WIDE;
 8000b82:	2308      	movs	r3, #8
 8000b84:	61bb      	str	r3, [r7, #24]
	const int checkerboard_pixels_wide = PIXELS_PER_CHECK * CHECKS_WIDE;
 8000b86:	2340      	movs	r3, #64	; 0x40
 8000b88:	617b      	str	r3, [r7, #20]
	const int display_width = DISPLAY_WIDTH;
 8000b8a:	2366      	movs	r3, #102	; 0x66
 8000b8c:	613b      	str	r3, [r7, #16]
	const DOGS_packet black = {1, 0xFF};
	const DOGS_packet white = {1, 0x00};
 8000b8e:	200c      	movs	r0, #12
 8000b90:	183b      	adds	r3, r7, r0
 8000b92:	781a      	ldrb	r2, [r3, #0]
 8000b94:	2101      	movs	r1, #1
 8000b96:	430a      	orrs	r2, r1
 8000b98:	701a      	strb	r2, [r3, #0]
 8000b9a:	183b      	adds	r3, r7, r0
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	705a      	strb	r2, [r3, #1]
	for (uint16_t pg = 0; pg < checkerboard_squares; pg++){
 8000ba0:	231e      	movs	r3, #30
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	801a      	strh	r2, [r3, #0]
 8000ba8:	e080      	b.n	8000cac <display_checkerboard+0x130>
		DOGS_packet page_set = {0, 0xb0|pg};
 8000baa:	2008      	movs	r0, #8
 8000bac:	183b      	adds	r3, r7, r0
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	438a      	bics	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	231e      	movs	r3, #30
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2250      	movs	r2, #80	; 0x50
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	183b      	adds	r3, r7, r0
 8000bc8:	705a      	strb	r2, [r3, #1]
		for (uint16_t col = 0; col < display_width; col++){
 8000bca:	231c      	movs	r3, #28
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	2200      	movs	r2, #0
 8000bd0:	801a      	strh	r2, [r3, #0]
 8000bd2:	e05f      	b.n	8000c94 <display_checkerboard+0x118>
			spi_msg_out(page_set);
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	f7ff fe93 	bl	8000904 <spi_msg_out>

			DOGS_packet col_set[2] = {{0, (col &0x0f)}, {0, 0x10|(col>>4)}};
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	781a      	ldrb	r2, [r3, #0]
 8000be2:	2101      	movs	r1, #1
 8000be4:	438a      	bics	r2, r1
 8000be6:	701a      	strb	r2, [r3, #0]
 8000be8:	241c      	movs	r4, #28
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	220f      	movs	r2, #15
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	705a      	strb	r2, [r3, #1]
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	789a      	ldrb	r2, [r3, #2]
 8000bfe:	2101      	movs	r1, #1
 8000c00:	438a      	bics	r2, r1
 8000c02:	709a      	strb	r2, [r3, #2]
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	091b      	lsrs	r3, r3, #4
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2210      	movs	r2, #16
 8000c10:	4313      	orrs	r3, r2
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	70da      	strb	r2, [r3, #3]
			spi_msg_out(col_set[0]);
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	6818      	ldr	r0, [r3, #0]
 8000c1c:	f7ff fe72 	bl	8000904 <spi_msg_out>
			spi_msg_out(col_set[1]);
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2202      	movs	r2, #2
 8000c24:	5a9a      	ldrh	r2, [r3, r2]
 8000c26:	2300      	movs	r3, #0
 8000c28:	0412      	lsls	r2, r2, #16
 8000c2a:	0c12      	lsrs	r2, r2, #16
 8000c2c:	0c1b      	lsrs	r3, r3, #16
 8000c2e:	041b      	lsls	r3, r3, #16
 8000c30:	4313      	orrs	r3, r2
 8000c32:	0018      	movs	r0, r3
 8000c34:	f7ff fe66 	bl	8000904 <spi_msg_out>
			if ((col < checkerboard_pixels_wide) &
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	1c11      	adds	r1, r2, #0
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	dc01      	bgt.n	8000c4a <display_checkerboard+0xce>
 8000c46:	2300      	movs	r3, #0
 8000c48:	1c19      	adds	r1, r3, #0
 8000c4a:	b2cb      	uxtb	r3, r1
					!((pg+col/PIXELS_PER_CHECK) & 0x01))
 8000c4c:	221c      	movs	r2, #28
 8000c4e:	18ba      	adds	r2, r7, r2
 8000c50:	8812      	ldrh	r2, [r2, #0]
 8000c52:	08d2      	lsrs	r2, r2, #3
 8000c54:	b291      	uxth	r1, r2
 8000c56:	221e      	movs	r2, #30
 8000c58:	18ba      	adds	r2, r7, r2
 8000c5a:	8812      	ldrh	r2, [r2, #0]
 8000c5c:	188a      	adds	r2, r1, r2
 8000c5e:	b292      	uxth	r2, r2
 8000c60:	0011      	movs	r1, r2
 8000c62:	2201      	movs	r2, #1
 8000c64:	400a      	ands	r2, r1
			if ((col < checkerboard_pixels_wide) &
 8000c66:	4251      	negs	r1, r2
 8000c68:	414a      	adcs	r2, r1
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d004      	beq.n	8000c7e <display_checkerboard+0x102>
			{ // BIT-BANGING for evenness is QUICK
				spi_msg_out(black);
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <display_checkerboard+0x148>)
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	f7ff fe44 	bl	8000904 <spi_msg_out>
 8000c7c:	e004      	b.n	8000c88 <display_checkerboard+0x10c>
			}else{
				spi_msg_out(white);
 8000c7e:	230c      	movs	r3, #12
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	f7ff fe3e 	bl	8000904 <spi_msg_out>
		for (uint16_t col = 0; col < display_width; col++){
 8000c88:	211c      	movs	r1, #28
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	881a      	ldrh	r2, [r3, #0]
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	3201      	adds	r2, #1
 8000c92:	801a      	strh	r2, [r3, #0]
 8000c94:	231c      	movs	r3, #28
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dc99      	bgt.n	8000bd4 <display_checkerboard+0x58>
	for (uint16_t pg = 0; pg < checkerboard_squares; pg++){
 8000ca0:	211e      	movs	r1, #30
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	881a      	ldrh	r2, [r3, #0]
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	3201      	adds	r2, #1
 8000caa:	801a      	strh	r2, [r3, #0]
 8000cac:	231e      	movs	r3, #30
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dd00      	ble.n	8000cba <display_checkerboard+0x13e>
 8000cb8:	e777      	b.n	8000baa <display_checkerboard+0x2e>
			}
		}
	}
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b009      	add	sp, #36	; 0x24
 8000cc2:	bd90      	pop	{r4, r7, pc}
 8000cc4:	080060d8 	.word	0x080060d8

08000cc8 <display_paint_square>:
		}
	}
}


static void display_paint_square(uint8_t l_to_r, uint8_t t_to_b, DOGS_packet p){
 8000cc8:	b5b0      	push	{r4, r5, r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	003b      	movs	r3, r7
 8000cd0:	801a      	strh	r2, [r3, #0]
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	1c02      	adds	r2, r0, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	1dbb      	adds	r3, r7, #6
 8000cda:	1c0a      	adds	r2, r1, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
	if ((l_to_r > (DISPLAY_WIDTH/PIXELS_PER_CHECK))||(t_to_b > CHECKS_WIDE)) {
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b0c      	cmp	r3, #12
 8000ce4:	d803      	bhi.n	8000cee <display_paint_square+0x26>
 8000ce6:	1dbb      	adds	r3, r7, #6
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b08      	cmp	r3, #8
 8000cec:	d902      	bls.n	8000cf4 <display_paint_square+0x2c>
		display_checkerboard();
 8000cee:	f7ff ff45 	bl	8000b7c <display_checkerboard>
 8000cf2:	e05d      	b.n	8000db0 <display_paint_square+0xe8>
	}
	else {
		DOGS_packet page_set = {0, 0xb0|t_to_b};
 8000cf4:	2010      	movs	r0, #16
 8000cf6:	183b      	adds	r3, r7, r0
 8000cf8:	781a      	ldrb	r2, [r3, #0]
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	438a      	bics	r2, r1
 8000cfe:	701a      	strb	r2, [r3, #0]
 8000d00:	1dbb      	adds	r3, r7, #6
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2250      	movs	r2, #80	; 0x50
 8000d06:	4252      	negs	r2, r2
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	183b      	adds	r3, r7, r0
 8000d0e:	705a      	strb	r2, [r3, #1]
		spi_msg_out(page_set);
 8000d10:	183b      	adds	r3, r7, r0
 8000d12:	6818      	ldr	r0, [r3, #0]
 8000d14:	f7ff fdf6 	bl	8000904 <spi_msg_out>
		for (uint16_t n = 0; n < PIXELS_PER_CHECK; n++){
 8000d18:	2316      	movs	r3, #22
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	801a      	strh	r2, [r3, #0]
 8000d20:	e040      	b.n	8000da4 <display_paint_square+0xdc>
			uint8_t col = l_to_r * PIXELS_PER_CHECK + n;
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	b2d9      	uxtb	r1, r3
 8000d2a:	2516      	movs	r5, #22
 8000d2c:	197b      	adds	r3, r7, r5
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	2415      	movs	r4, #21
 8000d34:	193b      	adds	r3, r7, r4
 8000d36:	188a      	adds	r2, r1, r2
 8000d38:	701a      	strb	r2, [r3, #0]
			DOGS_packet col_set[2] = {{0, (col &0x0f)}, {0, 0x10|(col>>4)}};
 8000d3a:	200c      	movs	r0, #12
 8000d3c:	183b      	adds	r3, r7, r0
 8000d3e:	781a      	ldrb	r2, [r3, #0]
 8000d40:	2101      	movs	r1, #1
 8000d42:	438a      	bics	r2, r1
 8000d44:	701a      	strb	r2, [r3, #0]
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	220f      	movs	r2, #15
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	183b      	adds	r3, r7, r0
 8000d52:	705a      	strb	r2, [r3, #1]
 8000d54:	183b      	adds	r3, r7, r0
 8000d56:	789a      	ldrb	r2, [r3, #2]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	438a      	bics	r2, r1
 8000d5c:	709a      	strb	r2, [r3, #2]
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2210      	movs	r2, #16
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	183b      	adds	r3, r7, r0
 8000d6e:	70da      	strb	r2, [r3, #3]
			spi_msg_out(col_set[0]);
 8000d70:	0004      	movs	r4, r0
 8000d72:	183b      	adds	r3, r7, r0
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	f7ff fdc5 	bl	8000904 <spi_msg_out>
			spi_msg_out(col_set[1]);
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	5a9a      	ldrh	r2, [r3, r2]
 8000d80:	2300      	movs	r3, #0
 8000d82:	0412      	lsls	r2, r2, #16
 8000d84:	0c12      	lsrs	r2, r2, #16
 8000d86:	0c1b      	lsrs	r3, r3, #16
 8000d88:	041b      	lsls	r3, r3, #16
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff fdb9 	bl	8000904 <spi_msg_out>
			spi_msg_out(p);
 8000d92:	003b      	movs	r3, r7
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	f7ff fdb5 	bl	8000904 <spi_msg_out>
		for (uint16_t n = 0; n < PIXELS_PER_CHECK; n++){
 8000d9a:	197b      	adds	r3, r7, r5
 8000d9c:	881a      	ldrh	r2, [r3, #0]
 8000d9e:	197b      	adds	r3, r7, r5
 8000da0:	3201      	adds	r2, #1
 8000da2:	801a      	strh	r2, [r3, #0]
 8000da4:	2316      	movs	r3, #22
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	2b07      	cmp	r3, #7
 8000dac:	d9b9      	bls.n	8000d22 <display_paint_square+0x5a>
		}
	}
}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b006      	add	sp, #24
 8000db6:	bdb0      	pop	{r4, r5, r7, pc}

08000db8 <display_white_square>:

void display_white_square(uint8_t l_to_r, uint8_t t_to_b){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	0002      	movs	r2, r0
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	701a      	strb	r2, [r3, #0]
 8000dc4:	1dbb      	adds	r3, r7, #6
 8000dc6:	1c0a      	adds	r2, r1, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
	const DOGS_packet white = {1, 0x00};
 8000dca:	200c      	movs	r0, #12
 8000dcc:	183b      	adds	r3, r7, r0
 8000dce:	781a      	ldrb	r2, [r3, #0]
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	183b      	adds	r3, r7, r0
 8000dd8:	2200      	movs	r2, #0
 8000dda:	705a      	strb	r2, [r3, #1]
	display_paint_square(l_to_r, t_to_b, white);
 8000ddc:	183b      	adds	r3, r7, r0
 8000dde:	1dba      	adds	r2, r7, #6
 8000de0:	7811      	ldrb	r1, [r2, #0]
 8000de2:	1dfa      	adds	r2, r7, #7
 8000de4:	7810      	ldrb	r0, [r2, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	f7ff ff6e 	bl	8000cc8 <display_paint_square>
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b004      	add	sp, #16
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <display_dark_square>:

void display_dark_square(uint8_t l_to_r, uint8_t t_to_b){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	701a      	strb	r2, [r3, #0]
 8000e00:	1dbb      	adds	r3, r7, #6
 8000e02:	1c0a      	adds	r2, r1, #0
 8000e04:	701a      	strb	r2, [r3, #0]
	const DOGS_packet black = {1, 0xFF};
	display_paint_square(l_to_r, t_to_b, black);
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <display_dark_square+0x2c>)
 8000e08:	1dba      	adds	r2, r7, #6
 8000e0a:	7811      	ldrb	r1, [r2, #0]
 8000e0c:	1dfa      	adds	r2, r7, #7
 8000e0e:	7810      	ldrb	r0, [r2, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	f7ff ff59 	bl	8000cc8 <display_paint_square>
}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b002      	add	sp, #8
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	080060dc 	.word	0x080060dc

08000e24 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Timer 17 running at 10 ms period will
volatile int32_t timer_isr_countdown = 10000;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	timer_isr_countdown--;
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	1e5a      	subs	r2, r3, #1
 8000e32:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000e34:	601a      	str	r2, [r3, #0]
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	20000000 	.word	0x20000000

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e48:	f001 fa7c 	bl	8002344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4c:	f000 f812 	bl	8000e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e50:	f000 f90c 	bl	800106c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e54:	f000 f8bc 	bl	8000fd0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000e58:	f000 f854 	bl	8000f04 <MX_SPI2_Init>
  MX_TIM17_Init();
 8000e5c:	f000 f890 	bl	8000f80 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim17);  // SMC - Start the timer
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <main+0x2c>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f003 f816 	bl	8003e94 <HAL_TIM_Base_Start_IT>
  pong_main();
 8000e68:	f000 fdf8 	bl	8001a5c <pong_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <main+0x28>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	200000f4 	.word	0x200000f4

08000e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b093      	sub	sp, #76	; 0x4c
 8000e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7a:	2410      	movs	r4, #16
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	0018      	movs	r0, r3
 8000e80:	2338      	movs	r3, #56	; 0x38
 8000e82:	001a      	movs	r2, r3
 8000e84:	2100      	movs	r1, #0
 8000e86:	f004 f876 	bl	8004f76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	2310      	movs	r3, #16
 8000e90:	001a      	movs	r2, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	f004 f86f 	bl	8004f76 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f001 fd53 	bl	8002948 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	0052      	lsls	r2, r2, #1
 8000eae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000eb0:	193b      	adds	r3, r7, r4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	2240      	movs	r2, #64	; 0x40
 8000eba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ebc:	193b      	adds	r3, r7, r4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec2:	193b      	adds	r3, r7, r4
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f001 fd8b 	bl	80029e0 <HAL_RCC_OscConfig>
 8000eca:	1e03      	subs	r3, r0, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000ece:	f000 f981 	bl	80011d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed2:	003b      	movs	r3, r7
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ed8:	003b      	movs	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ede:	003b      	movs	r3, r7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee4:	003b      	movs	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eea:	003b      	movs	r3, r7
 8000eec:	2100      	movs	r1, #0
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f002 f890 	bl	8003014 <HAL_RCC_ClockConfig>
 8000ef4:	1e03      	subs	r3, r0, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000ef8:	f000 f96c 	bl	80011d4 <Error_Handler>
  }
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b013      	add	sp, #76	; 0x4c
 8000f02:	bd90      	pop	{r4, r7, pc}

08000f04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <MX_SPI2_Init+0x74>)
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <MX_SPI2_Init+0x78>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <MX_SPI2_Init+0x74>)
 8000f10:	2282      	movs	r2, #130	; 0x82
 8000f12:	0052      	lsls	r2, r2, #1
 8000f14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <MX_SPI2_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <MX_SPI2_Init+0x74>)
 8000f1e:	22e0      	movs	r2, #224	; 0xe0
 8000f20:	00d2      	lsls	r2, r2, #3
 8000f22:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_SPI2_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <MX_SPI2_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_SPI2_Init+0x74>)
 8000f32:	2280      	movs	r2, #128	; 0x80
 8000f34:	0092      	lsls	r2, r2, #2
 8000f36:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_SPI2_Init+0x74>)
 8000f3a:	2208      	movs	r2, #8
 8000f3c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_SPI2_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_SPI2_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_SPI2_Init+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_SPI2_Init+0x74>)
 8000f52:	2207      	movs	r2, #7
 8000f54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_SPI2_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_SPI2_Init+0x74>)
 8000f5e:	2208      	movs	r2, #8
 8000f60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <MX_SPI2_Init+0x74>)
 8000f64:	0018      	movs	r0, r3
 8000f66:	f002 fbb7 	bl	80036d8 <HAL_SPI_Init>
 8000f6a:	1e03      	subs	r3, r0, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f6e:	f000 f931 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000090 	.word	0x20000090
 8000f7c:	40003800 	.word	0x40003800

08000f80 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_TIM17_Init+0x48>)
 8000f86:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <MX_TIM17_Init+0x4c>)
 8000f88:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_TIM17_Init+0x48>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <MX_TIM17_Init+0x48>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 16000;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_TIM17_Init+0x48>)
 8000f98:	22fa      	movs	r2, #250	; 0xfa
 8000f9a:	0192      	lsls	r2, r2, #6
 8000f9c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_TIM17_Init+0x48>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_TIM17_Init+0x48>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MX_TIM17_Init+0x48>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <MX_TIM17_Init+0x48>)
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f002 ff16 	bl	8003de4 <HAL_TIM_Base_Init>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000fbc:	f000 f90a 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	200000f4 	.word	0x200000f4
 8000fcc:	40014800 	.word	0x40014800

08000fd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd4:	4b23      	ldr	r3, [pc, #140]	; (8001064 <MX_USART2_UART_Init+0x94>)
 8000fd6:	4a24      	ldr	r2, [pc, #144]	; (8001068 <MX_USART2_UART_Init+0x98>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fda:	4b22      	ldr	r3, [pc, #136]	; (8001064 <MX_USART2_UART_Init+0x94>)
 8000fdc:	22e1      	movs	r2, #225	; 0xe1
 8000fde:	0252      	lsls	r2, r2, #9
 8000fe0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <MX_USART2_UART_Init+0x94>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <MX_USART2_UART_Init+0x94>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_USART2_UART_Init+0x94>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_USART2_UART_Init+0x94>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_USART2_UART_Init+0x94>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_USART2_UART_Init+0x94>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_USART2_UART_Init+0x94>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_USART2_UART_Init+0x94>)
 800100e:	2200      	movs	r2, #0
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_USART2_UART_Init+0x94>)
 8001014:	2200      	movs	r2, #0
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_USART2_UART_Init+0x94>)
 800101a:	0018      	movs	r0, r3
 800101c:	f003 f980 	bl	8004320 <HAL_UART_Init>
 8001020:	1e03      	subs	r3, r0, #0
 8001022:	d001      	beq.n	8001028 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001024:	f000 f8d6 	bl	80011d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_USART2_UART_Init+0x94>)
 800102a:	2100      	movs	r1, #0
 800102c:	0018      	movs	r0, r3
 800102e:	f003 fe8f 	bl	8004d50 <HAL_UARTEx_SetTxFifoThreshold>
 8001032:	1e03      	subs	r3, r0, #0
 8001034:	d001      	beq.n	800103a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001036:	f000 f8cd 	bl	80011d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <MX_USART2_UART_Init+0x94>)
 800103c:	2100      	movs	r1, #0
 800103e:	0018      	movs	r0, r3
 8001040:	f003 fec6 	bl	8004dd0 <HAL_UARTEx_SetRxFifoThreshold>
 8001044:	1e03      	subs	r3, r0, #0
 8001046:	d001      	beq.n	800104c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001048:	f000 f8c4 	bl	80011d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <MX_USART2_UART_Init+0x94>)
 800104e:	0018      	movs	r0, r3
 8001050:	f003 fe44 	bl	8004cdc <HAL_UARTEx_DisableFifoMode>
 8001054:	1e03      	subs	r3, r0, #0
 8001056:	d001      	beq.n	800105c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001058:	f000 f8bc 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	20000140 	.word	0x20000140
 8001068:	40004400 	.word	0x40004400

0800106c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b08b      	sub	sp, #44	; 0x2c
 8001070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001072:	2414      	movs	r4, #20
 8001074:	193b      	adds	r3, r7, r4
 8001076:	0018      	movs	r0, r3
 8001078:	2314      	movs	r3, #20
 800107a:	001a      	movs	r2, r3
 800107c:	2100      	movs	r1, #0
 800107e:	f003 ff7a 	bl	8004f76 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	4b51      	ldr	r3, [pc, #324]	; (80011c8 <MX_GPIO_Init+0x15c>)
 8001084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001086:	4b50      	ldr	r3, [pc, #320]	; (80011c8 <MX_GPIO_Init+0x15c>)
 8001088:	2104      	movs	r1, #4
 800108a:	430a      	orrs	r2, r1
 800108c:	635a      	str	r2, [r3, #52]	; 0x34
 800108e:	4b4e      	ldr	r3, [pc, #312]	; (80011c8 <MX_GPIO_Init+0x15c>)
 8001090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001092:	2204      	movs	r2, #4
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800109a:	4b4b      	ldr	r3, [pc, #300]	; (80011c8 <MX_GPIO_Init+0x15c>)
 800109c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800109e:	4b4a      	ldr	r3, [pc, #296]	; (80011c8 <MX_GPIO_Init+0x15c>)
 80010a0:	2120      	movs	r1, #32
 80010a2:	430a      	orrs	r2, r1
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
 80010a6:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <MX_GPIO_Init+0x15c>)
 80010a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010aa:	2220      	movs	r2, #32
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <MX_GPIO_Init+0x15c>)
 80010b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010b6:	4b44      	ldr	r3, [pc, #272]	; (80011c8 <MX_GPIO_Init+0x15c>)
 80010b8:	2101      	movs	r1, #1
 80010ba:	430a      	orrs	r2, r1
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
 80010be:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <MX_GPIO_Init+0x15c>)
 80010c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c2:	2201      	movs	r2, #1
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <MX_GPIO_Init+0x15c>)
 80010cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ce:	4b3e      	ldr	r3, [pc, #248]	; (80011c8 <MX_GPIO_Init+0x15c>)
 80010d0:	2102      	movs	r1, #2
 80010d2:	430a      	orrs	r2, r1
 80010d4:	635a      	str	r2, [r3, #52]	; 0x34
 80010d6:	4b3c      	ldr	r3, [pc, #240]	; (80011c8 <MX_GPIO_Init+0x15c>)
 80010d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010da:	2202      	movs	r2, #2
 80010dc:	4013      	ands	r3, r2
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e2:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <MX_GPIO_Init+0x15c>)
 80010e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <MX_GPIO_Init+0x15c>)
 80010e8:	2108      	movs	r1, #8
 80010ea:	430a      	orrs	r2, r1
 80010ec:	635a      	str	r2, [r3, #52]	; 0x34
 80010ee:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <MX_GPIO_Init+0x15c>)
 80010f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f2:	2208      	movs	r2, #8
 80010f4:	4013      	ands	r3, r2
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DOGS_reset_Pin|nC_D_Pin|LED_GREEN_Pin|QuadKnobA_Pin, GPIO_PIN_RESET);
 80010fa:	23a0      	movs	r3, #160	; 0xa0
 80010fc:	05db      	lsls	r3, r3, #23
 80010fe:	2200      	movs	r2, #0
 8001100:	2163      	movs	r1, #99	; 0x63
 8001102:	0018      	movs	r0, r3
 8001104:	f001 fc03 	bl	800290e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSS_GPIO_Port, nSS_Pin, GPIO_PIN_RESET);
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	482f      	ldr	r0, [pc, #188]	; (80011cc <MX_GPIO_Init+0x160>)
 800110e:	2200      	movs	r2, #0
 8001110:	0019      	movs	r1, r3
 8001112:	f001 fbfc 	bl	800290e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(QuadKnobB_GPIO_Port, QuadKnobB_Pin, GPIO_PIN_RESET);
 8001116:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <MX_GPIO_Init+0x164>)
 8001118:	2200      	movs	r2, #0
 800111a:	2140      	movs	r1, #64	; 0x40
 800111c:	0018      	movs	r0, r3
 800111e:	f001 fbf6 	bl	800290e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DOGS_reset_Pin nC_D_Pin QuadKnobA_Pin */
  GPIO_InitStruct.Pin = DOGS_reset_Pin|nC_D_Pin|QuadKnobA_Pin;
 8001122:	193b      	adds	r3, r7, r4
 8001124:	2243      	movs	r2, #67	; 0x43
 8001126:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	193b      	adds	r3, r7, r4
 800112a:	2201      	movs	r2, #1
 800112c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	193b      	adds	r3, r7, r4
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	193b      	adds	r3, r7, r4
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	193a      	adds	r2, r7, r4
 800113c:	23a0      	movs	r3, #160	; 0xa0
 800113e:	05db      	lsls	r3, r3, #23
 8001140:	0011      	movs	r1, r2
 8001142:	0018      	movs	r0, r3
 8001144:	f001 fa62 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001148:	193b      	adds	r3, r7, r4
 800114a:	2220      	movs	r2, #32
 800114c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	193b      	adds	r3, r7, r4
 8001150:	2201      	movs	r2, #1
 8001152:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	193b      	adds	r3, r7, r4
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115a:	193b      	adds	r3, r7, r4
 800115c:	2202      	movs	r2, #2
 800115e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001160:	193a      	adds	r2, r7, r4
 8001162:	23a0      	movs	r3, #160	; 0xa0
 8001164:	05db      	lsls	r3, r3, #23
 8001166:	0011      	movs	r1, r2
 8001168:	0018      	movs	r0, r3
 800116a:	f001 fa4f 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : nSS_Pin */
  GPIO_InitStruct.Pin = nSS_Pin;
 800116e:	0021      	movs	r1, r4
 8001170:	187b      	adds	r3, r7, r1
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	000c      	movs	r4, r1
 800117a:	193b      	adds	r3, r7, r4
 800117c:	2201      	movs	r2, #1
 800117e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	193b      	adds	r3, r7, r4
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	193b      	adds	r3, r7, r4
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(nSS_GPIO_Port, &GPIO_InitStruct);
 800118c:	193b      	adds	r3, r7, r4
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <MX_GPIO_Init+0x160>)
 8001190:	0019      	movs	r1, r3
 8001192:	0010      	movs	r0, r2
 8001194:	f001 fa3a 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : QuadKnobB_Pin */
  GPIO_InitStruct.Pin = QuadKnobB_Pin;
 8001198:	0021      	movs	r1, r4
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2240      	movs	r2, #64	; 0x40
 800119e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2201      	movs	r2, #1
 80011a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(QuadKnobB_GPIO_Port, &GPIO_InitStruct);
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <MX_GPIO_Init+0x164>)
 80011b6:	0019      	movs	r1, r3
 80011b8:	0010      	movs	r0, r2
 80011ba:	f001 fa27 	bl	800260c <HAL_GPIO_Init>

}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b00b      	add	sp, #44	; 0x2c
 80011c4:	bd90      	pop	{r4, r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	40021000 	.word	0x40021000
 80011cc:	50000c00 	.word	0x50000c00
 80011d0:	50000400 	.word	0x50000400

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011dc:	e7fe      	b.n	80011dc <Error_Handler+0x8>

080011de <snake_opposite_direction>:
// to convert head-to-tail guidance into tail-to-head direction-of-
// movement. The snake is stored h-to-t (because a player will be
// focused on the head). But when the snake moves, each vertebra
// will move toward the head - the reverse of directions here FROM
// the head
enum snake_compass_dir snake_opposite_direction(enum snake_compass_dir d){
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	0002      	movs	r2, r0
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	701a      	strb	r2, [r3, #0]
	switch(d){
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d00c      	beq.n	800120c <snake_opposite_direction+0x2e>
 80011f2:	dc0f      	bgt.n	8001214 <snake_opposite_direction+0x36>
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d00b      	beq.n	8001210 <snake_opposite_direction+0x32>
 80011f8:	dc0c      	bgt.n	8001214 <snake_opposite_direction+0x36>
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d002      	beq.n	8001204 <snake_opposite_direction+0x26>
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d002      	beq.n	8001208 <snake_opposite_direction+0x2a>
 8001202:	e007      	b.n	8001214 <snake_opposite_direction+0x36>
	case SNAKE_COMPASS_N: return SNAKE_COMPASS_S; break;
 8001204:	2301      	movs	r3, #1
 8001206:	e007      	b.n	8001218 <snake_opposite_direction+0x3a>
	case SNAKE_COMPASS_S: return SNAKE_COMPASS_N; break;
 8001208:	2300      	movs	r3, #0
 800120a:	e005      	b.n	8001218 <snake_opposite_direction+0x3a>
	case SNAKE_COMPASS_W: return SNAKE_COMPASS_E; break;
 800120c:	2302      	movs	r3, #2
 800120e:	e003      	b.n	8001218 <snake_opposite_direction+0x3a>
	case SNAKE_COMPASS_E: return SNAKE_COMPASS_W; break;
 8001210:	2303      	movs	r3, #3
 8001212:	e001      	b.n	8001218 <snake_opposite_direction+0x3a>
	default: return d;
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}

08001220 <snake_plot>:
// snake_plot (snake_game, 2-d matrix of snake_compass dirs)
// Converts the snake from a list of vertebrae into a
// matrix of directions. 0 = empty, F = fruit, and the
// compass directions = a snake segment's direction of travel.
const XY_PT error_bar[ERROR_DISPLAY_BLOCK_COUNT] = ERROR_DISPLAY_BAD_HEADING;
bool snake_plot(const snake_game *s, int8_t b[CHECKS_WIDE][CHECKS_WIDE]){
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	bool ok = true;
 800122a:	2317      	movs	r3, #23
 800122c:	18fb      	adds	r3, r7, r3
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
	int8_t x = s->head.x;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2240      	movs	r2, #64	; 0x40
 8001236:	5e9a      	ldrsh	r2, [r3, r2]
 8001238:	2116      	movs	r1, #22
 800123a:	187b      	adds	r3, r7, r1
 800123c:	701a      	strb	r2, [r3, #0]
	int8_t y = s->head.y;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2242      	movs	r2, #66	; 0x42
 8001242:	5e9a      	ldrsh	r2, [r3, r2]
 8001244:	2015      	movs	r0, #21
 8001246:	183b      	adds	r3, r7, r0
 8001248:	701a      	strb	r2, [r3, #0]
	b[x][y] = 1; // snake starts here: post a 1!
 800124a:	187b      	adds	r3, r7, r1
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b25b      	sxtb	r3, r3
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	18d2      	adds	r2, r2, r3
 8001256:	183b      	adds	r3, r7, r0
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b25b      	sxtb	r3, r3
 800125c:	2101      	movs	r1, #1
 800125e:	54d1      	strb	r1, [r2, r3]

	// Plot each vertebra.
	for (int n = 0; n < (s->length - 1); n++){
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	e0a0      	b.n	80013a8 <snake_plot+0x188>
		switch(s->vertebra[n]){
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	18d3      	adds	r3, r2, r3
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b03      	cmp	r3, #3
 8001270:	d026      	beq.n	80012c0 <snake_plot+0xa0>
 8001272:	dc2f      	bgt.n	80012d4 <snake_plot+0xb4>
 8001274:	2b02      	cmp	r3, #2
 8001276:	d019      	beq.n	80012ac <snake_plot+0x8c>
 8001278:	dc2c      	bgt.n	80012d4 <snake_plot+0xb4>
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <snake_plot+0x64>
 800127e:	2b01      	cmp	r3, #1
 8001280:	d00a      	beq.n	8001298 <snake_plot+0x78>
 8001282:	e027      	b.n	80012d4 <snake_plot+0xb4>
			case SNAKE_COMPASS_N: y--; break;
 8001284:	2115      	movs	r1, #21
 8001286:	187b      	adds	r3, r7, r1
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b25b      	sxtb	r3, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	3b01      	subs	r3, #1
 8001290:	b2da      	uxtb	r2, r3
 8001292:	187b      	adds	r3, r7, r1
 8001294:	701a      	strb	r2, [r3, #0]
 8001296:	e036      	b.n	8001306 <snake_plot+0xe6>
			case SNAKE_COMPASS_S: y++; break;
 8001298:	2115      	movs	r1, #21
 800129a:	187b      	adds	r3, r7, r1
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	3301      	adds	r3, #1
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	e02c      	b.n	8001306 <snake_plot+0xe6>
			case SNAKE_COMPASS_E: x++; break;
 80012ac:	2116      	movs	r1, #22
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	3301      	adds	r3, #1
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	701a      	strb	r2, [r3, #0]
 80012be:	e022      	b.n	8001306 <snake_plot+0xe6>
			case SNAKE_COMPASS_W: x--; break;
 80012c0:	2116      	movs	r1, #22
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	3b01      	subs	r3, #1
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	e018      	b.n	8001306 <snake_plot+0xe6>
			default:
				for (int bc = 0; bc < ERROR_DISPLAY_BLOCK_COUNT; bc++){
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	e012      	b.n	8001300 <snake_plot+0xe0>
				    display_dark_square(error_bar[bc].x, error_bar[bc].y);
 80012da:	4b3b      	ldr	r3, [pc, #236]	; (80013c8 <snake_plot+0x1a8>)
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	0092      	lsls	r2, r2, #2
 80012e0:	5ed3      	ldrsh	r3, [r2, r3]
 80012e2:	b2d8      	uxtb	r0, r3
 80012e4:	4a38      	ldr	r2, [pc, #224]	; (80013c8 <snake_plot+0x1a8>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	18d3      	adds	r3, r2, r3
 80012ec:	3302      	adds	r3, #2
 80012ee:	2200      	movs	r2, #0
 80012f0:	5e9b      	ldrsh	r3, [r3, r2]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	0019      	movs	r1, r3
 80012f6:	f7ff fd7d 	bl	8000df4 <display_dark_square>
				for (int bc = 0; bc < ERROR_DISPLAY_BLOCK_COUNT; bc++){
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3301      	adds	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b05      	cmp	r3, #5
 8001304:	dde9      	ble.n	80012da <snake_plot+0xba>
				}
		}
		x = (x >= 0)?(x % CHECKS_WIDE):(CHECKS_WIDE-1);
 8001306:	2216      	movs	r2, #22
 8001308:	18bb      	adds	r3, r7, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b7f      	cmp	r3, #127	; 0x7f
 800130e:	d80c      	bhi.n	800132a <snake_plot+0x10a>
 8001310:	18bb      	adds	r3, r7, r2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b25b      	sxtb	r3, r3
 8001316:	4a2d      	ldr	r2, [pc, #180]	; (80013cc <snake_plot+0x1ac>)
 8001318:	4013      	ands	r3, r2
 800131a:	d504      	bpl.n	8001326 <snake_plot+0x106>
 800131c:	3b01      	subs	r3, #1
 800131e:	2208      	movs	r2, #8
 8001320:	4252      	negs	r2, r2
 8001322:	4313      	orrs	r3, r2
 8001324:	3301      	adds	r3, #1
 8001326:	b25a      	sxtb	r2, r3
 8001328:	e000      	b.n	800132c <snake_plot+0x10c>
 800132a:	2207      	movs	r2, #7
 800132c:	2316      	movs	r3, #22
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	701a      	strb	r2, [r3, #0]
		y = (y >= 0)?(y % CHECKS_WIDE):(CHECKS_WIDE-1);
 8001332:	2215      	movs	r2, #21
 8001334:	18bb      	adds	r3, r7, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b7f      	cmp	r3, #127	; 0x7f
 800133a:	d80c      	bhi.n	8001356 <snake_plot+0x136>
 800133c:	18bb      	adds	r3, r7, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b25b      	sxtb	r3, r3
 8001342:	4a22      	ldr	r2, [pc, #136]	; (80013cc <snake_plot+0x1ac>)
 8001344:	4013      	ands	r3, r2
 8001346:	d504      	bpl.n	8001352 <snake_plot+0x132>
 8001348:	3b01      	subs	r3, #1
 800134a:	2208      	movs	r2, #8
 800134c:	4252      	negs	r2, r2
 800134e:	4313      	orrs	r3, r2
 8001350:	3301      	adds	r3, #1
 8001352:	b25a      	sxtb	r2, r3
 8001354:	e000      	b.n	8001358 <snake_plot+0x138>
 8001356:	2207      	movs	r2, #7
 8001358:	2115      	movs	r1, #21
 800135a:	187b      	adds	r3, r7, r1
 800135c:	701a      	strb	r2, [r3, #0]
		if (b[x][y] > 0) ok = false; // overlapping vertebrae NOT ok
 800135e:	2316      	movs	r3, #22
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b25b      	sxtb	r3, r3
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	18d2      	adds	r2, r2, r3
 800136c:	187b      	adds	r3, r7, r1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b25b      	sxtb	r3, r3
 8001372:	56d3      	ldrsb	r3, [r2, r3]
 8001374:	2b00      	cmp	r3, #0
 8001376:	dd03      	ble.n	8001380 <snake_plot+0x160>
 8001378:	2317      	movs	r3, #23
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
		b[x][y] = n+2;
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	3302      	adds	r3, #2
 8001386:	b2d9      	uxtb	r1, r3
 8001388:	2316      	movs	r3, #22
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b25b      	sxtb	r3, r3
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	18d2      	adds	r2, r2, r3
 8001396:	2315      	movs	r3, #21
 8001398:	18fb      	adds	r3, r7, r3
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b25b      	sxtb	r3, r3
 800139e:	b249      	sxtb	r1, r1
 80013a0:	54d1      	strb	r1, [r2, r3]
	for (int n = 0; n < (s->length - 1); n++){
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	3301      	adds	r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2248      	movs	r2, #72	; 0x48
 80013ac:	5c9b      	ldrb	r3, [r3, r2]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	da00      	bge.n	80013b8 <snake_plot+0x198>
 80013b6:	e756      	b.n	8001266 <snake_plot+0x46>
	}
	return ok;
 80013b8:	2317      	movs	r3, #23
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	781b      	ldrb	r3, [r3, #0]
}
 80013be:	0018      	movs	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b006      	add	sp, #24
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	080060e0 	.word	0x080060e0
 80013cc:	80000007 	.word	0x80000007

080013d0 <fruit_plot>:

bool fruit_plot(const snake_game *s, int8_t b[CHECKS_WIDE][CHECKS_WIDE]){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
	// If the fruit already plotted, or the ground is clear = ok!
	bool ok = true;
 80013da:	200f      	movs	r0, #15
 80013dc:	183b      	adds	r3, r7, r0
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
	if (b[s->fruit.x][s->fruit.y] == -1) ok = true;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2244      	movs	r2, #68	; 0x44
 80013e6:	5e9b      	ldrsh	r3, [r3, r2]
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	18d3      	adds	r3, r2, r3
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	2146      	movs	r1, #70	; 0x46
 80013f2:	5e52      	ldrsh	r2, [r2, r1]
 80013f4:	569b      	ldrsb	r3, [r3, r2]
 80013f6:	3301      	adds	r3, #1
 80013f8:	d103      	bne.n	8001402 <fruit_plot+0x32>
 80013fa:	183b      	adds	r3, r7, r0
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e01f      	b.n	8001442 <fruit_plot+0x72>
	else if (b[s->fruit.x][s->fruit.y] == 0){
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2244      	movs	r2, #68	; 0x44
 8001406:	5e9b      	ldrsh	r3, [r3, r2]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	18d3      	adds	r3, r2, r3
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	2146      	movs	r1, #70	; 0x46
 8001412:	5e52      	ldrsh	r2, [r2, r1]
 8001414:	569b      	ldrsb	r3, [r3, r2]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10f      	bne.n	800143a <fruit_plot+0x6a>
		ok = true;
 800141a:	230f      	movs	r3, #15
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
		b[s->fruit.x][s->fruit.y] = -1;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2244      	movs	r2, #68	; 0x44
 8001426:	5e9b      	ldrsh	r3, [r3, r2]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	18d3      	adds	r3, r2, r3
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	2146      	movs	r1, #70	; 0x46
 8001432:	5e52      	ldrsh	r2, [r2, r1]
 8001434:	21ff      	movs	r1, #255	; 0xff
 8001436:	5499      	strb	r1, [r3, r2]
 8001438:	e003      	b.n	8001442 <fruit_plot+0x72>
	}
	else{
		ok = false;
 800143a:	230f      	movs	r3, #15
 800143c:	18fb      	adds	r3, r7, r3
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
	}
	return ok;
 8001442:	230f      	movs	r3, #15
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	781b      	ldrb	r3, [r3, #0]
}
 8001448:	0018      	movs	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	b004      	add	sp, #16
 800144e:	bd80      	pop	{r7, pc}

08001450 <snake_game_init>:


// snake_board_init (obvious - sets head, tail, vertebra directions & length, first fruit)
void snake_game_init(snake_game* s){
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	const XY_PT initial_head = {3,3};
	const XY_PT initial_fruit = {3,6};
	const int8_t initial_length = 3;
 8001458:	200f      	movs	r0, #15
 800145a:	183b      	adds	r3, r7, r0
 800145c:	2203      	movs	r2, #3
 800145e:	701a      	strb	r2, [r3, #0]
	// JPL DEVIATION - ACCEPT WARNING: "Avoid constant literals"
	// Excuse -- The snake's initial position is (1) initialization,
	// not operation; and (2) it is arbitrary, not critical -- so defining
	// named constants for this is silly. Just be sure that each
	// coordinate is within {0 ... CHECKS_WIDE-1}.
	s->head.x = initial_head.x;
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <snake_game_init+0x68>)
 8001462:	2100      	movs	r1, #0
 8001464:	5e59      	ldrsh	r1, [r3, r1]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2240      	movs	r2, #64	; 0x40
 800146a:	5299      	strh	r1, [r3, r2]
	s->head.y = initial_head.y;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <snake_game_init+0x68>)
 800146e:	2102      	movs	r1, #2
 8001470:	5e59      	ldrsh	r1, [r3, r1]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2242      	movs	r2, #66	; 0x42
 8001476:	5299      	strh	r1, [r3, r2]
	s->vertebra[0] = SNAKE_COMPASS_N; // This is the head. The neck is NORTH
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
	s->vertebra[1] = SNAKE_COMPASS_W; // The body @ 1. The tail is WEST.
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2203      	movs	r2, #3
 8001482:	705a      	strb	r2, [r3, #1]
	s->length = initial_length;
 8001484:	183b      	adds	r3, r7, r0
 8001486:	7819      	ldrb	r1, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2248      	movs	r2, #72	; 0x48
 800148c:	5499      	strb	r1, [r3, r2]
	s->fruit.x = initial_fruit.x;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <snake_game_init+0x6c>)
 8001490:	2100      	movs	r1, #0
 8001492:	5e59      	ldrsh	r1, [r3, r1]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2244      	movs	r2, #68	; 0x44
 8001498:	5299      	strh	r1, [r3, r2]
	s->fruit.y = initial_fruit.y;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <snake_game_init+0x6c>)
 800149c:	2102      	movs	r1, #2
 800149e:	5e59      	ldrsh	r1, [r3, r1]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2246      	movs	r2, #70	; 0x46
 80014a4:	5299      	strh	r1, [r3, r2]
	s->heading = SNAKE_COMPASS_S; // Start off toward the bottom.
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2249      	movs	r2, #73	; 0x49
 80014aa:	2101      	movs	r1, #1
 80014ac:	5499      	strb	r1, [r3, r2]
}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b004      	add	sp, #16
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	08006110 	.word	0x08006110
 80014bc:	08006114 	.word	0x08006114

080014c0 <pacify_compiler>:


void pacify_compiler(){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0

}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <snake_heading_update>:

// snake_heading_update(game-pointer, queue-pointer) will adjust the
// (.heading) field of a snake in response to a message from the user
// as conveyed on the queue.
void snake_heading_update(snake_game* s, Smc_queue* q){
 80014ca:	b5b0      	push	{r4, r5, r7, lr}
 80014cc:	b084      	sub	sp, #16
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	6039      	str	r1, [r7, #0]
	Q_data msg;
	bool data_available;
	data_available = q->get(q, &msg);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	250f      	movs	r5, #15
 80014da:	197c      	adds	r4, r7, r5
 80014dc:	2208      	movs	r2, #8
 80014de:	18b9      	adds	r1, r7, r2
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	0010      	movs	r0, r2
 80014e4:	4798      	blx	r3
 80014e6:	0003      	movs	r3, r0
 80014e8:	7023      	strb	r3, [r4, #0]
    if (!data_available) return;
 80014ea:	197b      	adds	r3, r7, r5
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2201      	movs	r2, #1
 80014f0:	4053      	eors	r3, r2
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d13e      	bne.n	8001576 <snake_heading_update+0xac>
    else{
    	switch(s->heading){
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2249      	movs	r2, #73	; 0x49
 80014fc:	5c9b      	ldrb	r3, [r3, r2]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d02b      	beq.n	800155a <snake_heading_update+0x90>
 8001502:	dc35      	bgt.n	8001570 <snake_heading_update+0xa6>
 8001504:	2b02      	cmp	r3, #2
 8001506:	d011      	beq.n	800152c <snake_heading_update+0x62>
 8001508:	dc32      	bgt.n	8001570 <snake_heading_update+0xa6>
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <snake_heading_update+0x4a>
 800150e:	2b01      	cmp	r3, #1
 8001510:	d017      	beq.n	8001542 <snake_heading_update+0x78>
 8001512:	e02d      	b.n	8001570 <snake_heading_update+0xa6>
    	case SNAKE_COMPASS_N:
    		s->heading = (msg.twist == QUADKNOB_CW)?
 8001514:	2308      	movs	r3, #8
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	781b      	ldrb	r3, [r3, #0]
    					 SNAKE_COMPASS_E:SNAKE_COMPASS_W;
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <snake_heading_update+0x58>
 800151e:	2102      	movs	r1, #2
 8001520:	e000      	b.n	8001524 <snake_heading_update+0x5a>
 8001522:	2103      	movs	r1, #3
    		s->heading = (msg.twist == QUADKNOB_CW)?
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2249      	movs	r2, #73	; 0x49
 8001528:	5499      	strb	r1, [r3, r2]
    		break;
 800152a:	e025      	b.n	8001578 <snake_heading_update+0xae>
    	case SNAKE_COMPASS_E:
    		s->heading = (msg.twist == QUADKNOB_CW)?
 800152c:	2308      	movs	r3, #8
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	781b      	ldrb	r3, [r3, #0]
    					 SNAKE_COMPASS_S:SNAKE_COMPASS_N;
 8001532:	425a      	negs	r2, r3
 8001534:	4153      	adcs	r3, r2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	0019      	movs	r1, r3
    		s->heading = (msg.twist == QUADKNOB_CW)?
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2249      	movs	r2, #73	; 0x49
 800153e:	5499      	strb	r1, [r3, r2]
    		break;
 8001540:	e01a      	b.n	8001578 <snake_heading_update+0xae>
    	case SNAKE_COMPASS_S:
    		s->heading = (msg.twist == QUADKNOB_CW)?
 8001542:	2308      	movs	r3, #8
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	781b      	ldrb	r3, [r3, #0]
    					 SNAKE_COMPASS_W:SNAKE_COMPASS_E;
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <snake_heading_update+0x86>
 800154c:	2103      	movs	r1, #3
 800154e:	e000      	b.n	8001552 <snake_heading_update+0x88>
 8001550:	2102      	movs	r1, #2
    		s->heading = (msg.twist == QUADKNOB_CW)?
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2249      	movs	r2, #73	; 0x49
 8001556:	5499      	strb	r1, [r3, r2]
    		break;
 8001558:	e00e      	b.n	8001578 <snake_heading_update+0xae>
    	case SNAKE_COMPASS_W:
    		s->heading = (msg.twist == QUADKNOB_CW)?
 800155a:	2308      	movs	r3, #8
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	781b      	ldrb	r3, [r3, #0]
    					 SNAKE_COMPASS_N:SNAKE_COMPASS_S;
 8001560:	1e5a      	subs	r2, r3, #1
 8001562:	4193      	sbcs	r3, r2
 8001564:	b2db      	uxtb	r3, r3
 8001566:	0019      	movs	r1, r3
    		s->heading = (msg.twist == QUADKNOB_CW)?
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2249      	movs	r2, #73	; 0x49
 800156c:	5499      	strb	r1, [r3, r2]
    		break;
 800156e:	e003      	b.n	8001578 <snake_heading_update+0xae>
    	default: //s->heading remains unchanged. No good way to say this in C.
    		pacify_compiler();
 8001570:	f7ff ffa6 	bl	80014c0 <pacify_compiler>
 8001574:	e000      	b.n	8001578 <snake_heading_update+0xae>
    if (!data_available) return;
 8001576:	46c0      	nop			; (mov r8, r8)
    	}
    }
}
 8001578:	46bd      	mov	sp, r7
 800157a:	b004      	add	sp, #16
 800157c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001580 <snake_place_fruit>:


void snake_place_fruit(snake_game *s, const int8_t board[CHECKS_WIDE][CHECKS_WIDE]){
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
	// MUST NOT CALL snake_board_cleanup to avoid bad recursion.
	// Tries to place fruit randomly; if unlucky, then switches to a
	// put-it-in-the-first-empty-cell.
	const int16_t patience = 100;
 800158a:	230e      	movs	r3, #14
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	2264      	movs	r2, #100	; 0x64
 8001590:	801a      	strh	r2, [r3, #0]
	bool complete = false;
 8001592:	231f      	movs	r3, #31
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
	// JPL says all loops must terminate - so we will only try 100 times
	// (called our "patience") for a fun random result. Otherwise, we will
	// place fruit at the first available cell l-to-r,  top-to-bottom.
	for (int n = 0; n < patience; n++){
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	e03c      	b.n	800161a <snake_place_fruit+0x9a>
		uint8_t yy = rand() % CHECKS_WIDE;
 80015a0:	f003 fcf2 	bl	8004f88 <rand>
 80015a4:	0003      	movs	r3, r0
 80015a6:	4a42      	ldr	r2, [pc, #264]	; (80016b0 <snake_place_fruit+0x130>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	d504      	bpl.n	80015b6 <snake_place_fruit+0x36>
 80015ac:	3b01      	subs	r3, #1
 80015ae:	2208      	movs	r2, #8
 80015b0:	4252      	negs	r2, r2
 80015b2:	4313      	orrs	r3, r2
 80015b4:	3301      	adds	r3, #1
 80015b6:	001a      	movs	r2, r3
 80015b8:	230d      	movs	r3, #13
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	701a      	strb	r2, [r3, #0]
		uint8_t xx = rand() % CHECKS_WIDE;
 80015be:	f003 fce3 	bl	8004f88 <rand>
 80015c2:	0003      	movs	r3, r0
 80015c4:	4a3a      	ldr	r2, [pc, #232]	; (80016b0 <snake_place_fruit+0x130>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	d504      	bpl.n	80015d4 <snake_place_fruit+0x54>
 80015ca:	3b01      	subs	r3, #1
 80015cc:	2208      	movs	r2, #8
 80015ce:	4252      	negs	r2, r2
 80015d0:	4313      	orrs	r3, r2
 80015d2:	3301      	adds	r3, #1
 80015d4:	001a      	movs	r2, r3
 80015d6:	210c      	movs	r1, #12
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	701a      	strb	r2, [r3, #0]
		if (board[xx][yy] == 0){
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	18d2      	adds	r2, r2, r3
 80015e6:	200d      	movs	r0, #13
 80015e8:	183b      	adds	r3, r7, r0
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	56d3      	ldrsb	r3, [r2, r3]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d110      	bne.n	8001614 <snake_place_fruit+0x94>
			complete = true;
 80015f2:	231f      	movs	r3, #31
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
			s->fruit.x = xx;
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b219      	sxth	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2244      	movs	r2, #68	; 0x44
 8001604:	5299      	strh	r1, [r3, r2]
			s->fruit.y = yy;
 8001606:	183b      	adds	r3, r7, r0
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b219      	sxth	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2246      	movs	r2, #70	; 0x46
 8001610:	5299      	strh	r1, [r3, r2]
			break; //-- done the loop!
 8001612:	e009      	b.n	8001628 <snake_place_fruit+0xa8>
	for (int n = 0; n < patience; n++){
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	3301      	adds	r3, #1
 8001618:	61bb      	str	r3, [r7, #24]
 800161a:	230e      	movs	r3, #14
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	2200      	movs	r2, #0
 8001620:	5e9b      	ldrsh	r3, [r3, r2]
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	429a      	cmp	r2, r3
 8001626:	dbbb      	blt.n	80015a0 <snake_place_fruit+0x20>
	}// end for loop trying 100 random placements

	// If 100 random guesses all hit the snake's body, then
	// begin an exhaustive search from the top left. We will
	// find an open cell if there is one!
	if (!complete){
 8001628:	231f      	movs	r3, #31
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2201      	movs	r2, #1
 8001630:	4053      	eors	r3, r2
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d02a      	beq.n	800168e <snake_place_fruit+0x10e>
		for (int r = 0; r < CHECKS_WIDE; r++){
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e024      	b.n	8001688 <snake_place_fruit+0x108>
			for (int c = 0; c < CHECKS_WIDE; c++){
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	e01b      	b.n	800167c <snake_place_fruit+0xfc>
				if (board[r][c] == 0){
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	18d2      	adds	r2, r2, r3
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	18d3      	adds	r3, r2, r3
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b25b      	sxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10e      	bne.n	8001676 <snake_place_fruit+0xf6>
					complete = true;
 8001658:	231f      	movs	r3, #31
 800165a:	18fb      	adds	r3, r7, r3
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
					s->fruit.x = r;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	b219      	sxth	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2244      	movs	r2, #68	; 0x44
 8001668:	5299      	strh	r1, [r3, r2]
					s->fruit.y = c;
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	b219      	sxth	r1, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2246      	movs	r2, #70	; 0x46
 8001672:	5299      	strh	r1, [r3, r2]
					break; //-- done the loop!
 8001674:	e005      	b.n	8001682 <snake_place_fruit+0x102>
			for (int c = 0; c < CHECKS_WIDE; c++){
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	3301      	adds	r3, #1
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b07      	cmp	r3, #7
 8001680:	dde0      	ble.n	8001644 <snake_place_fruit+0xc4>
		for (int r = 0; r < CHECKS_WIDE; r++){
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2b07      	cmp	r3, #7
 800168c:	ddd7      	ble.n	800163e <snake_place_fruit+0xbe>
				}// end if
			} // end for-c
		} // end for-r
	} // end if back-up plan
	display_dark_square(s->fruit.x,s->fruit.y);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2244      	movs	r2, #68	; 0x44
 8001692:	5e9b      	ldrsh	r3, [r3, r2]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2146      	movs	r1, #70	; 0x46
 800169a:	5e5b      	ldrsh	r3, [r3, r1]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	0019      	movs	r1, r3
 80016a0:	0010      	movs	r0, r2
 80016a2:	f7ff fba7 	bl	8000df4 <display_dark_square>

	return;
 80016a6:	46c0      	nop			; (mov r8, r8)
}
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b008      	add	sp, #32
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	80000007 	.word	0x80000007

080016b4 <find_next_head>:

XY_PT find_next_head(snake_game* s){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	XY_PT square = s->head;
 80016bc:	2308      	movs	r3, #8
 80016be:	18fa      	adds	r2, r7, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	0010      	movs	r0, r2
 80016c4:	3340      	adds	r3, #64	; 0x40
 80016c6:	2204      	movs	r2, #4
 80016c8:	0019      	movs	r1, r3
 80016ca:	f003 fc4b 	bl	8004f64 <memcpy>
	switch(s->heading){
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2249      	movs	r2, #73	; 0x49
 80016d2:	5c9b      	ldrb	r3, [r3, r2]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d835      	bhi.n	8001744 <find_next_head+0x90>
 80016d8:	009a      	lsls	r2, r3, #2
 80016da:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <find_next_head+0x118>)
 80016dc:	18d3      	adds	r3, r2, r3
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	469f      	mov	pc, r3
	    // The heading should always be a real direction
		case SNAKE_COMPASS_0:
		case SNAKE_COMPASS_FRUIT_HERE:
			snake_game_init(s);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff feb3 	bl	8001450 <snake_game_init>
			break;
 80016ea:	e02b      	b.n	8001744 <find_next_head+0x90>
		// Quick calculation of the next cell:
		case SNAKE_COMPASS_N:
			square.y--;
 80016ec:	2108      	movs	r1, #8
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	2202      	movs	r2, #2
 80016f2:	5e9b      	ldrsh	r3, [r3, r2]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	3b01      	subs	r3, #1
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	805a      	strh	r2, [r3, #2]
			break;
 8001700:	e020      	b.n	8001744 <find_next_head+0x90>
		case SNAKE_COMPASS_S:
			square.y++;
 8001702:	2108      	movs	r1, #8
 8001704:	187b      	adds	r3, r7, r1
 8001706:	2202      	movs	r2, #2
 8001708:	5e9b      	ldrsh	r3, [r3, r2]
 800170a:	b29b      	uxth	r3, r3
 800170c:	3301      	adds	r3, #1
 800170e:	b29b      	uxth	r3, r3
 8001710:	b21a      	sxth	r2, r3
 8001712:	187b      	adds	r3, r7, r1
 8001714:	805a      	strh	r2, [r3, #2]
			break;
 8001716:	e015      	b.n	8001744 <find_next_head+0x90>
		case SNAKE_COMPASS_E:
			square.x++;
 8001718:	2108      	movs	r1, #8
 800171a:	187b      	adds	r3, r7, r1
 800171c:	2200      	movs	r2, #0
 800171e:	5e9b      	ldrsh	r3, [r3, r2]
 8001720:	b29b      	uxth	r3, r3
 8001722:	3301      	adds	r3, #1
 8001724:	b29b      	uxth	r3, r3
 8001726:	b21a      	sxth	r2, r3
 8001728:	187b      	adds	r3, r7, r1
 800172a:	801a      	strh	r2, [r3, #0]
			break;
 800172c:	e00a      	b.n	8001744 <find_next_head+0x90>
		case SNAKE_COMPASS_W:
			square.x--;
 800172e:	2108      	movs	r1, #8
 8001730:	187b      	adds	r3, r7, r1
 8001732:	2200      	movs	r2, #0
 8001734:	5e9b      	ldrsh	r3, [r3, r2]
 8001736:	b29b      	uxth	r3, r3
 8001738:	3b01      	subs	r3, #1
 800173a:	b29b      	uxth	r3, r3
 800173c:	b21a      	sxth	r2, r3
 800173e:	187b      	adds	r3, r7, r1
 8001740:	801a      	strh	r2, [r3, #0]
			break;
 8001742:	46c0      	nop			; (mov r8, r8)
	}
	// Wrap like a torus: -1->7, 0->0, 1->1, 7->7, 8->0
	square.x = (square.x >= 0)?(square.x % CHECKS_WIDE):(CHECKS_WIDE-1);
 8001744:	2208      	movs	r2, #8
 8001746:	18bb      	adds	r3, r7, r2
 8001748:	2100      	movs	r1, #0
 800174a:	5e5b      	ldrsh	r3, [r3, r1]
 800174c:	2b00      	cmp	r3, #0
 800174e:	db0c      	blt.n	800176a <find_next_head+0xb6>
 8001750:	18bb      	adds	r3, r7, r2
 8001752:	2200      	movs	r2, #0
 8001754:	5e9b      	ldrsh	r3, [r3, r2]
 8001756:	4a1e      	ldr	r2, [pc, #120]	; (80017d0 <find_next_head+0x11c>)
 8001758:	4013      	ands	r3, r2
 800175a:	d504      	bpl.n	8001766 <find_next_head+0xb2>
 800175c:	3b01      	subs	r3, #1
 800175e:	2208      	movs	r2, #8
 8001760:	4252      	negs	r2, r2
 8001762:	4313      	orrs	r3, r2
 8001764:	3301      	adds	r3, #1
 8001766:	b21a      	sxth	r2, r3
 8001768:	e000      	b.n	800176c <find_next_head+0xb8>
 800176a:	2207      	movs	r2, #7
 800176c:	2108      	movs	r1, #8
 800176e:	187b      	adds	r3, r7, r1
 8001770:	801a      	strh	r2, [r3, #0]
	square.y = (square.y >= 0)?(square.y % CHECKS_WIDE):(CHECKS_WIDE-1);
 8001772:	000a      	movs	r2, r1
 8001774:	18bb      	adds	r3, r7, r2
 8001776:	2102      	movs	r1, #2
 8001778:	5e5b      	ldrsh	r3, [r3, r1]
 800177a:	2b00      	cmp	r3, #0
 800177c:	db0c      	blt.n	8001798 <find_next_head+0xe4>
 800177e:	18bb      	adds	r3, r7, r2
 8001780:	2202      	movs	r2, #2
 8001782:	5e9b      	ldrsh	r3, [r3, r2]
 8001784:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <find_next_head+0x11c>)
 8001786:	4013      	ands	r3, r2
 8001788:	d504      	bpl.n	8001794 <find_next_head+0xe0>
 800178a:	3b01      	subs	r3, #1
 800178c:	2208      	movs	r2, #8
 800178e:	4252      	negs	r2, r2
 8001790:	4313      	orrs	r3, r2
 8001792:	3301      	adds	r3, #1
 8001794:	b21a      	sxth	r2, r3
 8001796:	e000      	b.n	800179a <find_next_head+0xe6>
 8001798:	2207      	movs	r2, #7
 800179a:	2108      	movs	r1, #8
 800179c:	187b      	adds	r3, r7, r1
 800179e:	805a      	strh	r2, [r3, #2]
	return square;
 80017a0:	200c      	movs	r0, #12
 80017a2:	183b      	adds	r3, r7, r0
 80017a4:	187a      	adds	r2, r7, r1
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	183a      	adds	r2, r7, r0
 80017ac:	2300      	movs	r3, #0
 80017ae:	8811      	ldrh	r1, [r2, #0]
 80017b0:	0409      	lsls	r1, r1, #16
 80017b2:	0c09      	lsrs	r1, r1, #16
 80017b4:	0c1b      	lsrs	r3, r3, #16
 80017b6:	041b      	lsls	r3, r3, #16
 80017b8:	430b      	orrs	r3, r1
 80017ba:	8852      	ldrh	r2, [r2, #2]
 80017bc:	0412      	lsls	r2, r2, #16
 80017be:	041b      	lsls	r3, r3, #16
 80017c0:	0c1b      	lsrs	r3, r3, #16
 80017c2:	4313      	orrs	r3, r2
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b004      	add	sp, #16
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	080060f8 	.word	0x080060f8
 80017d0:	80000007 	.word	0x80000007

080017d4 <snake_periodic_play>:


void snake_periodic_play(snake_game* s){
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b08b      	sub	sp, #44	; 0x2c
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	// Get a fresh plot of the board to check for legal & fruit moves:
	static int8_t board[CHECKS_WIDE][CHECKS_WIDE];
	// Always clear the board and redraw it.
	for (int x = 0; x < CHECKS_WIDE; x++){
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
 80017e0:	e013      	b.n	800180a <snake_periodic_play+0x36>
		for (int y = 0; y < CHECKS_WIDE; y++){
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
 80017e6:	e00a      	b.n	80017fe <snake_periodic_play+0x2a>
			board[x][y] = 0;
 80017e8:	4a75      	ldr	r2, [pc, #468]	; (80019c0 <snake_periodic_play+0x1ec>)
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	18d2      	adds	r2, r2, r3
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	18d3      	adds	r3, r2, r3
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
		for (int y = 0; y < CHECKS_WIDE; y++){
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	3301      	adds	r3, #1
 80017fc:	623b      	str	r3, [r7, #32]
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	2b07      	cmp	r3, #7
 8001802:	ddf1      	ble.n	80017e8 <snake_periodic_play+0x14>
	for (int x = 0; x < CHECKS_WIDE; x++){
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	3301      	adds	r3, #1
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	2b07      	cmp	r3, #7
 800180e:	dde8      	ble.n	80017e2 <snake_periodic_play+0xe>
		}
	}
	bool ok;
	ok = snake_plot(s, board) && fruit_plot(s, board); // Will happen l-to-r.
 8001810:	4a6b      	ldr	r2, [pc, #428]	; (80019c0 <snake_periodic_play+0x1ec>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	0011      	movs	r1, r2
 8001816:	0018      	movs	r0, r3
 8001818:	f7ff fd02 	bl	8001220 <snake_plot>
 800181c:	1e03      	subs	r3, r0, #0
 800181e:	d009      	beq.n	8001834 <snake_periodic_play+0x60>
 8001820:	4a67      	ldr	r2, [pc, #412]	; (80019c0 <snake_periodic_play+0x1ec>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	0011      	movs	r1, r2
 8001826:	0018      	movs	r0, r3
 8001828:	f7ff fdd2 	bl	80013d0 <fruit_plot>
 800182c:	1e03      	subs	r3, r0, #0
 800182e:	d001      	beq.n	8001834 <snake_periodic_play+0x60>
 8001830:	2201      	movs	r2, #1
 8001832:	e000      	b.n	8001836 <snake_periodic_play+0x62>
 8001834:	2200      	movs	r2, #0
 8001836:	2017      	movs	r0, #23
 8001838:	183b      	adds	r3, r7, r0
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	781a      	ldrb	r2, [r3, #0]
 800183e:	2101      	movs	r1, #1
 8001840:	400a      	ands	r2, r1
 8001842:	701a      	strb	r2, [r3, #0]
	if (!ok) {
 8001844:	183b      	adds	r3, r7, r0
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2201      	movs	r2, #1
 800184a:	4053      	eors	r3, r2
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d015      	beq.n	800187e <snake_periodic_play+0xaa>
		display_checkerboard();
 8001852:	f7ff f993 	bl	8000b7c <display_checkerboard>
		for (volatile int32_t n = 0 ; n< BIG_DELAY_COUNT; n++);
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	e002      	b.n	8001862 <snake_periodic_play+0x8e>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4a57      	ldr	r2, [pc, #348]	; (80019c4 <snake_periodic_play+0x1f0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	ddf8      	ble.n	800185c <snake_periodic_play+0x88>
		snake_game_init(s);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	0018      	movs	r0, r3
 800186e:	f7ff fdef 	bl	8001450 <snake_game_init>
		snake_plot(s, board);
 8001872:	4a53      	ldr	r2, [pc, #332]	; (80019c0 <snake_periodic_play+0x1ec>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	0011      	movs	r1, r2
 8001878:	0018      	movs	r0, r3
 800187a:	f7ff fcd1 	bl	8001220 <snake_plot>
	}

	XY_PT next_head = find_next_head(s);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff ff17 	bl	80016b4 <find_next_head>
 8001886:	0003      	movs	r3, r0
 8001888:	001a      	movs	r2, r3
 800188a:	2110      	movs	r1, #16
 800188c:	187b      	adds	r3, r7, r1
 800188e:	601a      	str	r2, [r3, #0]

	// Check for snake self-bite
	if (board[next_head.x][next_head.y] >= 1){
 8001890:	000a      	movs	r2, r1
 8001892:	18bb      	adds	r3, r7, r2
 8001894:	2100      	movs	r1, #0
 8001896:	5e5b      	ldrsh	r3, [r3, r1]
 8001898:	0018      	movs	r0, r3
 800189a:	18bb      	adds	r3, r7, r2
 800189c:	2202      	movs	r2, #2
 800189e:	5e9b      	ldrsh	r3, [r3, r2]
 80018a0:	0019      	movs	r1, r3
 80018a2:	4a47      	ldr	r2, [pc, #284]	; (80019c0 <snake_periodic_play+0x1ec>)
 80018a4:	00c3      	lsls	r3, r0, #3
 80018a6:	18d3      	adds	r3, r2, r3
 80018a8:	565b      	ldrsb	r3, [r3, r1]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	dd00      	ble.n	80018b0 <snake_periodic_play+0xdc>
		// CRASH!
		while(1);
 80018ae:	e7fe      	b.n	80018ae <snake_periodic_play+0xda>
	}

	// Is the heading a normal move into an empty cell?
	else if (board[next_head.x][next_head.y] == 0){
 80018b0:	2410      	movs	r4, #16
 80018b2:	193b      	adds	r3, r7, r4
 80018b4:	2200      	movs	r2, #0
 80018b6:	5e9b      	ldrsh	r3, [r3, r2]
 80018b8:	0018      	movs	r0, r3
 80018ba:	193b      	adds	r3, r7, r4
 80018bc:	2202      	movs	r2, #2
 80018be:	5e9b      	ldrsh	r3, [r3, r2]
 80018c0:	0019      	movs	r1, r3
 80018c2:	4a3f      	ldr	r2, [pc, #252]	; (80019c0 <snake_periodic_play+0x1ec>)
 80018c4:	00c3      	lsls	r3, r0, #3
 80018c6:	18d3      	adds	r3, r2, r3
 80018c8:	565b      	ldrsb	r3, [r3, r1]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d12b      	bne.n	8001926 <snake_periodic_play+0x152>
		s->head.x = next_head.x;
 80018ce:	193b      	adds	r3, r7, r4
 80018d0:	2100      	movs	r1, #0
 80018d2:	5e59      	ldrsh	r1, [r3, r1]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2240      	movs	r2, #64	; 0x40
 80018d8:	5299      	strh	r1, [r3, r2]
		s->head.y = next_head.y;
 80018da:	193b      	adds	r3, r7, r4
 80018dc:	2102      	movs	r1, #2
 80018de:	5e59      	ldrsh	r1, [r3, r1]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2242      	movs	r2, #66	; 0x42
 80018e4:	5299      	strh	r1, [r3, r2]
		// from V[n-1] to V[n], and then let the head, AKA
		// Vertebra[0], take the user-controlled Heading as
		// its direction.
		// There are length-1 Vertebrae, but only length-2
		// connections between them.
		for (int n = (s->length - 2); n>0; n--){
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2248      	movs	r2, #72	; 0x48
 80018ea:	5c9b      	ldrb	r3, [r3, r2]
 80018ec:	3b02      	subs	r3, #2
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	e00b      	b.n	800190a <snake_periodic_play+0x136>
			s->vertebra[n] = s->vertebra[n-1];
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	5cd1      	ldrb	r1, [r2, r3]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	18d3      	adds	r3, r2, r3
 8001900:	1c0a      	adds	r2, r1, #0
 8001902:	701a      	strb	r2, [r3, #0]
		for (int n = (s->length - 2); n>0; n--){
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	3b01      	subs	r3, #1
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	2b00      	cmp	r3, #0
 800190e:	dcf0      	bgt.n	80018f2 <snake_periodic_play+0x11e>
		}
		s->vertebra[0] = snake_opposite_direction(s->heading);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2249      	movs	r2, #73	; 0x49
 8001914:	5c9b      	ldrb	r3, [r3, r2]
 8001916:	0018      	movs	r0, r3
 8001918:	f7ff fc61 	bl	80011de <snake_opposite_direction>
 800191c:	0003      	movs	r3, r0
 800191e:	001a      	movs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	701a      	strb	r2, [r3, #0]
		for (int n = (s->length - 2); n>0; n--){
			s->vertebra[n] = s->vertebra[n-1];
		}
		s->vertebra[0] = snake_opposite_direction(s->heading);
	}
}
 8001924:	e047      	b.n	80019b6 <snake_periodic_play+0x1e2>
	else if (board[next_head.x][next_head.y] == -1)
 8001926:	2410      	movs	r4, #16
 8001928:	193b      	adds	r3, r7, r4
 800192a:	2200      	movs	r2, #0
 800192c:	5e9b      	ldrsh	r3, [r3, r2]
 800192e:	0018      	movs	r0, r3
 8001930:	193b      	adds	r3, r7, r4
 8001932:	2202      	movs	r2, #2
 8001934:	5e9b      	ldrsh	r3, [r3, r2]
 8001936:	0019      	movs	r1, r3
 8001938:	4a21      	ldr	r2, [pc, #132]	; (80019c0 <snake_periodic_play+0x1ec>)
 800193a:	00c3      	lsls	r3, r0, #3
 800193c:	18d3      	adds	r3, r2, r3
 800193e:	565b      	ldrsb	r3, [r3, r1]
 8001940:	3301      	adds	r3, #1
 8001942:	d138      	bne.n	80019b6 <snake_periodic_play+0x1e2>
		s->length++;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2248      	movs	r2, #72	; 0x48
 8001948:	5c9b      	ldrb	r3, [r3, r2]
 800194a:	3301      	adds	r3, #1
 800194c:	b2d9      	uxtb	r1, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2248      	movs	r2, #72	; 0x48
 8001952:	5499      	strb	r1, [r3, r2]
		snake_place_fruit(s, (const int8_t(*)[CHECKS_WIDE]) board);
 8001954:	4a1a      	ldr	r2, [pc, #104]	; (80019c0 <snake_periodic_play+0x1ec>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	0011      	movs	r1, r2
 800195a:	0018      	movs	r0, r3
 800195c:	f7ff fe10 	bl	8001580 <snake_place_fruit>
		s->head.x = next_head.x;
 8001960:	193b      	adds	r3, r7, r4
 8001962:	2100      	movs	r1, #0
 8001964:	5e59      	ldrsh	r1, [r3, r1]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2240      	movs	r2, #64	; 0x40
 800196a:	5299      	strh	r1, [r3, r2]
		s->head.y = next_head.y;
 800196c:	193b      	adds	r3, r7, r4
 800196e:	2102      	movs	r1, #2
 8001970:	5e59      	ldrsh	r1, [r3, r1]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2242      	movs	r2, #66	; 0x42
 8001976:	5299      	strh	r1, [r3, r2]
		for (int n = (s->length - 2); n>0; n--){
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2248      	movs	r2, #72	; 0x48
 800197c:	5c9b      	ldrb	r3, [r3, r2]
 800197e:	3b02      	subs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	e00b      	b.n	800199c <snake_periodic_play+0x1c8>
			s->vertebra[n] = s->vertebra[n-1];
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	3b01      	subs	r3, #1
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	5cd1      	ldrb	r1, [r2, r3]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	18d3      	adds	r3, r2, r3
 8001992:	1c0a      	adds	r2, r1, #0
 8001994:	701a      	strb	r2, [r3, #0]
		for (int n = (s->length - 2); n>0; n--){
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	3b01      	subs	r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	dcf0      	bgt.n	8001984 <snake_periodic_play+0x1b0>
		s->vertebra[0] = snake_opposite_direction(s->heading);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2249      	movs	r2, #73	; 0x49
 80019a6:	5c9b      	ldrb	r3, [r3, r2]
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7ff fc18 	bl	80011de <snake_opposite_direction>
 80019ae:	0003      	movs	r3, r0
 80019b0:	001a      	movs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	701a      	strb	r2, [r3, #0]
}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b00b      	add	sp, #44	; 0x2c
 80019bc:	bd90      	pop	{r4, r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	200001d4 	.word	0x200001d4
 80019c4:	0012d686 	.word	0x0012d686

080019c8 <pong_init>:

//init pong game. creates the bars and the ball
void pong_init(pong_game* pg)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	//initialize left bar on left side
	pg->left_top.x = 0;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	801a      	strh	r2, [r3, #0]
	pg->left_bottom.x = 0;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	811a      	strh	r2, [r3, #8]
	pg->left_middle.x = 0;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	809a      	strh	r2, [r3, #4]
	pg->left_top.y = 3;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2203      	movs	r2, #3
 80019e6:	805a      	strh	r2, [r3, #2]
	pg->left_bottom.x = 5;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2205      	movs	r2, #5
 80019ec:	811a      	strh	r2, [r3, #8]
	pg->left_middle.x = 4;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2204      	movs	r2, #4
 80019f2:	809a      	strh	r2, [r3, #4]

	//initialize right bar on right side
	pg->right_top.x = 7;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2207      	movs	r2, #7
 80019f8:	819a      	strh	r2, [r3, #12]
	pg->right_bottom.x = 7;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2207      	movs	r2, #7
 80019fe:	829a      	strh	r2, [r3, #20]
	pg->right_middle.x = 7;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2207      	movs	r2, #7
 8001a04:	821a      	strh	r2, [r3, #16]
	pg->right_top.y = 3;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2203      	movs	r2, #3
 8001a0a:	81da      	strh	r2, [r3, #14]
	pg->right_bottom.x = 5;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2205      	movs	r2, #5
 8001a10:	829a      	strh	r2, [r3, #20]
	pg->right_middle.x = 4;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2204      	movs	r2, #4
 8001a16:	821a      	strh	r2, [r3, #16]

	//initialize ball
	pg->position.x = 4;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	831a      	strh	r2, [r3, #24]
	pg->position.y = 4;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2204      	movs	r2, #4
 8001a22:	835a      	strh	r2, [r3, #26]
	pg->direction = NORTHEAST; //heads towards the right side
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	771a      	strb	r2, [r3, #28]
}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b002      	add	sp, #8
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <ram_health>:
// this does not happen. ACCEPTABLE.

extern volatile int32_t timer_isr_countdown; // Required to control timing
const int snake_board_size = CHECKS_WIDE; // Provided for extern

void ram_health(uint16_t dummy_var, uint16_t pattern){
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	0002      	movs	r2, r0
 8001a3a:	1dbb      	adds	r3, r7, #6
 8001a3c:	801a      	strh	r2, [r3, #0]
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	1c0a      	adds	r2, r1, #0
 8001a42:	801a      	strh	r2, [r3, #0]
	// DEBUGGING PHASE: LOCK UP THE PROGRAM if RAM is corrupted.
	if (dummy_var != pattern){
 8001a44:	1dba      	adds	r2, r7, #6
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	8812      	ldrh	r2, [r2, #0]
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d000      	beq.n	8001a52 <ram_health+0x20>
		while(1);
 8001a50:	e7fe      	b.n	8001a50 <ram_health+0x1e>
	}
}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b002      	add	sp, #8
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <pong_main>:


void pong_main(void){
 8001a5c:	b5b0      	push	{r4, r5, r7, lr}
 8001a5e:	b0bc      	sub	sp, #240	; 0xf0
 8001a60:	af00      	add	r7, sp, #0
	const int32_t timer_isr_500ms_restart = 500;
 8001a62:	23fa      	movs	r3, #250	; 0xfa
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	22e8      	movs	r2, #232	; 0xe8
 8001a68:	18ba      	adds	r2, r7, r2
 8001a6a:	6013      	str	r3, [r2, #0]
	const int32_t timer_isr_2000ms_restart = 2000;
 8001a6c:	23fa      	movs	r3, #250	; 0xfa
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	24e4      	movs	r4, #228	; 0xe4
 8001a72:	193a      	adds	r2, r7, r4
 8001a74:	6013      	str	r3, [r2, #0]

	// INITIALIZE THE GAME
	// Construct the model "game" object:
	snake_game my_game;
	volatile uint16_t ram_dummy_1 = MEMORY_BARRIER_1;
 8001a76:	2396      	movs	r3, #150	; 0x96
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	4a75      	ldr	r2, [pc, #468]	; (8001c50 <pong_main+0x1f4>)
 8001a7c:	801a      	strh	r2, [r3, #0]
	snake_game_init(&my_game);
 8001a7e:	2398      	movs	r3, #152	; 0x98
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	0018      	movs	r0, r3
 8001a84:	f7ff fce4 	bl	8001450 <snake_game_init>

	// Construct IPC
	Smc_queue turn_q;
	volatile uint16_t ram_dummy_2 = MEMORY_BARRIER_2;
 8001a88:	234e      	movs	r3, #78	; 0x4e
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	4a71      	ldr	r2, [pc, #452]	; (8001c54 <pong_main+0x1f8>)
 8001a8e:	801a      	strh	r2, [r3, #0]
	smc_queue_init(&turn_q);
 8001a90:	2350      	movs	r3, #80	; 0x50
 8001a92:	18fb      	adds	r3, r7, r3
 8001a94:	0018      	movs	r0, r3
 8001a96:	f000 f971 	bl	8001d7c <smc_queue_init>

	// Input object
	QuadKnob user_knob_1;
	volatile uint16_t ram_dummy_3 = MEMORY_BARRIER_3;
 8001a9a:	2326      	movs	r3, #38	; 0x26
 8001a9c:	18fb      	adds	r3, r7, r3
 8001a9e:	4a6e      	ldr	r2, [pc, #440]	; (8001c58 <pong_main+0x1fc>)
 8001aa0:	801a      	strh	r2, [r3, #0]
	quadknob_init(&user_knob_1);
 8001aa2:	2328      	movs	r3, #40	; 0x28
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f7fe fea6 	bl	80007f8 <quadknob_init>
  __ASM volatile ("cpsid i" : : : "memory");
 8001aac:	b672      	cpsid	i
}
 8001aae:	46c0      	nop			; (mov r8, r8)

	// Output object
	// Block all interrupts while initializing - initial protocol timing is critical.
	__disable_irq();
	display_init();
 8001ab0:	f7fe ff76 	bl	80009a0 <display_init>
  __ASM volatile ("cpsie i" : : : "memory");
 8001ab4:	b662      	cpsie	i
}
 8001ab6:	46c0      	nop			; (mov r8, r8)
	__enable_irq();

	//pong game init
	pong_game pong_game;
	volatile uint16_t ram_dummy4 = MEMORY_BARRIER_4;
 8001ab8:	1dbb      	adds	r3, r7, #6
 8001aba:	4a68      	ldr	r2, [pc, #416]	; (8001c5c <pong_main+0x200>)
 8001abc:	801a      	strh	r2, [r3, #0]
	pong_init(&pong_game);
 8001abe:	2308      	movs	r3, #8
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f7ff ff80 	bl	80019c8 <pong_init>

	// Welcome screen = checkerboard for 2 seconds.
	timer_isr_countdown = timer_isr_2000ms_restart;
 8001ac8:	4b65      	ldr	r3, [pc, #404]	; (8001c60 <pong_main+0x204>)
 8001aca:	193a      	adds	r2, r7, r4
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	601a      	str	r2, [r3, #0]
	display_checkerboard();
 8001ad0:	f7ff f854 	bl	8000b7c <display_checkerboard>
	while (timer_isr_countdown > 0){}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	4b62      	ldr	r3, [pc, #392]	; (8001c60 <pong_main+0x204>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	dcfb      	bgt.n	8001ad6 <pong_main+0x7a>
	timer_isr_countdown = timer_isr_500ms_restart;
 8001ade:	4b60      	ldr	r3, [pc, #384]	; (8001c60 <pong_main+0x204>)
 8001ae0:	22e8      	movs	r2, #232	; 0xe8
 8001ae2:	18ba      	adds	r2, r7, r2
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	601a      	str	r2, [r3, #0]
	// Confirm all the rules and paint the initial snake.
	display_blank();
 8001ae8:	f7fe ffce 	bl	8000a88 <display_blank>
	//snake_game_cleanup(&my_game);

	// OPERATE THE GAME
	int32_t prior_timer_countdown = timer_isr_countdown;
 8001aec:	4b5c      	ldr	r3, [pc, #368]	; (8001c60 <pong_main+0x204>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	22ec      	movs	r2, #236	; 0xec
 8001af2:	18ba      	adds	r2, r7, r2
 8001af4:	6013      	str	r3, [r2, #0]

	while(1){
		ram_health(ram_dummy_1, MEMORY_BARRIER_1);
 8001af6:	2396      	movs	r3, #150	; 0x96
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	4a54      	ldr	r2, [pc, #336]	; (8001c50 <pong_main+0x1f4>)
 8001b00:	0011      	movs	r1, r2
 8001b02:	0018      	movs	r0, r3
 8001b04:	f7ff ff95 	bl	8001a32 <ram_health>
		ram_health(ram_dummy_2, MEMORY_BARRIER_2);
 8001b08:	234e      	movs	r3, #78	; 0x4e
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	4a50      	ldr	r2, [pc, #320]	; (8001c54 <pong_main+0x1f8>)
 8001b12:	0011      	movs	r1, r2
 8001b14:	0018      	movs	r0, r3
 8001b16:	f7ff ff8c 	bl	8001a32 <ram_health>
		ram_health(ram_dummy_3, MEMORY_BARRIER_3);
 8001b1a:	2326      	movs	r3, #38	; 0x26
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4a4d      	ldr	r2, [pc, #308]	; (8001c58 <pong_main+0x1fc>)
 8001b24:	0011      	movs	r1, r2
 8001b26:	0018      	movs	r0, r3
 8001b28:	f7ff ff83 	bl	8001a32 <ram_health>

	// ASSERT TIMER COUNTDOWN IN RANGE
		if ((timer_isr_countdown > timer_isr_500ms_restart)||
 8001b2c:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <pong_main+0x204>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	22e8      	movs	r2, #232	; 0xe8
 8001b32:	18ba      	adds	r2, r7, r2
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	db03      	blt.n	8001b42 <pong_main+0xe6>
				(timer_isr_countdown < 0)){
 8001b3a:	4b49      	ldr	r3, [pc, #292]	; (8001c60 <pong_main+0x204>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
		if ((timer_isr_countdown > timer_isr_500ms_restart)||
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	da02      	bge.n	8001b48 <pong_main+0xec>
			display_checkerboard();
 8001b42:	f7ff f81b 	bl	8000b7c <display_checkerboard>
			while(1);
 8001b46:	e7fe      	b.n	8001b46 <pong_main+0xea>
		}

#ifndef TEST_WITHOUT_INPUT
		// Check for user input every 1 ms & paint one block of the display.
		if (prior_timer_countdown != timer_isr_countdown ){
 8001b48:	4b45      	ldr	r3, [pc, #276]	; (8001c60 <pong_main+0x204>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	21ec      	movs	r1, #236	; 0xec
 8001b4e:	187a      	adds	r2, r7, r1
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d066      	beq.n	8001c24 <pong_main+0x1c8>
			prior_timer_countdown = timer_isr_countdown;
 8001b56:	4b42      	ldr	r3, [pc, #264]	; (8001c60 <pong_main+0x204>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	187a      	adds	r2, r7, r1
 8001b5c:	6013      	str	r3, [r2, #0]
			// If time changed, about 1 ms has elapsed.
			// Once each 1 ms, read input pins from user knob and then
			// update "knob" object (which debounces each input pin and
			// then calculates user command).

			bool user_knob_1_pin_A = (GPIO_PIN_SET == HAL_GPIO_ReadPin(QuadKnobA_GPIO_Port, QuadKnobA_Pin));
 8001b5e:	23a0      	movs	r3, #160	; 0xa0
 8001b60:	05db      	lsls	r3, r3, #23
 8001b62:	2140      	movs	r1, #64	; 0x40
 8001b64:	0018      	movs	r0, r3
 8001b66:	f000 feb5 	bl	80028d4 <HAL_GPIO_ReadPin>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	001a      	movs	r2, r3
 8001b6e:	25e3      	movs	r5, #227	; 0xe3
 8001b70:	197b      	adds	r3, r7, r5
 8001b72:	3a01      	subs	r2, #1
 8001b74:	4251      	negs	r1, r2
 8001b76:	414a      	adcs	r2, r1
 8001b78:	701a      	strb	r2, [r3, #0]
			bool user_knob_1_pin_B = (GPIO_PIN_SET == HAL_GPIO_ReadPin(QuadKnobB_GPIO_Port, QuadKnobB_Pin));
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <pong_main+0x208>)
 8001b7c:	2140      	movs	r1, #64	; 0x40
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f000 fea8 	bl	80028d4 <HAL_GPIO_ReadPin>
 8001b84:	0003      	movs	r3, r0
 8001b86:	001a      	movs	r2, r3
 8001b88:	24e2      	movs	r4, #226	; 0xe2
 8001b8a:	193b      	adds	r3, r7, r4
 8001b8c:	3a01      	subs	r2, #1
 8001b8e:	4251      	negs	r1, r2
 8001b90:	414a      	adcs	r2, r1
 8001b92:	701a      	strb	r2, [r3, #0]
			user_knob_1.update(&user_knob_1, user_knob_1_pin_A, user_knob_1_pin_B);
 8001b94:	2028      	movs	r0, #40	; 0x28
 8001b96:	183b      	adds	r3, r7, r0
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	193a      	adds	r2, r7, r4
 8001b9c:	7814      	ldrb	r4, [r2, #0]
 8001b9e:	197a      	adds	r2, r7, r5
 8001ba0:	7811      	ldrb	r1, [r2, #0]
 8001ba2:	0005      	movs	r5, r0
 8001ba4:	1838      	adds	r0, r7, r0
 8001ba6:	0022      	movs	r2, r4
 8001ba8:	4798      	blx	r3

			// Get user command from "knob" - if any action, make it a queue packet and then mail it.
			if (user_knob_1.get(&user_knob_1) != QUADKNOB_STILL){
 8001baa:	002c      	movs	r4, r5
 8001bac:	193b      	adds	r3, r7, r4
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	193a      	adds	r2, r7, r4
 8001bb2:	0010      	movs	r0, r2
 8001bb4:	4798      	blx	r3
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d00f      	beq.n	8001bdc <pong_main+0x180>
				Q_data command_packet;
				command_packet.twist = user_knob_1.get(&user_knob_1);
 8001bbc:	193b      	adds	r3, r7, r4
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	193a      	adds	r2, r7, r4
 8001bc2:	0010      	movs	r0, r2
 8001bc4:	4798      	blx	r3
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	001a      	movs	r2, r3
 8001bca:	003b      	movs	r3, r7
 8001bcc:	701a      	strb	r2, [r3, #0]
				turn_q.put(&turn_q, &command_packet);
 8001bce:	2250      	movs	r2, #80	; 0x50
 8001bd0:	18bb      	adds	r3, r7, r2
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd4:	0039      	movs	r1, r7
 8001bd6:	18ba      	adds	r2, r7, r2
 8001bd8:	0010      	movs	r0, r2
 8001bda:	4798      	blx	r3
			}
			snake_heading_update(&my_game, &turn_q);
 8001bdc:	2350      	movs	r3, #80	; 0x50
 8001bde:	18fa      	adds	r2, r7, r3
 8001be0:	2398      	movs	r3, #152	; 0x98
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	0011      	movs	r1, r2
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7ff fc6f 	bl	80014ca <snake_heading_update>
		// ASSERT HEADING IS VALID
			while ((my_game.heading != SNAKE_COMPASS_N)&&
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	2198      	movs	r1, #152	; 0x98
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	2249      	movs	r2, #73	; 0x49
 8001bf4:	5c9b      	ldrb	r3, [r3, r2]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00e      	beq.n	8001c18 <pong_main+0x1bc>
					(my_game.heading != SNAKE_COMPASS_E)&&
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	2249      	movs	r2, #73	; 0x49
 8001bfe:	5c9b      	ldrb	r3, [r3, r2]
			while ((my_game.heading != SNAKE_COMPASS_N)&&
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d009      	beq.n	8001c18 <pong_main+0x1bc>
					(my_game.heading != SNAKE_COMPASS_S)&&
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	2249      	movs	r2, #73	; 0x49
 8001c08:	5c9b      	ldrb	r3, [r3, r2]
					(my_game.heading != SNAKE_COMPASS_E)&&
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d004      	beq.n	8001c18 <pong_main+0x1bc>
					(my_game.heading != SNAKE_COMPASS_W));
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	2249      	movs	r2, #73	; 0x49
 8001c12:	5c9b      	ldrb	r3, [r3, r2]
					(my_game.heading != SNAKE_COMPASS_S)&&
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d1ea      	bne.n	8001bee <pong_main+0x192>
			incremental_show_snake((const snake_game *)&my_game, false);
 8001c18:	2398      	movs	r3, #152	; 0x98
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f000 f822 	bl	8001c68 <incremental_show_snake>
		}
		if (timer_isr_countdown <= 0) {
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <pong_main+0x204>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	dd00      	ble.n	8001c2e <pong_main+0x1d2>
 8001c2c:	e763      	b.n	8001af6 <pong_main+0x9a>
			// Move and animate every 500 ms
			timer_isr_countdown = timer_isr_500ms_restart;
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <pong_main+0x204>)
 8001c30:	22e8      	movs	r2, #232	; 0xe8
 8001c32:	18ba      	adds	r2, r7, r2
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	601a      	str	r2, [r3, #0]
			//moves the snake one increment
			snake_periodic_play(&my_game);
 8001c38:	2498      	movs	r4, #152	; 0x98
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff fdc9 	bl	80017d4 <snake_periodic_play>
			//shows the snake on the board
			incremental_show_snake(&my_game, true);
 8001c42:	193b      	adds	r3, r7, r4
 8001c44:	2101      	movs	r1, #1
 8001c46:	0018      	movs	r0, r3
 8001c48:	f000 f80e 	bl	8001c68 <incremental_show_snake>
		ram_health(ram_dummy_1, MEMORY_BARRIER_1);
 8001c4c:	e753      	b.n	8001af6 <pong_main+0x9a>
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	00001111 	.word	0x00001111
 8001c54:	00002222 	.word	0x00002222
 8001c58:	00003333 	.word	0x00003333
 8001c5c:	00004444 	.word	0x00004444
 8001c60:	20000000 	.word	0x20000000
 8001c64:	50000400 	.word	0x50000400

08001c68 <incremental_show_snake>:

#include "pong_enums.h"
#include "pong_gameplay.h"
#include "display_DOGS_102.h"

void incremental_show_snake(const snake_game* s, bool board_updated){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	000a      	movs	r2, r1
 8001c72:	1cfb      	adds	r3, r7, #3
 8001c74:	701a      	strb	r2, [r3, #0]
	static int16_t x = 0;
	static int16_t y = 0;
	static int8_t b[CHECKS_WIDE][CHECKS_WIDE] = {0};

	if (board_updated){
 8001c76:	1cfb      	adds	r3, r7, #3
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d02b      	beq.n	8001cd6 <incremental_show_snake+0x6e>
		// clear canvas
		for (int r = 0; r < CHECKS_WIDE; r++){
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	e013      	b.n	8001cac <incremental_show_snake+0x44>
			for (int c = 0; c < CHECKS_WIDE; c++){
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	e00a      	b.n	8001ca0 <incremental_show_snake+0x38>
				b[r][c] = 0;
 8001c8a:	4a39      	ldr	r2, [pc, #228]	; (8001d70 <incremental_show_snake+0x108>)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	18d2      	adds	r2, r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	18d3      	adds	r3, r2, r3
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
			for (int c = 0; c < CHECKS_WIDE; c++){
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b07      	cmp	r3, #7
 8001ca4:	ddf1      	ble.n	8001c8a <incremental_show_snake+0x22>
		for (int r = 0; r < CHECKS_WIDE; r++){
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b07      	cmp	r3, #7
 8001cb0:	dde8      	ble.n	8001c84 <incremental_show_snake+0x1c>
			}
		}
		// paint canvas
		snake_plot(s,b);
 8001cb2:	4a2f      	ldr	r2, [pc, #188]	; (8001d70 <incremental_show_snake+0x108>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	0011      	movs	r1, r2
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7ff fab1 	bl	8001220 <snake_plot>
		fruit_plot(s,b);
 8001cbe:	4a2c      	ldr	r2, [pc, #176]	; (8001d70 <incremental_show_snake+0x108>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	0011      	movs	r1, r2
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff fb83 	bl	80013d0 <fruit_plot>
		// restart at top-left
		x = 0;
 8001cca:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <incremental_show_snake+0x10c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	801a      	strh	r2, [r3, #0]
		y = 0;
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <incremental_show_snake+0x110>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	801a      	strh	r2, [r3, #0]
	}
	if (b[x][y] == 0){
 8001cd6:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <incremental_show_snake+0x10c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	5e9b      	ldrsh	r3, [r3, r2]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <incremental_show_snake+0x110>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	5e9b      	ldrsh	r3, [r3, r2]
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	4a22      	ldr	r2, [pc, #136]	; (8001d70 <incremental_show_snake+0x108>)
 8001ce8:	00c3      	lsls	r3, r0, #3
 8001cea:	18d3      	adds	r3, r2, r3
 8001cec:	565b      	ldrsb	r3, [r3, r1]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10c      	bne.n	8001d0c <incremental_show_snake+0xa4>
		display_white_square(x,y);
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <incremental_show_snake+0x10c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	5e9b      	ldrsh	r3, [r3, r2]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <incremental_show_snake+0x110>)
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	5e5b      	ldrsh	r3, [r3, r1]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	0019      	movs	r1, r3
 8001d04:	0010      	movs	r0, r2
 8001d06:	f7ff f857 	bl	8000db8 <display_white_square>
 8001d0a:	e00b      	b.n	8001d24 <incremental_show_snake+0xbc>
	}
	else {
		display_dark_square(x,y);
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <incremental_show_snake+0x10c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	5e9b      	ldrsh	r3, [r3, r2]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <incremental_show_snake+0x110>)
 8001d16:	2100      	movs	r1, #0
 8001d18:	5e5b      	ldrsh	r3, [r3, r1]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	0019      	movs	r1, r3
 8001d1e:	0010      	movs	r0, r2
 8001d20:	f7ff f868 	bl	8000df4 <display_dark_square>
	}

	// Update the statics so that the next plot is a new cell.
	x++;
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <incremental_show_snake+0x10c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	5e9b      	ldrsh	r3, [r3, r2]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <incremental_show_snake+0x10c>)
 8001d34:	801a      	strh	r2, [r3, #0]
	if (x >= CHECKS_WIDE){
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <incremental_show_snake+0x10c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	5e9b      	ldrsh	r3, [r3, r2]
 8001d3c:	2b07      	cmp	r3, #7
 8001d3e:	dd13      	ble.n	8001d68 <incremental_show_snake+0x100>
		x = 0;
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <incremental_show_snake+0x10c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	801a      	strh	r2, [r3, #0]
		y++;
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <incremental_show_snake+0x110>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	5e9b      	ldrsh	r3, [r3, r2]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <incremental_show_snake+0x110>)
 8001d56:	801a      	strh	r2, [r3, #0]
		if (y >= CHECKS_WIDE){
 8001d58:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <incremental_show_snake+0x110>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	5e9b      	ldrsh	r3, [r3, r2]
 8001d5e:	2b07      	cmp	r3, #7
 8001d60:	dd02      	ble.n	8001d68 <incremental_show_snake+0x100>
			y = 0;
 8001d62:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <incremental_show_snake+0x110>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8001d68:	46c0      	nop			; (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b004      	add	sp, #16
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000214 	.word	0x20000214
 8001d74:	20000254 	.word	0x20000254
 8001d78:	20000256 	.word	0x20000256

08001d7c <smc_queue_init>:
 */

#include "smc_queue.h"
#include "pong_enums.h"

Smc_queue* smc_queue_init(Smc_queue* q){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	q->head = 0;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
	q->tail= 0;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
	q->cap = SMC_Q_BUFSIZE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	220a      	movs	r2, #10
 8001d94:	601a      	str	r2, [r3, #0]
	q->burden = 0;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	605a      	str	r2, [r3, #4]
	q->put = &(smc_queue_put);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a06      	ldr	r2, [pc, #24]	; (8001db8 <smc_queue_init+0x3c>)
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
	q->get = &(smc_queue_get);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <smc_queue_init+0x40>)
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
	q->peek = &(smc_queue_peek);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <smc_queue_init+0x44>)
 8001dac:	63da      	str	r2, [r3, #60]	; 0x3c
	return q;
 8001dae:	687b      	ldr	r3, [r7, #4]
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b002      	add	sp, #8
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	08001dc5 	.word	0x08001dc5
 8001dbc:	08001e25 	.word	0x08001e25
 8001dc0:	08001ea7 	.word	0x08001ea7

08001dc4 <smc_queue_put>:


bool smc_queue_put(Smc_queue *q, const Q_data *msg){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
	bool success = false;
 8001dce:	210f      	movs	r1, #15
 8001dd0:	187b      	adds	r3, r7, r1
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
	// FIRST check if there is room in the queue
	if (q->burden >= q->cap) success = false;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d303      	bcc.n	8001dea <smc_queue_put+0x26>
 8001de2:	187b      	adds	r3, r7, r1
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
 8001de8:	e015      	b.n	8001e16 <smc_queue_put+0x52>
	else {
		 q-> burden += 1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	605a      	str	r2, [r3, #4]
		 q->buffer[q->tail] = *msg;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	0099      	lsls	r1, r3, #2
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	508b      	str	r3, [r1, r2]
		 q->tail += 1;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
		 success = true;
 8001e0e:	230f      	movs	r3, #15
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
	}
	return success;
 8001e16:	230f      	movs	r3, #15
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	781b      	ldrb	r3, [r3, #0]
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b004      	add	sp, #16
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <smc_queue_get>:

bool smc_queue_get(Smc_queue *q, Q_data  *msg){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
	bool success = false;
 8001e2e:	210f      	movs	r1, #15
 8001e30:	187b      	adds	r3, r7, r1
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
	// FIRST check if there is data in the queue
	if (q->burden == 0) success= false;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d103      	bne.n	8001e46 <smc_queue_get+0x22>
 8001e3e:	187b      	adds	r3, r7, r1
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e028      	b.n	8001e98 <smc_queue_get+0x74>

	else {
	    // Get message from front
		*msg = q->buffer[0];
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6912      	ldr	r2, [r2, #16]
 8001e4c:	601a      	str	r2, [r3, #0]
		// Shuffle others forward
		for (int n = 0; n < (q->tail - 1); n++){
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	e00d      	b.n	8001e70 <smc_queue_get+0x4c>
		   q->buffer[n] = q->buffer[n+1];
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	1c58      	adds	r0, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	3204      	adds	r2, #4
 8001e5e:	0092      	lsls	r2, r2, #2
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	3004      	adds	r0, #4
 8001e64:	0080      	lsls	r0, r0, #2
 8001e66:	5841      	ldr	r1, [r0, r1]
 8001e68:	50d1      	str	r1, [r2, r3]
		for (int n = 0; n < (q->tail - 1); n++){
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	1e5a      	subs	r2, r3, #1
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d8eb      	bhi.n	8001e54 <smc_queue_get+0x30>
		}
		// Bookkeeping
		q-> tail -= 1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	609a      	str	r2, [r3, #8]
		q->burden -= 1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	1e5a      	subs	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	605a      	str	r2, [r3, #4]
		success = true;
 8001e90:	230f      	movs	r3, #15
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
	}
	return success;
 8001e98:	230f      	movs	r3, #15
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	781b      	ldrb	r3, [r3, #0]
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b004      	add	sp, #16
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <smc_queue_peek>:


bool smc_queue_peek(const Smc_queue *q, Q_data  *msg){
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
	bool success = false;
 8001eb0:	210f      	movs	r1, #15
 8001eb2:	187b      	adds	r3, r7, r1
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
	// FIRST check if there is data in the queue
	if (q->burden == 0) success = false;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d103      	bne.n	8001ec8 <smc_queue_peek+0x22>
 8001ec0:	187b      	adds	r3, r7, r1
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
 8001ec6:	e007      	b.n	8001ed8 <smc_queue_peek+0x32>
	// If YES - copy data but do not modify anything.
	else {
		*msg = q->buffer[0];
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6912      	ldr	r2, [r2, #16]
 8001ece:	601a      	str	r2, [r3, #0]
		success = true;
 8001ed0:	230f      	movs	r3, #15
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
	}
	return success;
 8001ed8:	230f      	movs	r3, #15
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	781b      	ldrb	r3, [r3, #0]
}
 8001ede:	0018      	movs	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b004      	add	sp, #16
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <HAL_MspInit+0x44>)
 8001ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_MspInit+0x44>)
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	641a      	str	r2, [r3, #64]	; 0x40
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <HAL_MspInit+0x44>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	2201      	movs	r2, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_MspInit+0x44>)
 8001f08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_MspInit+0x44>)
 8001f0c:	2180      	movs	r1, #128	; 0x80
 8001f0e:	0549      	lsls	r1, r1, #21
 8001f10:	430a      	orrs	r2, r1
 8001f12:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_MspInit+0x44>)
 8001f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	055b      	lsls	r3, r3, #21
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b002      	add	sp, #8
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	40021000 	.word	0x40021000

08001f30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b08b      	sub	sp, #44	; 0x2c
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	2414      	movs	r4, #20
 8001f3a:	193b      	adds	r3, r7, r4
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	2314      	movs	r3, #20
 8001f40:	001a      	movs	r2, r3
 8001f42:	2100      	movs	r1, #0
 8001f44:	f003 f817 	bl	8004f76 <memset>
  if(hspi->Instance==SPI2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a2c      	ldr	r2, [pc, #176]	; (8002000 <HAL_SPI_MspInit+0xd0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d151      	bne.n	8001ff6 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <HAL_SPI_MspInit+0xd4>)
 8001f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f56:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_SPI_MspInit+0xd4>)
 8001f58:	2180      	movs	r1, #128	; 0x80
 8001f5a:	01c9      	lsls	r1, r1, #7
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f60:	4b28      	ldr	r3, [pc, #160]	; (8002004 <HAL_SPI_MspInit+0xd4>)
 8001f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	01db      	lsls	r3, r3, #7
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6e:	4b25      	ldr	r3, [pc, #148]	; (8002004 <HAL_SPI_MspInit+0xd4>)
 8001f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_SPI_MspInit+0xd4>)
 8001f74:	2104      	movs	r1, #4
 8001f76:	430a      	orrs	r2, r1
 8001f78:	635a      	str	r2, [r3, #52]	; 0x34
 8001f7a:	4b22      	ldr	r3, [pc, #136]	; (8002004 <HAL_SPI_MspInit+0xd4>)
 8001f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7e:	2204      	movs	r2, #4
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <HAL_SPI_MspInit+0xd4>)
 8001f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f8a:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <HAL_SPI_MspInit+0xd4>)
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	635a      	str	r2, [r3, #52]	; 0x34
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <HAL_SPI_MspInit+0xd4>)
 8001f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f96:	2202      	movs	r2, #2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f9e:	193b      	adds	r3, r7, r4
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	193b      	adds	r3, r7, r4
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	193b      	adds	r3, r7, r4
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	193b      	adds	r3, r7, r4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8001fb6:	193b      	adds	r3, r7, r4
 8001fb8:	2201      	movs	r2, #1
 8001fba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fbc:	193b      	adds	r3, r7, r4
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <HAL_SPI_MspInit+0xd8>)
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	0010      	movs	r0, r2
 8001fc4:	f000 fb22 	bl	800260c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fc8:	0021      	movs	r1, r4
 8001fca:	187b      	adds	r3, r7, r1
 8001fcc:	2280      	movs	r2, #128	; 0x80
 8001fce:	00d2      	lsls	r2, r2, #3
 8001fd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	187b      	adds	r3, r7, r1
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	187b      	adds	r3, r7, r1
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	187b      	adds	r3, r7, r1
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	2205      	movs	r2, #5
 8001fe8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	187b      	adds	r3, r7, r1
 8001fec:	4a07      	ldr	r2, [pc, #28]	; (800200c <HAL_SPI_MspInit+0xdc>)
 8001fee:	0019      	movs	r1, r3
 8001ff0:	0010      	movs	r0, r2
 8001ff2:	f000 fb0b 	bl	800260c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b00b      	add	sp, #44	; 0x2c
 8001ffc:	bd90      	pop	{r4, r7, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	40003800 	.word	0x40003800
 8002004:	40021000 	.word	0x40021000
 8002008:	50000800 	.word	0x50000800
 800200c:	50000400 	.word	0x50000400

08002010 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <HAL_TIM_Base_MspInit+0x48>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d115      	bne.n	800204e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <HAL_TIM_Base_MspInit+0x4c>)
 8002024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <HAL_TIM_Base_MspInit+0x4c>)
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	02c9      	lsls	r1, r1, #11
 800202c:	430a      	orrs	r2, r1
 800202e:	641a      	str	r2, [r3, #64]	; 0x40
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_TIM_Base_MspInit+0x4c>)
 8002032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	02db      	lsls	r3, r3, #11
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	2016      	movs	r0, #22
 8002044:	f000 fab0 	bl	80025a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002048:	2016      	movs	r0, #22
 800204a:	f000 fac2 	bl	80025d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	b004      	add	sp, #16
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	40014800 	.word	0x40014800
 800205c:	40021000 	.word	0x40021000

08002060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b097      	sub	sp, #92	; 0x5c
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	2344      	movs	r3, #68	; 0x44
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	0018      	movs	r0, r3
 800206e:	2314      	movs	r3, #20
 8002070:	001a      	movs	r2, r3
 8002072:	2100      	movs	r1, #0
 8002074:	f002 ff7f 	bl	8004f76 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002078:	2410      	movs	r4, #16
 800207a:	193b      	adds	r3, r7, r4
 800207c:	0018      	movs	r0, r3
 800207e:	2334      	movs	r3, #52	; 0x34
 8002080:	001a      	movs	r2, r3
 8002082:	2100      	movs	r1, #0
 8002084:	f002 ff77 	bl	8004f76 <memset>
  if(huart->Instance==USART2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a22      	ldr	r2, [pc, #136]	; (8002118 <HAL_UART_MspInit+0xb8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d13e      	bne.n	8002110 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002092:	193b      	adds	r3, r7, r4
 8002094:	2202      	movs	r2, #2
 8002096:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002098:	193b      	adds	r3, r7, r4
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800209e:	193b      	adds	r3, r7, r4
 80020a0:	0018      	movs	r0, r3
 80020a2:	f001 f961 	bl	8003368 <HAL_RCCEx_PeriphCLKConfig>
 80020a6:	1e03      	subs	r3, r0, #0
 80020a8:	d001      	beq.n	80020ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020aa:	f7ff f893 	bl	80011d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_UART_MspInit+0xbc>)
 80020b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <HAL_UART_MspInit+0xbc>)
 80020b4:	2180      	movs	r1, #128	; 0x80
 80020b6:	0289      	lsls	r1, r1, #10
 80020b8:	430a      	orrs	r2, r1
 80020ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80020bc:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_UART_MspInit+0xbc>)
 80020be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	029b      	lsls	r3, r3, #10
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <HAL_UART_MspInit+0xbc>)
 80020cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ce:	4b13      	ldr	r3, [pc, #76]	; (800211c <HAL_UART_MspInit+0xbc>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	430a      	orrs	r2, r1
 80020d4:	635a      	str	r2, [r3, #52]	; 0x34
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_UART_MspInit+0xbc>)
 80020d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020da:	2201      	movs	r2, #1
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80020e2:	2144      	movs	r1, #68	; 0x44
 80020e4:	187b      	adds	r3, r7, r1
 80020e6:	220c      	movs	r2, #12
 80020e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	187b      	adds	r3, r7, r1
 80020ec:	2202      	movs	r2, #2
 80020ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	2201      	movs	r2, #1
 80020f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	187b      	adds	r3, r7, r1
 80020f8:	2200      	movs	r2, #0
 80020fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80020fc:	187b      	adds	r3, r7, r1
 80020fe:	2201      	movs	r2, #1
 8002100:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	187a      	adds	r2, r7, r1
 8002104:	23a0      	movs	r3, #160	; 0xa0
 8002106:	05db      	lsls	r3, r3, #23
 8002108:	0011      	movs	r1, r2
 800210a:	0018      	movs	r0, r3
 800210c:	f000 fa7e 	bl	800260c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b017      	add	sp, #92	; 0x5c
 8002116:	bd90      	pop	{r4, r7, pc}
 8002118:	40004400 	.word	0x40004400
 800211c:	40021000 	.word	0x40021000

08002120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002124:	e7fe      	b.n	8002124 <NMI_Handler+0x4>

08002126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212a:	e7fe      	b.n	800212a <HardFault_Handler+0x4>

0800212c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002144:	f000 f968 	bl	8002418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <TIM17_IRQHandler+0x14>)
 8002156:	0018      	movs	r0, r3
 8002158:	f001 fef8 	bl	8003f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800215c:	46c0      	nop			; (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	200000f4 	.word	0x200000f4

08002168 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	return 1;
 800216c:	2301      	movs	r3, #1
}
 800216e:	0018      	movs	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_kill>:

int _kill(int pid, int sig)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800217e:	f002 fec7 	bl	8004f10 <__errno>
 8002182:	0003      	movs	r3, r0
 8002184:	2216      	movs	r2, #22
 8002186:	601a      	str	r2, [r3, #0]
	return -1;
 8002188:	2301      	movs	r3, #1
 800218a:	425b      	negs	r3, r3
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	b002      	add	sp, #8
 8002192:	bd80      	pop	{r7, pc}

08002194 <_exit>:

void _exit (int status)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800219c:	2301      	movs	r3, #1
 800219e:	425a      	negs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	0011      	movs	r1, r2
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7ff ffe5 	bl	8002174 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021aa:	e7fe      	b.n	80021aa <_exit+0x16>

080021ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	e00a      	b.n	80021d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021be:	e000      	b.n	80021c2 <_read+0x16>
 80021c0:	bf00      	nop
 80021c2:	0001      	movs	r1, r0
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	60ba      	str	r2, [r7, #8]
 80021ca:	b2ca      	uxtb	r2, r1
 80021cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3301      	adds	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	dbf0      	blt.n	80021be <_read+0x12>
	}

return len;
 80021dc:	687b      	ldr	r3, [r7, #4]
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b006      	add	sp, #24
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	e009      	b.n	800220c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	60ba      	str	r2, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	0018      	movs	r0, r3
 8002202:	e000      	b.n	8002206 <_write+0x20>
 8002204:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3301      	adds	r3, #1
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	429a      	cmp	r2, r3
 8002212:	dbf1      	blt.n	80021f8 <_write+0x12>
	}
	return len;
 8002214:	687b      	ldr	r3, [r7, #4]
}
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b006      	add	sp, #24
 800221c:	bd80      	pop	{r7, pc}

0800221e <_close>:

int _close(int file)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
	return -1;
 8002226:	2301      	movs	r3, #1
 8002228:	425b      	negs	r3, r3
}
 800222a:	0018      	movs	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	b002      	add	sp, #8
 8002230:	bd80      	pop	{r7, pc}

08002232 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2280      	movs	r2, #128	; 0x80
 8002240:	0192      	lsls	r2, r2, #6
 8002242:	605a      	str	r2, [r3, #4]
	return 0;
 8002244:	2300      	movs	r3, #0
}
 8002246:	0018      	movs	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	b002      	add	sp, #8
 800224c:	bd80      	pop	{r7, pc}

0800224e <_isatty>:

int _isatty(int file)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
	return 1;
 8002256:	2301      	movs	r3, #1
}
 8002258:	0018      	movs	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	b002      	add	sp, #8
 800225e:	bd80      	pop	{r7, pc}

08002260 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
	return 0;
 800226c:	2300      	movs	r3, #0
}
 800226e:	0018      	movs	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	b004      	add	sp, #16
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <_sbrk+0x5c>)
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <_sbrk+0x60>)
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <_sbrk+0x64>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <_sbrk+0x64>)
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <_sbrk+0x68>)
 8002298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	18d3      	adds	r3, r2, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d207      	bcs.n	80022b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a8:	f002 fe32 	bl	8004f10 <__errno>
 80022ac:	0003      	movs	r3, r0
 80022ae:	220c      	movs	r2, #12
 80022b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	425b      	negs	r3, r3
 80022b6:	e009      	b.n	80022cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <_sbrk+0x64>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	18d2      	adds	r2, r2, r3
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <_sbrk+0x64>)
 80022c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b006      	add	sp, #24
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20009000 	.word	0x20009000
 80022d8:	00000400 	.word	0x00000400
 80022dc:	20000258 	.word	0x20000258
 80022e0:	20000270 	.word	0x20000270

080022e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <Reset_Handler>:
 80022f0:	480d      	ldr	r0, [pc, #52]	; (8002328 <LoopForever+0x2>)
 80022f2:	4685      	mov	sp, r0
 80022f4:	f7ff fff6 	bl	80022e4 <SystemInit>
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <LoopForever+0x6>)
 80022fa:	490d      	ldr	r1, [pc, #52]	; (8002330 <LoopForever+0xa>)
 80022fc:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <LoopForever+0xe>)
 80022fe:	2300      	movs	r3, #0
 8002300:	e002      	b.n	8002308 <LoopCopyDataInit>

08002302 <CopyDataInit>:
 8002302:	58d4      	ldr	r4, [r2, r3]
 8002304:	50c4      	str	r4, [r0, r3]
 8002306:	3304      	adds	r3, #4

08002308 <LoopCopyDataInit>:
 8002308:	18c4      	adds	r4, r0, r3
 800230a:	428c      	cmp	r4, r1
 800230c:	d3f9      	bcc.n	8002302 <CopyDataInit>
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <LoopForever+0x12>)
 8002310:	4c0a      	ldr	r4, [pc, #40]	; (800233c <LoopForever+0x16>)
 8002312:	2300      	movs	r3, #0
 8002314:	e001      	b.n	800231a <LoopFillZerobss>

08002316 <FillZerobss>:
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	3204      	adds	r2, #4

0800231a <LoopFillZerobss>:
 800231a:	42a2      	cmp	r2, r4
 800231c:	d3fb      	bcc.n	8002316 <FillZerobss>
 800231e:	f002 fdfd 	bl	8004f1c <__libc_init_array>
 8002322:	f7fe fd8f 	bl	8000e44 <main>

08002326 <LoopForever>:
 8002326:	e7fe      	b.n	8002326 <LoopForever>
 8002328:	20009000 	.word	0x20009000
 800232c:	20000000 	.word	0x20000000
 8002330:	20000074 	.word	0x20000074
 8002334:	080062f8 	.word	0x080062f8
 8002338:	20000074 	.word	0x20000074
 800233c:	20000270 	.word	0x20000270

08002340 <ADC1_COMP_IRQHandler>:
 8002340:	e7fe      	b.n	8002340 <ADC1_COMP_IRQHandler>
	...

08002344 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800234a:	1dfb      	adds	r3, r7, #7
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_Init+0x3c>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_Init+0x3c>)
 8002356:	2180      	movs	r1, #128	; 0x80
 8002358:	0049      	lsls	r1, r1, #1
 800235a:	430a      	orrs	r2, r1
 800235c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800235e:	2000      	movs	r0, #0
 8002360:	f000 f810 	bl	8002384 <HAL_InitTick>
 8002364:	1e03      	subs	r3, r0, #0
 8002366:	d003      	beq.n	8002370 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002368:	1dfb      	adds	r3, r7, #7
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	e001      	b.n	8002374 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002370:	f7ff fdba 	bl	8001ee8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002374:	1dfb      	adds	r3, r7, #7
 8002376:	781b      	ldrb	r3, [r3, #0]
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40022000 	.word	0x40022000

08002384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800238c:	230f      	movs	r3, #15
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_InitTick+0x88>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d02b      	beq.n	80023f4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800239c:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <HAL_InitTick+0x8c>)
 800239e:	681c      	ldr	r4, [r3, #0]
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <HAL_InitTick+0x88>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	0019      	movs	r1, r3
 80023a6:	23fa      	movs	r3, #250	; 0xfa
 80023a8:	0098      	lsls	r0, r3, #2
 80023aa:	f7fd feb5 	bl	8000118 <__udivsi3>
 80023ae:	0003      	movs	r3, r0
 80023b0:	0019      	movs	r1, r3
 80023b2:	0020      	movs	r0, r4
 80023b4:	f7fd feb0 	bl	8000118 <__udivsi3>
 80023b8:	0003      	movs	r3, r0
 80023ba:	0018      	movs	r0, r3
 80023bc:	f000 f919 	bl	80025f2 <HAL_SYSTICK_Config>
 80023c0:	1e03      	subs	r3, r0, #0
 80023c2:	d112      	bne.n	80023ea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d80a      	bhi.n	80023e0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	2301      	movs	r3, #1
 80023ce:	425b      	negs	r3, r3
 80023d0:	2200      	movs	r2, #0
 80023d2:	0018      	movs	r0, r3
 80023d4:	f000 f8e8 	bl	80025a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <HAL_InitTick+0x90>)
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	e00d      	b.n	80023fc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80023e0:	230f      	movs	r3, #15
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
 80023e8:	e008      	b.n	80023fc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023ea:	230f      	movs	r3, #15
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	e003      	b.n	80023fc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023f4:	230f      	movs	r3, #15
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80023fc:	230f      	movs	r3, #15
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	781b      	ldrb	r3, [r3, #0]
}
 8002402:	0018      	movs	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	b005      	add	sp, #20
 8002408:	bd90      	pop	{r4, r7, pc}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	2000000c 	.word	0x2000000c
 8002410:	20000004 	.word	0x20000004
 8002414:	20000008 	.word	0x20000008

08002418 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_IncTick+0x1c>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	001a      	movs	r2, r3
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_IncTick+0x20>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	18d2      	adds	r2, r2, r3
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_IncTick+0x20>)
 800242a:	601a      	str	r2, [r3, #0]
}
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	2000000c 	.word	0x2000000c
 8002438:	2000025c 	.word	0x2000025c

0800243c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  return uwTick;
 8002440:	4b02      	ldr	r3, [pc, #8]	; (800244c <HAL_GetTick+0x10>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	2000025c 	.word	0x2000025c

08002450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	0002      	movs	r2, r0
 8002458:	1dfb      	adds	r3, r7, #7
 800245a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800245c:	1dfb      	adds	r3, r7, #7
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b7f      	cmp	r3, #127	; 0x7f
 8002462:	d809      	bhi.n	8002478 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002464:	1dfb      	adds	r3, r7, #7
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	001a      	movs	r2, r3
 800246a:	231f      	movs	r3, #31
 800246c:	401a      	ands	r2, r3
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <__NVIC_EnableIRQ+0x30>)
 8002470:	2101      	movs	r1, #1
 8002472:	4091      	lsls	r1, r2
 8002474:	000a      	movs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b002      	add	sp, #8
 800247e:	bd80      	pop	{r7, pc}
 8002480:	e000e100 	.word	0xe000e100

08002484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	0002      	movs	r2, r0
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	1dfb      	adds	r3, r7, #7
 8002490:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002492:	1dfb      	adds	r3, r7, #7
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b7f      	cmp	r3, #127	; 0x7f
 8002498:	d828      	bhi.n	80024ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800249a:	4a2f      	ldr	r2, [pc, #188]	; (8002558 <__NVIC_SetPriority+0xd4>)
 800249c:	1dfb      	adds	r3, r7, #7
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	b25b      	sxtb	r3, r3
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	33c0      	adds	r3, #192	; 0xc0
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	589b      	ldr	r3, [r3, r2]
 80024aa:	1dfa      	adds	r2, r7, #7
 80024ac:	7812      	ldrb	r2, [r2, #0]
 80024ae:	0011      	movs	r1, r2
 80024b0:	2203      	movs	r2, #3
 80024b2:	400a      	ands	r2, r1
 80024b4:	00d2      	lsls	r2, r2, #3
 80024b6:	21ff      	movs	r1, #255	; 0xff
 80024b8:	4091      	lsls	r1, r2
 80024ba:	000a      	movs	r2, r1
 80024bc:	43d2      	mvns	r2, r2
 80024be:	401a      	ands	r2, r3
 80024c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	019b      	lsls	r3, r3, #6
 80024c6:	22ff      	movs	r2, #255	; 0xff
 80024c8:	401a      	ands	r2, r3
 80024ca:	1dfb      	adds	r3, r7, #7
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	0018      	movs	r0, r3
 80024d0:	2303      	movs	r3, #3
 80024d2:	4003      	ands	r3, r0
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024d8:	481f      	ldr	r0, [pc, #124]	; (8002558 <__NVIC_SetPriority+0xd4>)
 80024da:	1dfb      	adds	r3, r7, #7
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b25b      	sxtb	r3, r3
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	430a      	orrs	r2, r1
 80024e4:	33c0      	adds	r3, #192	; 0xc0
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024ea:	e031      	b.n	8002550 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024ec:	4a1b      	ldr	r2, [pc, #108]	; (800255c <__NVIC_SetPriority+0xd8>)
 80024ee:	1dfb      	adds	r3, r7, #7
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	0019      	movs	r1, r3
 80024f4:	230f      	movs	r3, #15
 80024f6:	400b      	ands	r3, r1
 80024f8:	3b08      	subs	r3, #8
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3306      	adds	r3, #6
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	18d3      	adds	r3, r2, r3
 8002502:	3304      	adds	r3, #4
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	1dfa      	adds	r2, r7, #7
 8002508:	7812      	ldrb	r2, [r2, #0]
 800250a:	0011      	movs	r1, r2
 800250c:	2203      	movs	r2, #3
 800250e:	400a      	ands	r2, r1
 8002510:	00d2      	lsls	r2, r2, #3
 8002512:	21ff      	movs	r1, #255	; 0xff
 8002514:	4091      	lsls	r1, r2
 8002516:	000a      	movs	r2, r1
 8002518:	43d2      	mvns	r2, r2
 800251a:	401a      	ands	r2, r3
 800251c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	019b      	lsls	r3, r3, #6
 8002522:	22ff      	movs	r2, #255	; 0xff
 8002524:	401a      	ands	r2, r3
 8002526:	1dfb      	adds	r3, r7, #7
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	0018      	movs	r0, r3
 800252c:	2303      	movs	r3, #3
 800252e:	4003      	ands	r3, r0
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002534:	4809      	ldr	r0, [pc, #36]	; (800255c <__NVIC_SetPriority+0xd8>)
 8002536:	1dfb      	adds	r3, r7, #7
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	001c      	movs	r4, r3
 800253c:	230f      	movs	r3, #15
 800253e:	4023      	ands	r3, r4
 8002540:	3b08      	subs	r3, #8
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	430a      	orrs	r2, r1
 8002546:	3306      	adds	r3, #6
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	18c3      	adds	r3, r0, r3
 800254c:	3304      	adds	r3, #4
 800254e:	601a      	str	r2, [r3, #0]
}
 8002550:	46c0      	nop			; (mov r8, r8)
 8002552:	46bd      	mov	sp, r7
 8002554:	b003      	add	sp, #12
 8002556:	bd90      	pop	{r4, r7, pc}
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	1e5a      	subs	r2, r3, #1
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	045b      	lsls	r3, r3, #17
 8002570:	429a      	cmp	r2, r3
 8002572:	d301      	bcc.n	8002578 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002574:	2301      	movs	r3, #1
 8002576:	e010      	b.n	800259a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <SysTick_Config+0x44>)
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	3a01      	subs	r2, #1
 800257e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002580:	2301      	movs	r3, #1
 8002582:	425b      	negs	r3, r3
 8002584:	2103      	movs	r1, #3
 8002586:	0018      	movs	r0, r3
 8002588:	f7ff ff7c 	bl	8002484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <SysTick_Config+0x44>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <SysTick_Config+0x44>)
 8002594:	2207      	movs	r2, #7
 8002596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002598:	2300      	movs	r3, #0
}
 800259a:	0018      	movs	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	b002      	add	sp, #8
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	e000e010 	.word	0xe000e010

080025a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	210f      	movs	r1, #15
 80025b4:	187b      	adds	r3, r7, r1
 80025b6:	1c02      	adds	r2, r0, #0
 80025b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	187b      	adds	r3, r7, r1
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	b25b      	sxtb	r3, r3
 80025c2:	0011      	movs	r1, r2
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7ff ff5d 	bl	8002484 <__NVIC_SetPriority>
}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b004      	add	sp, #16
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	0002      	movs	r2, r0
 80025da:	1dfb      	adds	r3, r7, #7
 80025dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025de:	1dfb      	adds	r3, r7, #7
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7ff ff33 	bl	8002450 <__NVIC_EnableIRQ>
}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b002      	add	sp, #8
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f7ff ffaf 	bl	8002560 <SysTick_Config>
 8002602:	0003      	movs	r3, r0
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800261a:	e147      	b.n	80028ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2101      	movs	r1, #1
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4091      	lsls	r1, r2
 8002626:	000a      	movs	r2, r1
 8002628:	4013      	ands	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d100      	bne.n	8002634 <HAL_GPIO_Init+0x28>
 8002632:	e138      	b.n	80028a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2203      	movs	r2, #3
 800263a:	4013      	ands	r3, r2
 800263c:	2b01      	cmp	r3, #1
 800263e:	d005      	beq.n	800264c <HAL_GPIO_Init+0x40>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2203      	movs	r2, #3
 8002646:	4013      	ands	r3, r2
 8002648:	2b02      	cmp	r3, #2
 800264a:	d130      	bne.n	80026ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	409a      	lsls	r2, r3
 800265a:	0013      	movs	r3, r2
 800265c:	43da      	mvns	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	409a      	lsls	r2, r3
 800266e:	0013      	movs	r3, r2
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002682:	2201      	movs	r2, #1
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	409a      	lsls	r2, r3
 8002688:	0013      	movs	r3, r2
 800268a:	43da      	mvns	r2, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	2201      	movs	r2, #1
 800269a:	401a      	ands	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	409a      	lsls	r2, r3
 80026a0:	0013      	movs	r3, r2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2203      	movs	r2, #3
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d017      	beq.n	80026ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	409a      	lsls	r2, r3
 80026c8:	0013      	movs	r3, r2
 80026ca:	43da      	mvns	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	409a      	lsls	r2, r3
 80026dc:	0013      	movs	r3, r2
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2203      	movs	r2, #3
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d123      	bne.n	800273e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	08da      	lsrs	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3208      	adds	r2, #8
 80026fe:	0092      	lsls	r2, r2, #2
 8002700:	58d3      	ldr	r3, [r2, r3]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2207      	movs	r2, #7
 8002708:	4013      	ands	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	409a      	lsls	r2, r3
 8002710:	0013      	movs	r3, r2
 8002712:	43da      	mvns	r2, r3
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2107      	movs	r1, #7
 8002722:	400b      	ands	r3, r1
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	409a      	lsls	r2, r3
 8002728:	0013      	movs	r3, r2
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	08da      	lsrs	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3208      	adds	r2, #8
 8002738:	0092      	lsls	r2, r2, #2
 800273a:	6939      	ldr	r1, [r7, #16]
 800273c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	2203      	movs	r2, #3
 800274a:	409a      	lsls	r2, r3
 800274c:	0013      	movs	r3, r2
 800274e:	43da      	mvns	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2203      	movs	r2, #3
 800275c:	401a      	ands	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	409a      	lsls	r2, r3
 8002764:	0013      	movs	r3, r2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	23c0      	movs	r3, #192	; 0xc0
 8002778:	029b      	lsls	r3, r3, #10
 800277a:	4013      	ands	r3, r2
 800277c:	d100      	bne.n	8002780 <HAL_GPIO_Init+0x174>
 800277e:	e092      	b.n	80028a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002780:	4a50      	ldr	r2, [pc, #320]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	3318      	adds	r3, #24
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	589b      	ldr	r3, [r3, r2]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2203      	movs	r2, #3
 8002792:	4013      	ands	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	220f      	movs	r2, #15
 8002798:	409a      	lsls	r2, r3
 800279a:	0013      	movs	r3, r2
 800279c:	43da      	mvns	r2, r3
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	23a0      	movs	r3, #160	; 0xa0
 80027a8:	05db      	lsls	r3, r3, #23
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d013      	beq.n	80027d6 <HAL_GPIO_Init+0x1ca>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a45      	ldr	r2, [pc, #276]	; (80028c8 <HAL_GPIO_Init+0x2bc>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00d      	beq.n	80027d2 <HAL_GPIO_Init+0x1c6>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a44      	ldr	r2, [pc, #272]	; (80028cc <HAL_GPIO_Init+0x2c0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <HAL_GPIO_Init+0x1c2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a43      	ldr	r2, [pc, #268]	; (80028d0 <HAL_GPIO_Init+0x2c4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_GPIO_Init+0x1be>
 80027c6:	2303      	movs	r3, #3
 80027c8:	e006      	b.n	80027d8 <HAL_GPIO_Init+0x1cc>
 80027ca:	2305      	movs	r3, #5
 80027cc:	e004      	b.n	80027d8 <HAL_GPIO_Init+0x1cc>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e002      	b.n	80027d8 <HAL_GPIO_Init+0x1cc>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_GPIO_Init+0x1cc>
 80027d6:	2300      	movs	r3, #0
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	2103      	movs	r1, #3
 80027dc:	400a      	ands	r2, r1
 80027de:	00d2      	lsls	r2, r2, #3
 80027e0:	4093      	lsls	r3, r2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80027e8:	4936      	ldr	r1, [pc, #216]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	089b      	lsrs	r3, r3, #2
 80027ee:	3318      	adds	r3, #24
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027f6:	4b33      	ldr	r3, [pc, #204]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	43da      	mvns	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	035b      	lsls	r3, r3, #13
 800280e:	4013      	ands	r3, r2
 8002810:	d003      	beq.n	800281a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800281a:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002820:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	43da      	mvns	r2, r3
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	039b      	lsls	r3, r3, #14
 8002838:	4013      	ands	r3, r2
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800284a:	4a1e      	ldr	r2, [pc, #120]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 800284c:	2384      	movs	r3, #132	; 0x84
 800284e:	58d3      	ldr	r3, [r2, r3]
 8002850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	43da      	mvns	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	029b      	lsls	r3, r3, #10
 8002864:	4013      	ands	r3, r2
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002870:	4914      	ldr	r1, [pc, #80]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 8002872:	2284      	movs	r2, #132	; 0x84
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002878:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	58d3      	ldr	r3, [r2, r3]
 800287e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	43da      	mvns	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	025b      	lsls	r3, r3, #9
 8002892:	4013      	ands	r3, r2
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800289e:	4909      	ldr	r1, [pc, #36]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 80028a0:	2280      	movs	r2, #128	; 0x80
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	3301      	adds	r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	40da      	lsrs	r2, r3
 80028b4:	1e13      	subs	r3, r2, #0
 80028b6:	d000      	beq.n	80028ba <HAL_GPIO_Init+0x2ae>
 80028b8:	e6b0      	b.n	800261c <HAL_GPIO_Init+0x10>
  }
}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	46c0      	nop			; (mov r8, r8)
 80028be:	46bd      	mov	sp, r7
 80028c0:	b006      	add	sp, #24
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021800 	.word	0x40021800
 80028c8:	50000400 	.word	0x50000400
 80028cc:	50000800 	.word	0x50000800
 80028d0:	50000c00 	.word	0x50000c00

080028d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	000a      	movs	r2, r1
 80028de:	1cbb      	adds	r3, r7, #2
 80028e0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	1cba      	adds	r2, r7, #2
 80028e8:	8812      	ldrh	r2, [r2, #0]
 80028ea:	4013      	ands	r3, r2
 80028ec:	d004      	beq.n	80028f8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80028ee:	230f      	movs	r3, #15
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e003      	b.n	8002900 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028f8:	230f      	movs	r3, #15
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002900:	230f      	movs	r3, #15
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	781b      	ldrb	r3, [r3, #0]
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b004      	add	sp, #16
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	0008      	movs	r0, r1
 8002918:	0011      	movs	r1, r2
 800291a:	1cbb      	adds	r3, r7, #2
 800291c:	1c02      	adds	r2, r0, #0
 800291e:	801a      	strh	r2, [r3, #0]
 8002920:	1c7b      	adds	r3, r7, #1
 8002922:	1c0a      	adds	r2, r1, #0
 8002924:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002926:	1c7b      	adds	r3, r7, #1
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d004      	beq.n	8002938 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800292e:	1cbb      	adds	r3, r7, #2
 8002930:	881a      	ldrh	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002936:	e003      	b.n	8002940 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002938:	1cbb      	adds	r3, r7, #2
 800293a:	881a      	ldrh	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	b002      	add	sp, #8
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002956:	4013      	ands	r3, r2
 8002958:	0019      	movs	r1, r3
 800295a:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	430a      	orrs	r2, r1
 8002960:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	429a      	cmp	r2, r3
 800296a:	d11f      	bne.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800296c:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	0013      	movs	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	189b      	adds	r3, r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4912      	ldr	r1, [pc, #72]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800297a:	0018      	movs	r0, r3
 800297c:	f7fd fbcc 	bl	8000118 <__udivsi3>
 8002980:	0003      	movs	r3, r0
 8002982:	3301      	adds	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002986:	e008      	b.n	800299a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3b01      	subs	r3, #1
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e001      	b.n	800299a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e009      	b.n	80029ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	401a      	ands	r2, r3
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d0ed      	beq.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	0018      	movs	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b004      	add	sp, #16
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	40007000 	.word	0x40007000
 80029bc:	fffff9ff 	.word	0xfffff9ff
 80029c0:	20000004 	.word	0x20000004
 80029c4:	000f4240 	.word	0x000f4240

080029c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <LL_RCC_GetAPB1Prescaler+0x14>)
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	23e0      	movs	r3, #224	; 0xe0
 80029d2:	01db      	lsls	r3, r3, #7
 80029d4:	4013      	ands	r3, r2
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000

080029e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e2fe      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2201      	movs	r2, #1
 80029f8:	4013      	ands	r3, r2
 80029fa:	d100      	bne.n	80029fe <HAL_RCC_OscConfig+0x1e>
 80029fc:	e07c      	b.n	8002af8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fe:	4bc3      	ldr	r3, [pc, #780]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2238      	movs	r2, #56	; 0x38
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a08:	4bc0      	ldr	r3, [pc, #768]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	4013      	ands	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d102      	bne.n	8002a1e <HAL_RCC_OscConfig+0x3e>
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d002      	beq.n	8002a24 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d10b      	bne.n	8002a3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	4bb9      	ldr	r3, [pc, #740]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	029b      	lsls	r3, r3, #10
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d062      	beq.n	8002af6 <HAL_RCC_OscConfig+0x116>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d15e      	bne.n	8002af6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e2d9      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	025b      	lsls	r3, r3, #9
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_OscConfig+0x78>
 8002a48:	4bb0      	ldr	r3, [pc, #704]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4baf      	ldr	r3, [pc, #700]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	0249      	lsls	r1, r1, #9
 8002a52:	430a      	orrs	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e020      	b.n	8002a9a <HAL_RCC_OscConfig+0xba>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	23a0      	movs	r3, #160	; 0xa0
 8002a5e:	02db      	lsls	r3, r3, #11
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d10e      	bne.n	8002a82 <HAL_RCC_OscConfig+0xa2>
 8002a64:	4ba9      	ldr	r3, [pc, #676]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4ba8      	ldr	r3, [pc, #672]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002a6a:	2180      	movs	r1, #128	; 0x80
 8002a6c:	02c9      	lsls	r1, r1, #11
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	4ba6      	ldr	r3, [pc, #664]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4ba5      	ldr	r3, [pc, #660]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002a78:	2180      	movs	r1, #128	; 0x80
 8002a7a:	0249      	lsls	r1, r1, #9
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e00b      	b.n	8002a9a <HAL_RCC_OscConfig+0xba>
 8002a82:	4ba2      	ldr	r3, [pc, #648]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4ba1      	ldr	r3, [pc, #644]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002a88:	49a1      	ldr	r1, [pc, #644]	; (8002d10 <HAL_RCC_OscConfig+0x330>)
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	4b9f      	ldr	r3, [pc, #636]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4b9e      	ldr	r3, [pc, #632]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002a94:	499f      	ldr	r1, [pc, #636]	; (8002d14 <HAL_RCC_OscConfig+0x334>)
 8002a96:	400a      	ands	r2, r1
 8002a98:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d014      	beq.n	8002acc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7ff fccb 	bl	800243c <HAL_GetTick>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aac:	f7ff fcc6 	bl	800243c <HAL_GetTick>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	; 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e298      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002abe:	4b93      	ldr	r3, [pc, #588]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	029b      	lsls	r3, r3, #10
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0xcc>
 8002aca:	e015      	b.n	8002af8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7ff fcb6 	bl	800243c <HAL_GetTick>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad6:	f7ff fcb1 	bl	800243c <HAL_GetTick>
 8002ada:	0002      	movs	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	; 0x64
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e283      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ae8:	4b88      	ldr	r3, [pc, #544]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	029b      	lsls	r3, r3, #10
 8002af0:	4013      	ands	r3, r2
 8002af2:	d1f0      	bne.n	8002ad6 <HAL_RCC_OscConfig+0xf6>
 8002af4:	e000      	b.n	8002af8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2202      	movs	r2, #2
 8002afe:	4013      	ands	r3, r2
 8002b00:	d100      	bne.n	8002b04 <HAL_RCC_OscConfig+0x124>
 8002b02:	e099      	b.n	8002c38 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b04:	4b81      	ldr	r3, [pc, #516]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2238      	movs	r2, #56	; 0x38
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b0e:	4b7f      	ldr	r3, [pc, #508]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2203      	movs	r2, #3
 8002b14:	4013      	ands	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b10      	cmp	r3, #16
 8002b1c:	d102      	bne.n	8002b24 <HAL_RCC_OscConfig+0x144>
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d002      	beq.n	8002b2a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d135      	bne.n	8002b96 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b2a:	4b78      	ldr	r3, [pc, #480]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4013      	ands	r3, r2
 8002b34:	d005      	beq.n	8002b42 <HAL_RCC_OscConfig+0x162>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e256      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b42:	4b72      	ldr	r3, [pc, #456]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4a74      	ldr	r2, [pc, #464]	; (8002d18 <HAL_RCC_OscConfig+0x338>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	021a      	lsls	r2, r3, #8
 8002b52:	4b6e      	ldr	r3, [pc, #440]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002b54:	430a      	orrs	r2, r1
 8002b56:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d112      	bne.n	8002b84 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b5e:	4b6b      	ldr	r3, [pc, #428]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a6e      	ldr	r2, [pc, #440]	; (8002d1c <HAL_RCC_OscConfig+0x33c>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	0019      	movs	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	4b67      	ldr	r3, [pc, #412]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b72:	4b66      	ldr	r3, [pc, #408]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	0adb      	lsrs	r3, r3, #11
 8002b78:	2207      	movs	r2, #7
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	4a68      	ldr	r2, [pc, #416]	; (8002d20 <HAL_RCC_OscConfig+0x340>)
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <HAL_RCC_OscConfig+0x344>)
 8002b82:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b84:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <HAL_RCC_OscConfig+0x348>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7ff fbfb 	bl	8002384 <HAL_InitTick>
 8002b8e:	1e03      	subs	r3, r0, #0
 8002b90:	d051      	beq.n	8002c36 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e22c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d030      	beq.n	8002c00 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b9e:	4b5b      	ldr	r3, [pc, #364]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a5e      	ldr	r2, [pc, #376]	; (8002d1c <HAL_RCC_OscConfig+0x33c>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	4b57      	ldr	r3, [pc, #348]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002bb2:	4b56      	ldr	r3, [pc, #344]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4b55      	ldr	r3, [pc, #340]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002bb8:	2180      	movs	r1, #128	; 0x80
 8002bba:	0049      	lsls	r1, r1, #1
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7ff fc3c 	bl	800243c <HAL_GetTick>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bca:	f7ff fc37 	bl	800243c <HAL_GetTick>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e209      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bdc:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4013      	ands	r3, r2
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be8:	4b48      	ldr	r3, [pc, #288]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a4a      	ldr	r2, [pc, #296]	; (8002d18 <HAL_RCC_OscConfig+0x338>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	021a      	lsls	r2, r3, #8
 8002bf8:	4b44      	ldr	r3, [pc, #272]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	e01b      	b.n	8002c38 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002c00:	4b42      	ldr	r3, [pc, #264]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b41      	ldr	r3, [pc, #260]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002c06:	4949      	ldr	r1, [pc, #292]	; (8002d2c <HAL_RCC_OscConfig+0x34c>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7ff fc16 	bl	800243c <HAL_GetTick>
 8002c10:	0003      	movs	r3, r0
 8002c12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c16:	f7ff fc11 	bl	800243c <HAL_GetTick>
 8002c1a:	0002      	movs	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e1e3      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c28:	4b38      	ldr	r3, [pc, #224]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4013      	ands	r3, r2
 8002c32:	d1f0      	bne.n	8002c16 <HAL_RCC_OscConfig+0x236>
 8002c34:	e000      	b.n	8002c38 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c36:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d047      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c42:	4b32      	ldr	r3, [pc, #200]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2238      	movs	r2, #56	; 0x38
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b18      	cmp	r3, #24
 8002c4c:	d10a      	bne.n	8002c64 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c4e:	4b2f      	ldr	r3, [pc, #188]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c52:	2202      	movs	r2, #2
 8002c54:	4013      	ands	r3, r2
 8002c56:	d03c      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x2f2>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d138      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e1c5      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d019      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002c6c:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002c6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c70:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002c72:	2101      	movs	r1, #1
 8002c74:	430a      	orrs	r2, r1
 8002c76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7ff fbe0 	bl	800243c <HAL_GetTick>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c82:	f7ff fbdb 	bl	800243c <HAL_GetTick>
 8002c86:	0002      	movs	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e1ad      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c94:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c98:	2202      	movs	r2, #2
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d0f1      	beq.n	8002c82 <HAL_RCC_OscConfig+0x2a2>
 8002c9e:	e018      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ca0:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002ca2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	438a      	bics	r2, r1
 8002caa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7ff fbc6 	bl	800243c <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb6:	f7ff fbc1 	bl	800243c <HAL_GetTick>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e193      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc8:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ccc:	2202      	movs	r2, #2
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d1f1      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d100      	bne.n	8002cde <HAL_RCC_OscConfig+0x2fe>
 8002cdc:	e0c6      	b.n	8002e6c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cde:	231f      	movs	r3, #31
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2238      	movs	r2, #56	; 0x38
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	d11e      	bne.n	8002d30 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_RCC_OscConfig+0x32c>)
 8002cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d100      	bne.n	8002cfe <HAL_RCC_OscConfig+0x31e>
 8002cfc:	e0b6      	b.n	8002e6c <HAL_RCC_OscConfig+0x48c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d000      	beq.n	8002d08 <HAL_RCC_OscConfig+0x328>
 8002d06:	e0b1      	b.n	8002e6c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e171      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	fffeffff 	.word	0xfffeffff
 8002d14:	fffbffff 	.word	0xfffbffff
 8002d18:	ffff80ff 	.word	0xffff80ff
 8002d1c:	ffffc7ff 	.word	0xffffc7ff
 8002d20:	00f42400 	.word	0x00f42400
 8002d24:	20000004 	.word	0x20000004
 8002d28:	20000008 	.word	0x20000008
 8002d2c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d30:	4bb1      	ldr	r3, [pc, #708]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	055b      	lsls	r3, r3, #21
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_OscConfig+0x360>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <HAL_RCC_OscConfig+0x362>
 8002d40:	2300      	movs	r3, #0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d011      	beq.n	8002d6a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	4bac      	ldr	r3, [pc, #688]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002d48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d4a:	4bab      	ldr	r3, [pc, #684]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	0549      	lsls	r1, r1, #21
 8002d50:	430a      	orrs	r2, r1
 8002d52:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d54:	4ba8      	ldr	r3, [pc, #672]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	055b      	lsls	r3, r3, #21
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002d62:	231f      	movs	r3, #31
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6a:	4ba4      	ldr	r3, [pc, #656]	; (8002ffc <HAL_RCC_OscConfig+0x61c>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4013      	ands	r3, r2
 8002d74:	d11a      	bne.n	8002dac <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d76:	4ba1      	ldr	r3, [pc, #644]	; (8002ffc <HAL_RCC_OscConfig+0x61c>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4ba0      	ldr	r3, [pc, #640]	; (8002ffc <HAL_RCC_OscConfig+0x61c>)
 8002d7c:	2180      	movs	r1, #128	; 0x80
 8002d7e:	0049      	lsls	r1, r1, #1
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002d84:	f7ff fb5a 	bl	800243c <HAL_GetTick>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8e:	f7ff fb55 	bl	800243c <HAL_GetTick>
 8002d92:	0002      	movs	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e127      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da0:	4b96      	ldr	r3, [pc, #600]	; (8002ffc <HAL_RCC_OscConfig+0x61c>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4013      	ands	r3, r2
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d106      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x3e2>
 8002db4:	4b90      	ldr	r3, [pc, #576]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002db6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002db8:	4b8f      	ldr	r3, [pc, #572]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002dba:	2101      	movs	r1, #1
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dc0:	e01c      	b.n	8002dfc <HAL_RCC_OscConfig+0x41c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x404>
 8002dca:	4b8b      	ldr	r3, [pc, #556]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002dcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dce:	4b8a      	ldr	r3, [pc, #552]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002dd0:	2104      	movs	r1, #4
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dd6:	4b88      	ldr	r3, [pc, #544]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002dd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dda:	4b87      	ldr	r3, [pc, #540]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002ddc:	2101      	movs	r1, #1
 8002dde:	430a      	orrs	r2, r1
 8002de0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0x41c>
 8002de4:	4b84      	ldr	r3, [pc, #528]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002de6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002de8:	4b83      	ldr	r3, [pc, #524]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002dea:	2101      	movs	r1, #1
 8002dec:	438a      	bics	r2, r1
 8002dee:	65da      	str	r2, [r3, #92]	; 0x5c
 8002df0:	4b81      	ldr	r3, [pc, #516]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002df2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002df4:	4b80      	ldr	r3, [pc, #512]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002df6:	2104      	movs	r1, #4
 8002df8:	438a      	bics	r2, r1
 8002dfa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d014      	beq.n	8002e2e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7ff fb1a 	bl	800243c <HAL_GetTick>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e0c:	e009      	b.n	8002e22 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0e:	f7ff fb15 	bl	800243c <HAL_GetTick>
 8002e12:	0002      	movs	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	4a79      	ldr	r2, [pc, #484]	; (8003000 <HAL_RCC_OscConfig+0x620>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e0e6      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e22:	4b75      	ldr	r3, [pc, #468]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	2202      	movs	r2, #2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x42e>
 8002e2c:	e013      	b.n	8002e56 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2e:	f7ff fb05 	bl	800243c <HAL_GetTick>
 8002e32:	0003      	movs	r3, r0
 8002e34:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e36:	e009      	b.n	8002e4c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e38:	f7ff fb00 	bl	800243c <HAL_GetTick>
 8002e3c:	0002      	movs	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	4a6f      	ldr	r2, [pc, #444]	; (8003000 <HAL_RCC_OscConfig+0x620>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e0d1      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e4c:	4b6a      	ldr	r3, [pc, #424]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e50:	2202      	movs	r2, #2
 8002e52:	4013      	ands	r3, r2
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002e56:	231f      	movs	r3, #31
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e60:	4b65      	ldr	r3, [pc, #404]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002e62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e64:	4b64      	ldr	r3, [pc, #400]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002e66:	4967      	ldr	r1, [pc, #412]	; (8003004 <HAL_RCC_OscConfig+0x624>)
 8002e68:	400a      	ands	r2, r1
 8002e6a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d100      	bne.n	8002e76 <HAL_RCC_OscConfig+0x496>
 8002e74:	e0bb      	b.n	8002fee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e76:	4b60      	ldr	r3, [pc, #384]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2238      	movs	r2, #56	; 0x38
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b10      	cmp	r3, #16
 8002e80:	d100      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4a4>
 8002e82:	e07b      	b.n	8002f7c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d156      	bne.n	8002f3a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8c:	4b5a      	ldr	r3, [pc, #360]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b59      	ldr	r3, [pc, #356]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002e92:	495d      	ldr	r1, [pc, #372]	; (8003008 <HAL_RCC_OscConfig+0x628>)
 8002e94:	400a      	ands	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7ff fad0 	bl	800243c <HAL_GetTick>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea2:	f7ff facb 	bl	800243c <HAL_GetTick>
 8002ea6:	0002      	movs	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e09d      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb4:	4b50      	ldr	r3, [pc, #320]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	049b      	lsls	r3, r3, #18
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d1f0      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec0:	4b4d      	ldr	r3, [pc, #308]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4a51      	ldr	r2, [pc, #324]	; (800300c <HAL_RCC_OscConfig+0x62c>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	0019      	movs	r1, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1a      	ldr	r2, [r3, #32]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eec:	431a      	orrs	r2, r3
 8002eee:	4b42      	ldr	r3, [pc, #264]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef4:	4b40      	ldr	r3, [pc, #256]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b3f      	ldr	r3, [pc, #252]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002efa:	2180      	movs	r1, #128	; 0x80
 8002efc:	0449      	lsls	r1, r1, #17
 8002efe:	430a      	orrs	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002f02:	4b3d      	ldr	r3, [pc, #244]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	4b3c      	ldr	r3, [pc, #240]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002f08:	2180      	movs	r1, #128	; 0x80
 8002f0a:	0549      	lsls	r1, r1, #21
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7ff fa94 	bl	800243c <HAL_GetTick>
 8002f14:	0003      	movs	r3, r0
 8002f16:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1a:	f7ff fa8f 	bl	800243c <HAL_GetTick>
 8002f1e:	0002      	movs	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e061      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f2c:	4b32      	ldr	r3, [pc, #200]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	049b      	lsls	r3, r3, #18
 8002f34:	4013      	ands	r3, r2
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x53a>
 8002f38:	e059      	b.n	8002fee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	4b2f      	ldr	r3, [pc, #188]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4b2e      	ldr	r3, [pc, #184]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002f40:	4931      	ldr	r1, [pc, #196]	; (8003008 <HAL_RCC_OscConfig+0x628>)
 8002f42:	400a      	ands	r2, r1
 8002f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f46:	f7ff fa79 	bl	800243c <HAL_GetTick>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7ff fa74 	bl	800243c <HAL_GetTick>
 8002f54:	0002      	movs	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e046      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f62:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	049b      	lsls	r3, r3, #18
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002f6e:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002f74:	4926      	ldr	r1, [pc, #152]	; (8003010 <HAL_RCC_OscConfig+0x630>)
 8002f76:	400a      	ands	r2, r1
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	e038      	b.n	8002fee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e033      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002f88:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <HAL_RCC_OscConfig+0x618>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2203      	movs	r2, #3
 8002f92:	401a      	ands	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d126      	bne.n	8002fea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2270      	movs	r2, #112	; 0x70
 8002fa0:	401a      	ands	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d11f      	bne.n	8002fea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	23fe      	movs	r3, #254	; 0xfe
 8002fae:	01db      	lsls	r3, r3, #7
 8002fb0:	401a      	ands	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d116      	bne.n	8002fea <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	23f8      	movs	r3, #248	; 0xf8
 8002fc0:	039b      	lsls	r3, r3, #14
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d10e      	bne.n	8002fea <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	23e0      	movs	r3, #224	; 0xe0
 8002fd0:	051b      	lsls	r3, r3, #20
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d106      	bne.n	8002fea <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	0f5b      	lsrs	r3, r3, #29
 8002fe0:	075a      	lsls	r2, r3, #29
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d001      	beq.n	8002fee <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b008      	add	sp, #32
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40007000 	.word	0x40007000
 8003000:	00001388 	.word	0x00001388
 8003004:	efffffff 	.word	0xefffffff
 8003008:	feffffff 	.word	0xfeffffff
 800300c:	11c1808c 	.word	0x11c1808c
 8003010:	eefefffc 	.word	0xeefefffc

08003014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0e9      	b.n	80031fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003028:	4b76      	ldr	r3, [pc, #472]	; (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2207      	movs	r2, #7
 800302e:	4013      	ands	r3, r2
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d91e      	bls.n	8003074 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b73      	ldr	r3, [pc, #460]	; (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2207      	movs	r2, #7
 800303c:	4393      	bics	r3, r2
 800303e:	0019      	movs	r1, r3
 8003040:	4b70      	ldr	r3, [pc, #448]	; (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003048:	f7ff f9f8 	bl	800243c <HAL_GetTick>
 800304c:	0003      	movs	r3, r0
 800304e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003050:	e009      	b.n	8003066 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003052:	f7ff f9f3 	bl	800243c <HAL_GetTick>
 8003056:	0002      	movs	r2, r0
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	4a6a      	ldr	r2, [pc, #424]	; (8003208 <HAL_RCC_ClockConfig+0x1f4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0ca      	b.n	80031fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003066:	4b67      	ldr	r3, [pc, #412]	; (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2207      	movs	r2, #7
 800306c:	4013      	ands	r3, r2
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d1ee      	bne.n	8003052 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2202      	movs	r2, #2
 800307a:	4013      	ands	r3, r2
 800307c:	d015      	beq.n	80030aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2204      	movs	r2, #4
 8003084:	4013      	ands	r3, r2
 8003086:	d006      	beq.n	8003096 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003088:	4b60      	ldr	r3, [pc, #384]	; (800320c <HAL_RCC_ClockConfig+0x1f8>)
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	4b5f      	ldr	r3, [pc, #380]	; (800320c <HAL_RCC_ClockConfig+0x1f8>)
 800308e:	21e0      	movs	r1, #224	; 0xe0
 8003090:	01c9      	lsls	r1, r1, #7
 8003092:	430a      	orrs	r2, r1
 8003094:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003096:	4b5d      	ldr	r3, [pc, #372]	; (800320c <HAL_RCC_ClockConfig+0x1f8>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	4a5d      	ldr	r2, [pc, #372]	; (8003210 <HAL_RCC_ClockConfig+0x1fc>)
 800309c:	4013      	ands	r3, r2
 800309e:	0019      	movs	r1, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	4b59      	ldr	r3, [pc, #356]	; (800320c <HAL_RCC_ClockConfig+0x1f8>)
 80030a6:	430a      	orrs	r2, r1
 80030a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2201      	movs	r2, #1
 80030b0:	4013      	ands	r3, r2
 80030b2:	d057      	beq.n	8003164 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d107      	bne.n	80030cc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030bc:	4b53      	ldr	r3, [pc, #332]	; (800320c <HAL_RCC_ClockConfig+0x1f8>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	029b      	lsls	r3, r3, #10
 80030c4:	4013      	ands	r3, r2
 80030c6:	d12b      	bne.n	8003120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e097      	b.n	80031fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d107      	bne.n	80030e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d4:	4b4d      	ldr	r3, [pc, #308]	; (800320c <HAL_RCC_ClockConfig+0x1f8>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	049b      	lsls	r3, r3, #18
 80030dc:	4013      	ands	r3, r2
 80030de:	d11f      	bne.n	8003120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e08b      	b.n	80031fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d107      	bne.n	80030fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ec:	4b47      	ldr	r3, [pc, #284]	; (800320c <HAL_RCC_ClockConfig+0x1f8>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4013      	ands	r3, r2
 80030f6:	d113      	bne.n	8003120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e07f      	b.n	80031fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d106      	bne.n	8003112 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003104:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_RCC_ClockConfig+0x1f8>)
 8003106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003108:	2202      	movs	r2, #2
 800310a:	4013      	ands	r3, r2
 800310c:	d108      	bne.n	8003120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e074      	b.n	80031fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003112:	4b3e      	ldr	r3, [pc, #248]	; (800320c <HAL_RCC_ClockConfig+0x1f8>)
 8003114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003116:	2202      	movs	r2, #2
 8003118:	4013      	ands	r3, r2
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e06d      	b.n	80031fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003120:	4b3a      	ldr	r3, [pc, #232]	; (800320c <HAL_RCC_ClockConfig+0x1f8>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2207      	movs	r2, #7
 8003126:	4393      	bics	r3, r2
 8003128:	0019      	movs	r1, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	4b37      	ldr	r3, [pc, #220]	; (800320c <HAL_RCC_ClockConfig+0x1f8>)
 8003130:	430a      	orrs	r2, r1
 8003132:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003134:	f7ff f982 	bl	800243c <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313c:	e009      	b.n	8003152 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313e:	f7ff f97d 	bl	800243c <HAL_GetTick>
 8003142:	0002      	movs	r2, r0
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	4a2f      	ldr	r2, [pc, #188]	; (8003208 <HAL_RCC_ClockConfig+0x1f4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e054      	b.n	80031fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	4b2e      	ldr	r3, [pc, #184]	; (800320c <HAL_RCC_ClockConfig+0x1f8>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2238      	movs	r2, #56	; 0x38
 8003158:	401a      	ands	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	429a      	cmp	r2, r3
 8003162:	d1ec      	bne.n	800313e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b27      	ldr	r3, [pc, #156]	; (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2207      	movs	r2, #7
 800316a:	4013      	ands	r3, r2
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d21e      	bcs.n	80031b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2207      	movs	r2, #7
 8003178:	4393      	bics	r3, r2
 800317a:	0019      	movs	r1, r3
 800317c:	4b21      	ldr	r3, [pc, #132]	; (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003184:	f7ff f95a 	bl	800243c <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800318c:	e009      	b.n	80031a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800318e:	f7ff f955 	bl	800243c <HAL_GetTick>
 8003192:	0002      	movs	r2, r0
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	4a1b      	ldr	r2, [pc, #108]	; (8003208 <HAL_RCC_ClockConfig+0x1f4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e02c      	b.n	80031fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031a2:	4b18      	ldr	r3, [pc, #96]	; (8003204 <HAL_RCC_ClockConfig+0x1f0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2207      	movs	r2, #7
 80031a8:	4013      	ands	r3, r2
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d1ee      	bne.n	800318e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2204      	movs	r2, #4
 80031b6:	4013      	ands	r3, r2
 80031b8:	d009      	beq.n	80031ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031ba:	4b14      	ldr	r3, [pc, #80]	; (800320c <HAL_RCC_ClockConfig+0x1f8>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	4a15      	ldr	r2, [pc, #84]	; (8003214 <HAL_RCC_ClockConfig+0x200>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	4b10      	ldr	r3, [pc, #64]	; (800320c <HAL_RCC_ClockConfig+0x1f8>)
 80031ca:	430a      	orrs	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80031ce:	f000 f829 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 80031d2:	0001      	movs	r1, r0
 80031d4:	4b0d      	ldr	r3, [pc, #52]	; (800320c <HAL_RCC_ClockConfig+0x1f8>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	0a1b      	lsrs	r3, r3, #8
 80031da:	220f      	movs	r2, #15
 80031dc:	401a      	ands	r2, r3
 80031de:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <HAL_RCC_ClockConfig+0x204>)
 80031e0:	0092      	lsls	r2, r2, #2
 80031e2:	58d3      	ldr	r3, [r2, r3]
 80031e4:	221f      	movs	r2, #31
 80031e6:	4013      	ands	r3, r2
 80031e8:	000a      	movs	r2, r1
 80031ea:	40da      	lsrs	r2, r3
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_RCC_ClockConfig+0x208>)
 80031ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_RCC_ClockConfig+0x20c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7ff f8c5 	bl	8002384 <HAL_InitTick>
 80031fa:	0003      	movs	r3, r0
}
 80031fc:	0018      	movs	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	b004      	add	sp, #16
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40022000 	.word	0x40022000
 8003208:	00001388 	.word	0x00001388
 800320c:	40021000 	.word	0x40021000
 8003210:	fffff0ff 	.word	0xfffff0ff
 8003214:	ffff8fff 	.word	0xffff8fff
 8003218:	08006118 	.word	0x08006118
 800321c:	20000004 	.word	0x20000004
 8003220:	20000008 	.word	0x20000008

08003224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800322a:	4b3c      	ldr	r3, [pc, #240]	; (800331c <HAL_RCC_GetSysClockFreq+0xf8>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2238      	movs	r2, #56	; 0x38
 8003230:	4013      	ands	r3, r2
 8003232:	d10f      	bne.n	8003254 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003234:	4b39      	ldr	r3, [pc, #228]	; (800331c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	0adb      	lsrs	r3, r3, #11
 800323a:	2207      	movs	r2, #7
 800323c:	4013      	ands	r3, r2
 800323e:	2201      	movs	r2, #1
 8003240:	409a      	lsls	r2, r3
 8003242:	0013      	movs	r3, r2
 8003244:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003246:	6839      	ldr	r1, [r7, #0]
 8003248:	4835      	ldr	r0, [pc, #212]	; (8003320 <HAL_RCC_GetSysClockFreq+0xfc>)
 800324a:	f7fc ff65 	bl	8000118 <__udivsi3>
 800324e:	0003      	movs	r3, r0
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	e05d      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003254:	4b31      	ldr	r3, [pc, #196]	; (800331c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2238      	movs	r2, #56	; 0x38
 800325a:	4013      	ands	r3, r2
 800325c:	2b08      	cmp	r3, #8
 800325e:	d102      	bne.n	8003266 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003260:	4b30      	ldr	r3, [pc, #192]	; (8003324 <HAL_RCC_GetSysClockFreq+0x100>)
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	e054      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003266:	4b2d      	ldr	r3, [pc, #180]	; (800331c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2238      	movs	r2, #56	; 0x38
 800326c:	4013      	ands	r3, r2
 800326e:	2b10      	cmp	r3, #16
 8003270:	d138      	bne.n	80032e4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003272:	4b2a      	ldr	r3, [pc, #168]	; (800331c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2203      	movs	r2, #3
 8003278:	4013      	ands	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800327c:	4b27      	ldr	r3, [pc, #156]	; (800331c <HAL_RCC_GetSysClockFreq+0xf8>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	2207      	movs	r2, #7
 8003284:	4013      	ands	r3, r2
 8003286:	3301      	adds	r3, #1
 8003288:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b03      	cmp	r3, #3
 800328e:	d10d      	bne.n	80032ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	4824      	ldr	r0, [pc, #144]	; (8003324 <HAL_RCC_GetSysClockFreq+0x100>)
 8003294:	f7fc ff40 	bl	8000118 <__udivsi3>
 8003298:	0003      	movs	r3, r0
 800329a:	0019      	movs	r1, r3
 800329c:	4b1f      	ldr	r3, [pc, #124]	; (800331c <HAL_RCC_GetSysClockFreq+0xf8>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	227f      	movs	r2, #127	; 0x7f
 80032a4:	4013      	ands	r3, r2
 80032a6:	434b      	muls	r3, r1
 80032a8:	617b      	str	r3, [r7, #20]
        break;
 80032aa:	e00d      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	481c      	ldr	r0, [pc, #112]	; (8003320 <HAL_RCC_GetSysClockFreq+0xfc>)
 80032b0:	f7fc ff32 	bl	8000118 <__udivsi3>
 80032b4:	0003      	movs	r3, r0
 80032b6:	0019      	movs	r1, r3
 80032b8:	4b18      	ldr	r3, [pc, #96]	; (800331c <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	0a1b      	lsrs	r3, r3, #8
 80032be:	227f      	movs	r2, #127	; 0x7f
 80032c0:	4013      	ands	r3, r2
 80032c2:	434b      	muls	r3, r1
 80032c4:	617b      	str	r3, [r7, #20]
        break;
 80032c6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80032c8:	4b14      	ldr	r3, [pc, #80]	; (800331c <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	0f5b      	lsrs	r3, r3, #29
 80032ce:	2207      	movs	r2, #7
 80032d0:	4013      	ands	r3, r2
 80032d2:	3301      	adds	r3, #1
 80032d4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	6978      	ldr	r0, [r7, #20]
 80032da:	f7fc ff1d 	bl	8000118 <__udivsi3>
 80032de:	0003      	movs	r3, r0
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	e015      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80032e4:	4b0d      	ldr	r3, [pc, #52]	; (800331c <HAL_RCC_GetSysClockFreq+0xf8>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2238      	movs	r2, #56	; 0x38
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d103      	bne.n	80032f8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	e00b      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <HAL_RCC_GetSysClockFreq+0xf8>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2238      	movs	r2, #56	; 0x38
 80032fe:	4013      	ands	r3, r2
 8003300:	2b18      	cmp	r3, #24
 8003302:	d103      	bne.n	800330c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003304:	23fa      	movs	r3, #250	; 0xfa
 8003306:	01db      	lsls	r3, r3, #7
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	e001      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003310:	693b      	ldr	r3, [r7, #16]
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b006      	add	sp, #24
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	40021000 	.word	0x40021000
 8003320:	00f42400 	.word	0x00f42400
 8003324:	007a1200 	.word	0x007a1200

08003328 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800332c:	4b02      	ldr	r3, [pc, #8]	; (8003338 <HAL_RCC_GetHCLKFreq+0x10>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	20000004 	.word	0x20000004

0800333c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800333c:	b5b0      	push	{r4, r5, r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003340:	f7ff fff2 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 8003344:	0004      	movs	r4, r0
 8003346:	f7ff fb3f 	bl	80029c8 <LL_RCC_GetAPB1Prescaler>
 800334a:	0003      	movs	r3, r0
 800334c:	0b1a      	lsrs	r2, r3, #12
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003350:	0092      	lsls	r2, r2, #2
 8003352:	58d3      	ldr	r3, [r2, r3]
 8003354:	221f      	movs	r2, #31
 8003356:	4013      	ands	r3, r2
 8003358:	40dc      	lsrs	r4, r3
 800335a:	0023      	movs	r3, r4
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	bdb0      	pop	{r4, r5, r7, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	08006158 	.word	0x08006158

08003368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003370:	2313      	movs	r3, #19
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003378:	2312      	movs	r3, #18
 800337a:	18fb      	adds	r3, r7, r3
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	029b      	lsls	r3, r3, #10
 8003388:	4013      	ands	r3, r2
 800338a:	d100      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800338c:	e0a3      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338e:	2011      	movs	r0, #17
 8003390:	183b      	adds	r3, r7, r0
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003396:	4bc3      	ldr	r3, [pc, #780]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	055b      	lsls	r3, r3, #21
 800339e:	4013      	ands	r3, r2
 80033a0:	d110      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	4bc0      	ldr	r3, [pc, #768]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033a6:	4bbf      	ldr	r3, [pc, #764]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033a8:	2180      	movs	r1, #128	; 0x80
 80033aa:	0549      	lsls	r1, r1, #21
 80033ac:	430a      	orrs	r2, r1
 80033ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80033b0:	4bbc      	ldr	r3, [pc, #752]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	055b      	lsls	r3, r3, #21
 80033b8:	4013      	ands	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033be:	183b      	adds	r3, r7, r0
 80033c0:	2201      	movs	r2, #1
 80033c2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c4:	4bb8      	ldr	r3, [pc, #736]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4bb7      	ldr	r3, [pc, #732]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	0049      	lsls	r1, r1, #1
 80033ce:	430a      	orrs	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033d2:	f7ff f833 	bl	800243c <HAL_GetTick>
 80033d6:	0003      	movs	r3, r0
 80033d8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033da:	e00b      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033dc:	f7ff f82e 	bl	800243c <HAL_GetTick>
 80033e0:	0002      	movs	r2, r0
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d904      	bls.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80033ea:	2313      	movs	r3, #19
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	2203      	movs	r2, #3
 80033f0:	701a      	strb	r2, [r3, #0]
        break;
 80033f2:	e005      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033f4:	4bac      	ldr	r3, [pc, #688]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4013      	ands	r3, r2
 80033fe:	d0ed      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003400:	2313      	movs	r3, #19
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d154      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800340a:	4ba6      	ldr	r3, [pc, #664]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800340c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800340e:	23c0      	movs	r3, #192	; 0xc0
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4013      	ands	r3, r2
 8003414:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d019      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	429a      	cmp	r2, r3
 8003424:	d014      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003426:	4b9f      	ldr	r3, [pc, #636]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	4aa0      	ldr	r2, [pc, #640]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800342c:	4013      	ands	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003430:	4b9c      	ldr	r3, [pc, #624]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003432:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003434:	4b9b      	ldr	r3, [pc, #620]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003436:	2180      	movs	r1, #128	; 0x80
 8003438:	0249      	lsls	r1, r1, #9
 800343a:	430a      	orrs	r2, r1
 800343c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800343e:	4b99      	ldr	r3, [pc, #612]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003440:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003442:	4b98      	ldr	r3, [pc, #608]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003444:	499a      	ldr	r1, [pc, #616]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003446:	400a      	ands	r2, r1
 8003448:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800344a:	4b96      	ldr	r3, [pc, #600]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2201      	movs	r2, #1
 8003454:	4013      	ands	r3, r2
 8003456:	d016      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fe fff0 	bl	800243c <HAL_GetTick>
 800345c:	0003      	movs	r3, r0
 800345e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003460:	e00c      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003462:	f7fe ffeb 	bl	800243c <HAL_GetTick>
 8003466:	0002      	movs	r2, r0
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	4a91      	ldr	r2, [pc, #580]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d904      	bls.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003472:	2313      	movs	r3, #19
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	2203      	movs	r2, #3
 8003478:	701a      	strb	r2, [r3, #0]
            break;
 800347a:	e004      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347c:	4b89      	ldr	r3, [pc, #548]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800347e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003480:	2202      	movs	r2, #2
 8003482:	4013      	ands	r3, r2
 8003484:	d0ed      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003486:	2313      	movs	r3, #19
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003490:	4b84      	ldr	r3, [pc, #528]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003494:	4a85      	ldr	r2, [pc, #532]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003496:	4013      	ands	r3, r2
 8003498:	0019      	movs	r1, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800349e:	4b81      	ldr	r3, [pc, #516]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034a0:	430a      	orrs	r2, r1
 80034a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80034a4:	e00c      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034a6:	2312      	movs	r3, #18
 80034a8:	18fb      	adds	r3, r7, r3
 80034aa:	2213      	movs	r2, #19
 80034ac:	18ba      	adds	r2, r7, r2
 80034ae:	7812      	ldrb	r2, [r2, #0]
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	e005      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b4:	2312      	movs	r3, #18
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	2213      	movs	r2, #19
 80034ba:	18ba      	adds	r2, r7, r2
 80034bc:	7812      	ldrb	r2, [r2, #0]
 80034be:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034c0:	2311      	movs	r3, #17
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d105      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ca:	4b76      	ldr	r3, [pc, #472]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ce:	4b75      	ldr	r3, [pc, #468]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034d0:	4979      	ldr	r1, [pc, #484]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80034d2:	400a      	ands	r2, r1
 80034d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2201      	movs	r2, #1
 80034dc:	4013      	ands	r3, r2
 80034de:	d009      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034e0:	4b70      	ldr	r3, [pc, #448]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	2203      	movs	r2, #3
 80034e6:	4393      	bics	r3, r2
 80034e8:	0019      	movs	r1, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	4b6d      	ldr	r3, [pc, #436]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034f0:	430a      	orrs	r2, r1
 80034f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2202      	movs	r2, #2
 80034fa:	4013      	ands	r3, r2
 80034fc:	d009      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034fe:	4b69      	ldr	r3, [pc, #420]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003502:	220c      	movs	r2, #12
 8003504:	4393      	bics	r3, r2
 8003506:	0019      	movs	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	4b65      	ldr	r3, [pc, #404]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800350e:	430a      	orrs	r2, r1
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2210      	movs	r2, #16
 8003518:	4013      	ands	r3, r2
 800351a:	d009      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800351c:	4b61      	ldr	r3, [pc, #388]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800351e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003520:	4a66      	ldr	r2, [pc, #408]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003522:	4013      	ands	r3, r2
 8003524:	0019      	movs	r1, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	4b5e      	ldr	r3, [pc, #376]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800352c:	430a      	orrs	r2, r1
 800352e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	2380      	movs	r3, #128	; 0x80
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4013      	ands	r3, r2
 800353a:	d009      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800353c:	4b59      	ldr	r3, [pc, #356]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800353e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003540:	4a5f      	ldr	r2, [pc, #380]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003542:	4013      	ands	r3, r2
 8003544:	0019      	movs	r1, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	4b56      	ldr	r3, [pc, #344]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800354c:	430a      	orrs	r2, r1
 800354e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	2380      	movs	r3, #128	; 0x80
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4013      	ands	r3, r2
 800355a:	d009      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800355c:	4b51      	ldr	r3, [pc, #324]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800355e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003560:	4a58      	ldr	r2, [pc, #352]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003562:	4013      	ands	r3, r2
 8003564:	0019      	movs	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	4b4e      	ldr	r3, [pc, #312]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800356c:	430a      	orrs	r2, r1
 800356e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2220      	movs	r2, #32
 8003576:	4013      	ands	r3, r2
 8003578:	d009      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800357a:	4b4a      	ldr	r3, [pc, #296]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	4a52      	ldr	r2, [pc, #328]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003580:	4013      	ands	r3, r2
 8003582:	0019      	movs	r1, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	4b46      	ldr	r3, [pc, #280]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800358a:	430a      	orrs	r2, r1
 800358c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	01db      	lsls	r3, r3, #7
 8003596:	4013      	ands	r3, r2
 8003598:	d015      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800359a:	4b42      	ldr	r3, [pc, #264]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	0899      	lsrs	r1, r3, #2
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1a      	ldr	r2, [r3, #32]
 80035a6:	4b3f      	ldr	r3, [pc, #252]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035a8:	430a      	orrs	r2, r1
 80035aa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1a      	ldr	r2, [r3, #32]
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	05db      	lsls	r3, r3, #23
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d106      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80035b8:	4b3a      	ldr	r3, [pc, #232]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	4b39      	ldr	r3, [pc, #228]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035be:	2180      	movs	r1, #128	; 0x80
 80035c0:	0249      	lsls	r1, r1, #9
 80035c2:	430a      	orrs	r2, r1
 80035c4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	031b      	lsls	r3, r3, #12
 80035ce:	4013      	ands	r3, r2
 80035d0:	d009      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035d2:	4b34      	ldr	r3, [pc, #208]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	2240      	movs	r2, #64	; 0x40
 80035d8:	4393      	bics	r3, r2
 80035da:	0019      	movs	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035e0:	4b30      	ldr	r3, [pc, #192]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035e2:	430a      	orrs	r2, r1
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	2380      	movs	r3, #128	; 0x80
 80035ec:	039b      	lsls	r3, r3, #14
 80035ee:	4013      	ands	r3, r2
 80035f0:	d016      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035f2:	4b2c      	ldr	r3, [pc, #176]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f6:	4a35      	ldr	r2, [pc, #212]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	0019      	movs	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003600:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003602:	430a      	orrs	r2, r1
 8003604:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	03db      	lsls	r3, r3, #15
 800360e:	429a      	cmp	r2, r3
 8003610:	d106      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	4b23      	ldr	r3, [pc, #140]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003618:	2180      	movs	r1, #128	; 0x80
 800361a:	0449      	lsls	r1, r1, #17
 800361c:	430a      	orrs	r2, r1
 800361e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	03db      	lsls	r3, r3, #15
 8003628:	4013      	ands	r3, r2
 800362a:	d016      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800362c:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	4a27      	ldr	r2, [pc, #156]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003632:	4013      	ands	r3, r2
 8003634:	0019      	movs	r1, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363a:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800363c:	430a      	orrs	r2, r1
 800363e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	045b      	lsls	r3, r3, #17
 8003648:	429a      	cmp	r2, r3
 800364a:	d106      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800364c:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003652:	2180      	movs	r1, #128	; 0x80
 8003654:	0449      	lsls	r1, r1, #17
 8003656:	430a      	orrs	r2, r1
 8003658:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	4013      	ands	r3, r2
 8003664:	d016      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003666:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366a:	4a1a      	ldr	r2, [pc, #104]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800366c:	4013      	ands	r3, r2
 800366e:	0019      	movs	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003676:	430a      	orrs	r2, r1
 8003678:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	01db      	lsls	r3, r3, #7
 8003682:	429a      	cmp	r2, r3
 8003684:	d106      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003686:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800368c:	2180      	movs	r1, #128	; 0x80
 800368e:	0249      	lsls	r1, r1, #9
 8003690:	430a      	orrs	r2, r1
 8003692:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003694:	2312      	movs	r3, #18
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	781b      	ldrb	r3, [r3, #0]
}
 800369a:	0018      	movs	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	b006      	add	sp, #24
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40007000 	.word	0x40007000
 80036ac:	fffffcff 	.word	0xfffffcff
 80036b0:	fffeffff 	.word	0xfffeffff
 80036b4:	00001388 	.word	0x00001388
 80036b8:	efffffff 	.word	0xefffffff
 80036bc:	fffff3ff 	.word	0xfffff3ff
 80036c0:	fff3ffff 	.word	0xfff3ffff
 80036c4:	ffcfffff 	.word	0xffcfffff
 80036c8:	ffffcfff 	.word	0xffffcfff
 80036cc:	ffbfffff 	.word	0xffbfffff
 80036d0:	feffffff 	.word	0xfeffffff
 80036d4:	ffff3fff 	.word	0xffff3fff

080036d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e0a8      	b.n	800383c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	2382      	movs	r3, #130	; 0x82
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d009      	beq.n	8003712 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	61da      	str	r2, [r3, #28]
 8003704:	e005      	b.n	8003712 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	225d      	movs	r2, #93	; 0x5d
 800371c:	5c9b      	ldrb	r3, [r3, r2]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d107      	bne.n	8003734 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	225c      	movs	r2, #92	; 0x5c
 8003728:	2100      	movs	r1, #0
 800372a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	0018      	movs	r0, r3
 8003730:	f7fe fbfe 	bl	8001f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	225d      	movs	r2, #93	; 0x5d
 8003738:	2102      	movs	r1, #2
 800373a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2140      	movs	r1, #64	; 0x40
 8003748:	438a      	bics	r2, r1
 800374a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	23e0      	movs	r3, #224	; 0xe0
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	429a      	cmp	r2, r3
 8003756:	d902      	bls.n	800375e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e002      	b.n	8003764 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	015b      	lsls	r3, r3, #5
 8003762:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	23f0      	movs	r3, #240	; 0xf0
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	429a      	cmp	r2, r3
 800376e:	d008      	beq.n	8003782 <HAL_SPI_Init+0xaa>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	23e0      	movs	r3, #224	; 0xe0
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	429a      	cmp	r2, r3
 800377a:	d002      	beq.n	8003782 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	2382      	movs	r3, #130	; 0x82
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	401a      	ands	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6899      	ldr	r1, [r3, #8]
 8003790:	2384      	movs	r3, #132	; 0x84
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	400b      	ands	r3, r1
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	2102      	movs	r1, #2
 800379e:	400b      	ands	r3, r1
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	2101      	movs	r1, #1
 80037a8:	400b      	ands	r3, r1
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6999      	ldr	r1, [r3, #24]
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	400b      	ands	r3, r1
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	2138      	movs	r1, #56	; 0x38
 80037be:	400b      	ands	r3, r1
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	2180      	movs	r1, #128	; 0x80
 80037c8:	400b      	ands	r3, r1
 80037ca:	431a      	orrs	r2, r3
 80037cc:	0011      	movs	r1, r2
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	019b      	lsls	r3, r3, #6
 80037d6:	401a      	ands	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	0c1b      	lsrs	r3, r3, #16
 80037e6:	2204      	movs	r2, #4
 80037e8:	401a      	ands	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	2110      	movs	r1, #16
 80037f0:	400b      	ands	r3, r1
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f8:	2108      	movs	r1, #8
 80037fa:	400b      	ands	r3, r1
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68d9      	ldr	r1, [r3, #12]
 8003802:	23f0      	movs	r3, #240	; 0xf0
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	400b      	ands	r3, r1
 8003808:	431a      	orrs	r2, r3
 800380a:	0011      	movs	r1, r2
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	2380      	movs	r3, #128	; 0x80
 8003810:	015b      	lsls	r3, r3, #5
 8003812:	401a      	ands	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4907      	ldr	r1, [pc, #28]	; (8003844 <HAL_SPI_Init+0x16c>)
 8003828:	400a      	ands	r2, r1
 800382a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	225d      	movs	r2, #93	; 0x5d
 8003836:	2101      	movs	r1, #1
 8003838:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	0018      	movs	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	b004      	add	sp, #16
 8003842:	bd80      	pop	{r7, pc}
 8003844:	fffff7ff 	.word	0xfffff7ff

08003848 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	1dbb      	adds	r3, r7, #6
 8003856:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003858:	231f      	movs	r3, #31
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	2200      	movs	r2, #0
 800385e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	225c      	movs	r2, #92	; 0x5c
 8003864:	5c9b      	ldrb	r3, [r3, r2]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_SPI_Transmit+0x26>
 800386a:	2302      	movs	r3, #2
 800386c:	e140      	b.n	8003af0 <HAL_SPI_Transmit+0x2a8>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	225c      	movs	r2, #92	; 0x5c
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003876:	f7fe fde1 	bl	800243c <HAL_GetTick>
 800387a:	0003      	movs	r3, r0
 800387c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800387e:	2316      	movs	r3, #22
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	1dba      	adds	r2, r7, #6
 8003884:	8812      	ldrh	r2, [r2, #0]
 8003886:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	225d      	movs	r2, #93	; 0x5d
 800388c:	5c9b      	ldrb	r3, [r3, r2]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d004      	beq.n	800389e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003894:	231f      	movs	r3, #31
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	2202      	movs	r2, #2
 800389a:	701a      	strb	r2, [r3, #0]
    goto error;
 800389c:	e11d      	b.n	8003ada <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_SPI_Transmit+0x64>
 80038a4:	1dbb      	adds	r3, r7, #6
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d104      	bne.n	80038b6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80038ac:	231f      	movs	r3, #31
 80038ae:	18fb      	adds	r3, r7, r3
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80038b4:	e111      	b.n	8003ada <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	225d      	movs	r2, #93	; 0x5d
 80038ba:	2103      	movs	r1, #3
 80038bc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1dba      	adds	r2, r7, #6
 80038ce:	8812      	ldrh	r2, [r2, #0]
 80038d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1dba      	adds	r2, r7, #6
 80038d6:	8812      	ldrh	r2, [r2, #0]
 80038d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2244      	movs	r2, #68	; 0x44
 80038e4:	2100      	movs	r1, #0
 80038e6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2246      	movs	r2, #70	; 0x46
 80038ec:	2100      	movs	r1, #0
 80038ee:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	021b      	lsls	r3, r3, #8
 8003904:	429a      	cmp	r2, r3
 8003906:	d110      	bne.n	800392a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2140      	movs	r1, #64	; 0x40
 8003914:	438a      	bics	r2, r1
 8003916:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2180      	movs	r1, #128	; 0x80
 8003924:	01c9      	lsls	r1, r1, #7
 8003926:	430a      	orrs	r2, r1
 8003928:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2240      	movs	r2, #64	; 0x40
 8003932:	4013      	ands	r3, r2
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	d007      	beq.n	8003948 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2140      	movs	r1, #64	; 0x40
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	23e0      	movs	r3, #224	; 0xe0
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	429a      	cmp	r2, r3
 8003952:	d94e      	bls.n	80039f2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d004      	beq.n	8003966 <HAL_SPI_Transmit+0x11e>
 800395c:	2316      	movs	r3, #22
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d13f      	bne.n	80039e6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396a:	881a      	ldrh	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	1c9a      	adds	r2, r3, #2
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800398a:	e02c      	b.n	80039e6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2202      	movs	r2, #2
 8003994:	4013      	ands	r3, r2
 8003996:	2b02      	cmp	r3, #2
 8003998:	d112      	bne.n	80039c0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	881a      	ldrh	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	1c9a      	adds	r2, r3, #2
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039be:	e012      	b.n	80039e6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039c0:	f7fe fd3c 	bl	800243c <HAL_GetTick>
 80039c4:	0002      	movs	r2, r0
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d802      	bhi.n	80039d6 <HAL_SPI_Transmit+0x18e>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	3301      	adds	r3, #1
 80039d4:	d102      	bne.n	80039dc <HAL_SPI_Transmit+0x194>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d104      	bne.n	80039e6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80039dc:	231f      	movs	r3, #31
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	2203      	movs	r2, #3
 80039e2:	701a      	strb	r2, [r3, #0]
          goto error;
 80039e4:	e079      	b.n	8003ada <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1cd      	bne.n	800398c <HAL_SPI_Transmit+0x144>
 80039f0:	e04f      	b.n	8003a92 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d004      	beq.n	8003a04 <HAL_SPI_Transmit+0x1bc>
 80039fa:	2316      	movs	r3, #22
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d141      	bne.n	8003a88 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	330c      	adds	r3, #12
 8003a0e:	7812      	ldrb	r2, [r2, #0]
 8003a10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003a2a:	e02d      	b.n	8003a88 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2202      	movs	r2, #2
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d113      	bne.n	8003a62 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	7812      	ldrb	r2, [r2, #0]
 8003a46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a60:	e012      	b.n	8003a88 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a62:	f7fe fceb 	bl	800243c <HAL_GetTick>
 8003a66:	0002      	movs	r2, r0
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d802      	bhi.n	8003a78 <HAL_SPI_Transmit+0x230>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	d102      	bne.n	8003a7e <HAL_SPI_Transmit+0x236>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d104      	bne.n	8003a88 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003a7e:	231f      	movs	r3, #31
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	2203      	movs	r2, #3
 8003a84:	701a      	strb	r2, [r3, #0]
          goto error;
 8003a86:	e028      	b.n	8003ada <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1cc      	bne.n	8003a2c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	6839      	ldr	r1, [r7, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f000 f95d 	bl	8003d58 <SPI_EndRxTxTransaction>
 8003a9e:	1e03      	subs	r3, r0, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d004      	beq.n	8003ad8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003ace:	231f      	movs	r3, #31
 8003ad0:	18fb      	adds	r3, r7, r3
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	e000      	b.n	8003ada <HAL_SPI_Transmit+0x292>
  }

error:
 8003ad8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	225d      	movs	r2, #93	; 0x5d
 8003ade:	2101      	movs	r1, #1
 8003ae0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	225c      	movs	r2, #92	; 0x5c
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003aea:	231f      	movs	r3, #31
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	781b      	ldrb	r3, [r3, #0]
}
 8003af0:	0018      	movs	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b008      	add	sp, #32
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	1dfb      	adds	r3, r7, #7
 8003b06:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b08:	f7fe fc98 	bl	800243c <HAL_GetTick>
 8003b0c:	0002      	movs	r2, r0
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	18d3      	adds	r3, r2, r3
 8003b16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b18:	f7fe fc90 	bl	800243c <HAL_GetTick>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b20:	4b3a      	ldr	r3, [pc, #232]	; (8003c0c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	015b      	lsls	r3, r3, #5
 8003b26:	0d1b      	lsrs	r3, r3, #20
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	4353      	muls	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b2e:	e058      	b.n	8003be2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	3301      	adds	r3, #1
 8003b34:	d055      	beq.n	8003be2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b36:	f7fe fc81 	bl	800243c <HAL_GetTick>
 8003b3a:	0002      	movs	r2, r0
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d902      	bls.n	8003b4c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d142      	bne.n	8003bd2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	21e0      	movs	r1, #224	; 0xe0
 8003b58:	438a      	bics	r2, r1
 8003b5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	2382      	movs	r3, #130	; 0x82
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d113      	bne.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d005      	beq.n	8003b80 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	2380      	movs	r3, #128	; 0x80
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d107      	bne.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2140      	movs	r1, #64	; 0x40
 8003b8c:	438a      	bics	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	019b      	lsls	r3, r3, #6
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d110      	bne.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	491a      	ldr	r1, [pc, #104]	; (8003c10 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003ba8:	400a      	ands	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2180      	movs	r1, #128	; 0x80
 8003bb8:	0189      	lsls	r1, r1, #6
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	225d      	movs	r2, #93	; 0x5d
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	225c      	movs	r2, #92	; 0x5c
 8003bca:	2100      	movs	r1, #0
 8003bcc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e017      	b.n	8003c02 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	4013      	ands	r3, r2
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	425a      	negs	r2, r3
 8003bf2:	4153      	adcs	r3, r2
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	001a      	movs	r2, r3
 8003bf8:	1dfb      	adds	r3, r7, #7
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d197      	bne.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	0018      	movs	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b008      	add	sp, #32
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	20000004 	.word	0x20000004
 8003c10:	ffffdfff 	.word	0xffffdfff

08003c14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	; 0x28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c22:	2317      	movs	r3, #23
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c2a:	f7fe fc07 	bl	800243c <HAL_GetTick>
 8003c2e:	0002      	movs	r2, r0
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	18d3      	adds	r3, r2, r3
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003c3a:	f7fe fbff 	bl	800243c <HAL_GetTick>
 8003c3e:	0003      	movs	r3, r0
 8003c40:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	330c      	adds	r3, #12
 8003c48:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c4a:	4b41      	ldr	r3, [pc, #260]	; (8003d50 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	0013      	movs	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	189b      	adds	r3, r3, r2
 8003c54:	00da      	lsls	r2, r3, #3
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	0d1b      	lsrs	r3, r3, #20
 8003c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5c:	4353      	muls	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c60:	e068      	b.n	8003d34 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	23c0      	movs	r3, #192	; 0xc0
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d10a      	bne.n	8003c82 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d107      	bne.n	8003c82 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	2117      	movs	r1, #23
 8003c7a:	187b      	adds	r3, r7, r1
 8003c7c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c7e:	187b      	adds	r3, r7, r1
 8003c80:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	3301      	adds	r3, #1
 8003c86:	d055      	beq.n	8003d34 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c88:	f7fe fbd8 	bl	800243c <HAL_GetTick>
 8003c8c:	0002      	movs	r2, r0
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d902      	bls.n	8003c9e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d142      	bne.n	8003d24 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	21e0      	movs	r1, #224	; 0xe0
 8003caa:	438a      	bics	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	2382      	movs	r3, #130	; 0x82
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d113      	bne.n	8003ce2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	2380      	movs	r3, #128	; 0x80
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d005      	beq.n	8003cd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	2380      	movs	r3, #128	; 0x80
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d107      	bne.n	8003ce2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2140      	movs	r1, #64	; 0x40
 8003cde:	438a      	bics	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	019b      	lsls	r3, r3, #6
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d110      	bne.n	8003d10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4916      	ldr	r1, [pc, #88]	; (8003d54 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003cfa:	400a      	ands	r2, r1
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2180      	movs	r1, #128	; 0x80
 8003d0a:	0189      	lsls	r1, r1, #6
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	225d      	movs	r2, #93	; 0x5d
 8003d14:	2101      	movs	r1, #1
 8003d16:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	225c      	movs	r2, #92	; 0x5c
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e010      	b.n	8003d46 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d18e      	bne.n	8003c62 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	0018      	movs	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b00a      	add	sp, #40	; 0x28
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	20000004 	.word	0x20000004
 8003d54:	ffffdfff 	.word	0xffffdfff

08003d58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	23c0      	movs	r3, #192	; 0xc0
 8003d68:	0159      	lsls	r1, r3, #5
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	0013      	movs	r3, r2
 8003d72:	2200      	movs	r2, #0
 8003d74:	f7ff ff4e 	bl	8003c14 <SPI_WaitFifoStateUntilTimeout>
 8003d78:	1e03      	subs	r3, r0, #0
 8003d7a:	d007      	beq.n	8003d8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d80:	2220      	movs	r2, #32
 8003d82:	431a      	orrs	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e027      	b.n	8003ddc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	0013      	movs	r3, r2
 8003d96:	2200      	movs	r2, #0
 8003d98:	2180      	movs	r1, #128	; 0x80
 8003d9a:	f7ff fead 	bl	8003af8 <SPI_WaitFlagStateUntilTimeout>
 8003d9e:	1e03      	subs	r3, r0, #0
 8003da0:	d007      	beq.n	8003db2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da6:	2220      	movs	r2, #32
 8003da8:	431a      	orrs	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e014      	b.n	8003ddc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	23c0      	movs	r3, #192	; 0xc0
 8003db6:	00d9      	lsls	r1, r3, #3
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	0013      	movs	r3, r2
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f7ff ff27 	bl	8003c14 <SPI_WaitFifoStateUntilTimeout>
 8003dc6:	1e03      	subs	r3, r0, #0
 8003dc8:	d007      	beq.n	8003dda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dce:	2220      	movs	r2, #32
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e000      	b.n	8003ddc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	0018      	movs	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b004      	add	sp, #16
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e04a      	b.n	8003e8c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	223d      	movs	r2, #61	; 0x3d
 8003dfa:	5c9b      	ldrb	r3, [r3, r2]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d107      	bne.n	8003e12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	223c      	movs	r2, #60	; 0x3c
 8003e06:	2100      	movs	r1, #0
 8003e08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f7fe f8ff 	bl	8002010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	223d      	movs	r2, #61	; 0x3d
 8003e16:	2102      	movs	r1, #2
 8003e18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	0019      	movs	r1, r3
 8003e24:	0010      	movs	r0, r2
 8003e26:	f000 f9e3 	bl	80041f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2248      	movs	r2, #72	; 0x48
 8003e2e:	2101      	movs	r1, #1
 8003e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	223e      	movs	r2, #62	; 0x3e
 8003e36:	2101      	movs	r1, #1
 8003e38:	5499      	strb	r1, [r3, r2]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	223f      	movs	r2, #63	; 0x3f
 8003e3e:	2101      	movs	r1, #1
 8003e40:	5499      	strb	r1, [r3, r2]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2240      	movs	r2, #64	; 0x40
 8003e46:	2101      	movs	r1, #1
 8003e48:	5499      	strb	r1, [r3, r2]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2241      	movs	r2, #65	; 0x41
 8003e4e:	2101      	movs	r1, #1
 8003e50:	5499      	strb	r1, [r3, r2]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2242      	movs	r2, #66	; 0x42
 8003e56:	2101      	movs	r1, #1
 8003e58:	5499      	strb	r1, [r3, r2]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2243      	movs	r2, #67	; 0x43
 8003e5e:	2101      	movs	r1, #1
 8003e60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2244      	movs	r2, #68	; 0x44
 8003e66:	2101      	movs	r1, #1
 8003e68:	5499      	strb	r1, [r3, r2]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2245      	movs	r2, #69	; 0x45
 8003e6e:	2101      	movs	r1, #1
 8003e70:	5499      	strb	r1, [r3, r2]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2246      	movs	r2, #70	; 0x46
 8003e76:	2101      	movs	r1, #1
 8003e78:	5499      	strb	r1, [r3, r2]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2247      	movs	r2, #71	; 0x47
 8003e7e:	2101      	movs	r1, #1
 8003e80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	223d      	movs	r2, #61	; 0x3d
 8003e86:	2101      	movs	r1, #1
 8003e88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b002      	add	sp, #8
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	223d      	movs	r2, #61	; 0x3d
 8003ea0:	5c9b      	ldrb	r3, [r3, r2]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d001      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e042      	b.n	8003f32 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	223d      	movs	r2, #61	; 0x3d
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1c      	ldr	r2, [pc, #112]	; (8003f3c <HAL_TIM_Base_Start_IT+0xa8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00f      	beq.n	8003eee <HAL_TIM_Base_Start_IT+0x5a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	05db      	lsls	r3, r3, #23
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d009      	beq.n	8003eee <HAL_TIM_Base_Start_IT+0x5a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a18      	ldr	r2, [pc, #96]	; (8003f40 <HAL_TIM_Base_Start_IT+0xac>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d004      	beq.n	8003eee <HAL_TIM_Base_Start_IT+0x5a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a16      	ldr	r2, [pc, #88]	; (8003f44 <HAL_TIM_Base_Start_IT+0xb0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d116      	bne.n	8003f1c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4a14      	ldr	r2, [pc, #80]	; (8003f48 <HAL_TIM_Base_Start_IT+0xb4>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b06      	cmp	r3, #6
 8003efe:	d016      	beq.n	8003f2e <HAL_TIM_Base_Start_IT+0x9a>
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	2380      	movs	r3, #128	; 0x80
 8003f04:	025b      	lsls	r3, r3, #9
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d011      	beq.n	8003f2e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2101      	movs	r1, #1
 8003f16:	430a      	orrs	r2, r1
 8003f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1a:	e008      	b.n	8003f2e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2101      	movs	r1, #1
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e000      	b.n	8003f30 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	0018      	movs	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b004      	add	sp, #16
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	40012c00 	.word	0x40012c00
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40014000 	.word	0x40014000
 8003f48:	00010007 	.word	0x00010007

08003f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d124      	bne.n	8003fac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d11d      	bne.n	8003fac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2203      	movs	r2, #3
 8003f76:	4252      	negs	r2, r2
 8003f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2203      	movs	r2, #3
 8003f88:	4013      	ands	r3, r2
 8003f8a:	d004      	beq.n	8003f96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f000 f916 	bl	80041c0 <HAL_TIM_IC_CaptureCallback>
 8003f94:	e007      	b.n	8003fa6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f000 f909 	bl	80041b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f000 f915 	bl	80041d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2204      	movs	r2, #4
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d125      	bne.n	8004006 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2204      	movs	r2, #4
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d11e      	bne.n	8004006 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2205      	movs	r2, #5
 8003fce:	4252      	negs	r2, r2
 8003fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	23c0      	movs	r3, #192	; 0xc0
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d004      	beq.n	8003ff0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f000 f8e9 	bl	80041c0 <HAL_TIM_IC_CaptureCallback>
 8003fee:	e007      	b.n	8004000 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f000 f8dc 	bl	80041b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f000 f8e8 	bl	80041d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2208      	movs	r2, #8
 800400e:	4013      	ands	r3, r2
 8004010:	2b08      	cmp	r3, #8
 8004012:	d124      	bne.n	800405e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2208      	movs	r2, #8
 800401c:	4013      	ands	r3, r2
 800401e:	2b08      	cmp	r3, #8
 8004020:	d11d      	bne.n	800405e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2209      	movs	r2, #9
 8004028:	4252      	negs	r2, r2
 800402a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2204      	movs	r2, #4
 8004030:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	2203      	movs	r2, #3
 800403a:	4013      	ands	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	0018      	movs	r0, r3
 8004042:	f000 f8bd 	bl	80041c0 <HAL_TIM_IC_CaptureCallback>
 8004046:	e007      	b.n	8004058 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	0018      	movs	r0, r3
 800404c:	f000 f8b0 	bl	80041b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	0018      	movs	r0, r3
 8004054:	f000 f8bc 	bl	80041d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	2210      	movs	r2, #16
 8004066:	4013      	ands	r3, r2
 8004068:	2b10      	cmp	r3, #16
 800406a:	d125      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	2210      	movs	r2, #16
 8004074:	4013      	ands	r3, r2
 8004076:	2b10      	cmp	r3, #16
 8004078:	d11e      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2211      	movs	r2, #17
 8004080:	4252      	negs	r2, r2
 8004082:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2208      	movs	r2, #8
 8004088:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	23c0      	movs	r3, #192	; 0xc0
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4013      	ands	r3, r2
 8004096:	d004      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	0018      	movs	r0, r3
 800409c:	f000 f890 	bl	80041c0 <HAL_TIM_IC_CaptureCallback>
 80040a0:	e007      	b.n	80040b2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	0018      	movs	r0, r3
 80040a6:	f000 f883 	bl	80041b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f000 f88f 	bl	80041d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2201      	movs	r2, #1
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d10f      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d108      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2202      	movs	r2, #2
 80040da:	4252      	negs	r2, r2
 80040dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7fc fe9f 	bl	8000e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	2280      	movs	r2, #128	; 0x80
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b80      	cmp	r3, #128	; 0x80
 80040f2:	d10f      	bne.n	8004114 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2280      	movs	r2, #128	; 0x80
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b80      	cmp	r3, #128	; 0x80
 8004100:	d108      	bne.n	8004114 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2281      	movs	r2, #129	; 0x81
 8004108:	4252      	negs	r2, r2
 800410a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	0018      	movs	r0, r3
 8004110:	f000 f8f6 	bl	8004300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	401a      	ands	r2, r3
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	429a      	cmp	r2, r3
 8004126:	d10e      	bne.n	8004146 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	2280      	movs	r2, #128	; 0x80
 8004130:	4013      	ands	r3, r2
 8004132:	2b80      	cmp	r3, #128	; 0x80
 8004134:	d107      	bne.n	8004146 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <HAL_TIM_IRQHandler+0x260>)
 800413c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	0018      	movs	r0, r3
 8004142:	f000 f8e5 	bl	8004310 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	2240      	movs	r2, #64	; 0x40
 800414e:	4013      	ands	r3, r2
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	d10f      	bne.n	8004174 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	2240      	movs	r2, #64	; 0x40
 800415c:	4013      	ands	r3, r2
 800415e:	2b40      	cmp	r3, #64	; 0x40
 8004160:	d108      	bne.n	8004174 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2241      	movs	r2, #65	; 0x41
 8004168:	4252      	negs	r2, r2
 800416a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	0018      	movs	r0, r3
 8004170:	f000 f836 	bl	80041e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2220      	movs	r2, #32
 800417c:	4013      	ands	r3, r2
 800417e:	2b20      	cmp	r3, #32
 8004180:	d10f      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	4013      	ands	r3, r2
 800418c:	2b20      	cmp	r3, #32
 800418e:	d108      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2221      	movs	r2, #33	; 0x21
 8004196:	4252      	negs	r2, r2
 8004198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	0018      	movs	r0, r3
 800419e:	f000 f8a7 	bl	80042f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b002      	add	sp, #8
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	fffffeff 	.word	0xfffffeff

080041b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041b8:	46c0      	nop			; (mov r8, r8)
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b002      	add	sp, #8
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b002      	add	sp, #8
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	46bd      	mov	sp, r7
 80041dc:	b002      	add	sp, #8
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b002      	add	sp, #8
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a34      	ldr	r2, [pc, #208]	; (80042d4 <TIM_Base_SetConfig+0xe4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d008      	beq.n	800421a <TIM_Base_SetConfig+0x2a>
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	2380      	movs	r3, #128	; 0x80
 800420c:	05db      	lsls	r3, r3, #23
 800420e:	429a      	cmp	r2, r3
 8004210:	d003      	beq.n	800421a <TIM_Base_SetConfig+0x2a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a30      	ldr	r2, [pc, #192]	; (80042d8 <TIM_Base_SetConfig+0xe8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d108      	bne.n	800422c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2270      	movs	r2, #112	; 0x70
 800421e:	4393      	bics	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a29      	ldr	r2, [pc, #164]	; (80042d4 <TIM_Base_SetConfig+0xe4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d018      	beq.n	8004266 <TIM_Base_SetConfig+0x76>
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	2380      	movs	r3, #128	; 0x80
 8004238:	05db      	lsls	r3, r3, #23
 800423a:	429a      	cmp	r2, r3
 800423c:	d013      	beq.n	8004266 <TIM_Base_SetConfig+0x76>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a25      	ldr	r2, [pc, #148]	; (80042d8 <TIM_Base_SetConfig+0xe8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00f      	beq.n	8004266 <TIM_Base_SetConfig+0x76>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a24      	ldr	r2, [pc, #144]	; (80042dc <TIM_Base_SetConfig+0xec>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00b      	beq.n	8004266 <TIM_Base_SetConfig+0x76>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a23      	ldr	r2, [pc, #140]	; (80042e0 <TIM_Base_SetConfig+0xf0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d007      	beq.n	8004266 <TIM_Base_SetConfig+0x76>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a22      	ldr	r2, [pc, #136]	; (80042e4 <TIM_Base_SetConfig+0xf4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_Base_SetConfig+0x76>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a21      	ldr	r2, [pc, #132]	; (80042e8 <TIM_Base_SetConfig+0xf8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d108      	bne.n	8004278 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4a20      	ldr	r2, [pc, #128]	; (80042ec <TIM_Base_SetConfig+0xfc>)
 800426a:	4013      	ands	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2280      	movs	r2, #128	; 0x80
 800427c:	4393      	bics	r3, r2
 800427e:	001a      	movs	r2, r3
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a0c      	ldr	r2, [pc, #48]	; (80042d4 <TIM_Base_SetConfig+0xe4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00b      	beq.n	80042be <TIM_Base_SetConfig+0xce>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a0d      	ldr	r2, [pc, #52]	; (80042e0 <TIM_Base_SetConfig+0xf0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d007      	beq.n	80042be <TIM_Base_SetConfig+0xce>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <TIM_Base_SetConfig+0xf4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d003      	beq.n	80042be <TIM_Base_SetConfig+0xce>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a0b      	ldr	r2, [pc, #44]	; (80042e8 <TIM_Base_SetConfig+0xf8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d103      	bne.n	80042c6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	615a      	str	r2, [r3, #20]
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b004      	add	sp, #16
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40012c00 	.word	0x40012c00
 80042d8:	40000400 	.word	0x40000400
 80042dc:	40002000 	.word	0x40002000
 80042e0:	40014000 	.word	0x40014000
 80042e4:	40014400 	.word	0x40014400
 80042e8:	40014800 	.word	0x40014800
 80042ec:	fffffcff 	.word	0xfffffcff

080042f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042f8:	46c0      	nop			; (mov r8, r8)
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b002      	add	sp, #8
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004308:	46c0      	nop			; (mov r8, r8)
 800430a:	46bd      	mov	sp, r7
 800430c:	b002      	add	sp, #8
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004318:	46c0      	nop			; (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	b002      	add	sp, #8
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e046      	b.n	80043c0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2288      	movs	r2, #136	; 0x88
 8004336:	589b      	ldr	r3, [r3, r2]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d107      	bne.n	800434c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2284      	movs	r2, #132	; 0x84
 8004340:	2100      	movs	r1, #0
 8004342:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	0018      	movs	r0, r3
 8004348:	f7fd fe8a 	bl	8002060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2288      	movs	r2, #136	; 0x88
 8004350:	2124      	movs	r1, #36	; 0x24
 8004352:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2101      	movs	r1, #1
 8004360:	438a      	bics	r2, r1
 8004362:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	0018      	movs	r0, r3
 8004368:	f000 f830 	bl	80043cc <UART_SetConfig>
 800436c:	0003      	movs	r3, r0
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e024      	b.n	80043c0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	0018      	movs	r0, r3
 8004382:	f000 fae1 	bl	8004948 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	490d      	ldr	r1, [pc, #52]	; (80043c8 <HAL_UART_Init+0xa8>)
 8004392:	400a      	ands	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	212a      	movs	r1, #42	; 0x2a
 80043a2:	438a      	bics	r2, r1
 80043a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2101      	movs	r1, #1
 80043b2:	430a      	orrs	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	0018      	movs	r0, r3
 80043ba:	f000 fb79 	bl	8004ab0 <UART_CheckIdleState>
 80043be:	0003      	movs	r3, r0
}
 80043c0:	0018      	movs	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b002      	add	sp, #8
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	ffffb7ff 	.word	0xffffb7ff

080043cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043cc:	b5b0      	push	{r4, r5, r7, lr}
 80043ce:	b090      	sub	sp, #64	; 0x40
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043d4:	231a      	movs	r3, #26
 80043d6:	2220      	movs	r2, #32
 80043d8:	189b      	adds	r3, r3, r2
 80043da:	19db      	adds	r3, r3, r7
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4aaf      	ldr	r2, [pc, #700]	; (80046bc <UART_SetConfig+0x2f0>)
 8004400:	4013      	ands	r3, r2
 8004402:	0019      	movs	r1, r3
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800440a:	430b      	orrs	r3, r1
 800440c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	4aaa      	ldr	r2, [pc, #680]	; (80046c0 <UART_SetConfig+0x2f4>)
 8004416:	4013      	ands	r3, r2
 8004418:	0018      	movs	r0, r3
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	68d9      	ldr	r1, [r3, #12]
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	0003      	movs	r3, r0
 8004424:	430b      	orrs	r3, r1
 8004426:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4aa4      	ldr	r2, [pc, #656]	; (80046c4 <UART_SetConfig+0x2f8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800443e:	4313      	orrs	r3, r2
 8004440:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4a9f      	ldr	r2, [pc, #636]	; (80046c8 <UART_SetConfig+0x2fc>)
 800444a:	4013      	ands	r3, r2
 800444c:	0019      	movs	r1, r3
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004454:	430b      	orrs	r3, r1
 8004456:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	220f      	movs	r2, #15
 8004460:	4393      	bics	r3, r2
 8004462:	0018      	movs	r0, r3
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	0003      	movs	r3, r0
 800446e:	430b      	orrs	r3, r1
 8004470:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a95      	ldr	r2, [pc, #596]	; (80046cc <UART_SetConfig+0x300>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d131      	bne.n	80044e0 <UART_SetConfig+0x114>
 800447c:	4b94      	ldr	r3, [pc, #592]	; (80046d0 <UART_SetConfig+0x304>)
 800447e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004480:	2203      	movs	r2, #3
 8004482:	4013      	ands	r3, r2
 8004484:	2b03      	cmp	r3, #3
 8004486:	d01d      	beq.n	80044c4 <UART_SetConfig+0xf8>
 8004488:	d823      	bhi.n	80044d2 <UART_SetConfig+0x106>
 800448a:	2b02      	cmp	r3, #2
 800448c:	d00c      	beq.n	80044a8 <UART_SetConfig+0xdc>
 800448e:	d820      	bhi.n	80044d2 <UART_SetConfig+0x106>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <UART_SetConfig+0xce>
 8004494:	2b01      	cmp	r3, #1
 8004496:	d00e      	beq.n	80044b6 <UART_SetConfig+0xea>
 8004498:	e01b      	b.n	80044d2 <UART_SetConfig+0x106>
 800449a:	231b      	movs	r3, #27
 800449c:	2220      	movs	r2, #32
 800449e:	189b      	adds	r3, r3, r2
 80044a0:	19db      	adds	r3, r3, r7
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e0b4      	b.n	8004612 <UART_SetConfig+0x246>
 80044a8:	231b      	movs	r3, #27
 80044aa:	2220      	movs	r2, #32
 80044ac:	189b      	adds	r3, r3, r2
 80044ae:	19db      	adds	r3, r3, r7
 80044b0:	2202      	movs	r2, #2
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	e0ad      	b.n	8004612 <UART_SetConfig+0x246>
 80044b6:	231b      	movs	r3, #27
 80044b8:	2220      	movs	r2, #32
 80044ba:	189b      	adds	r3, r3, r2
 80044bc:	19db      	adds	r3, r3, r7
 80044be:	2204      	movs	r2, #4
 80044c0:	701a      	strb	r2, [r3, #0]
 80044c2:	e0a6      	b.n	8004612 <UART_SetConfig+0x246>
 80044c4:	231b      	movs	r3, #27
 80044c6:	2220      	movs	r2, #32
 80044c8:	189b      	adds	r3, r3, r2
 80044ca:	19db      	adds	r3, r3, r7
 80044cc:	2208      	movs	r2, #8
 80044ce:	701a      	strb	r2, [r3, #0]
 80044d0:	e09f      	b.n	8004612 <UART_SetConfig+0x246>
 80044d2:	231b      	movs	r3, #27
 80044d4:	2220      	movs	r2, #32
 80044d6:	189b      	adds	r3, r3, r2
 80044d8:	19db      	adds	r3, r3, r7
 80044da:	2210      	movs	r2, #16
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	e098      	b.n	8004612 <UART_SetConfig+0x246>
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a7b      	ldr	r2, [pc, #492]	; (80046d4 <UART_SetConfig+0x308>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d131      	bne.n	800454e <UART_SetConfig+0x182>
 80044ea:	4b79      	ldr	r3, [pc, #484]	; (80046d0 <UART_SetConfig+0x304>)
 80044ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ee:	220c      	movs	r2, #12
 80044f0:	4013      	ands	r3, r2
 80044f2:	2b0c      	cmp	r3, #12
 80044f4:	d01d      	beq.n	8004532 <UART_SetConfig+0x166>
 80044f6:	d823      	bhi.n	8004540 <UART_SetConfig+0x174>
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d00c      	beq.n	8004516 <UART_SetConfig+0x14a>
 80044fc:	d820      	bhi.n	8004540 <UART_SetConfig+0x174>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <UART_SetConfig+0x13c>
 8004502:	2b04      	cmp	r3, #4
 8004504:	d00e      	beq.n	8004524 <UART_SetConfig+0x158>
 8004506:	e01b      	b.n	8004540 <UART_SetConfig+0x174>
 8004508:	231b      	movs	r3, #27
 800450a:	2220      	movs	r2, #32
 800450c:	189b      	adds	r3, r3, r2
 800450e:	19db      	adds	r3, r3, r7
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	e07d      	b.n	8004612 <UART_SetConfig+0x246>
 8004516:	231b      	movs	r3, #27
 8004518:	2220      	movs	r2, #32
 800451a:	189b      	adds	r3, r3, r2
 800451c:	19db      	adds	r3, r3, r7
 800451e:	2202      	movs	r2, #2
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	e076      	b.n	8004612 <UART_SetConfig+0x246>
 8004524:	231b      	movs	r3, #27
 8004526:	2220      	movs	r2, #32
 8004528:	189b      	adds	r3, r3, r2
 800452a:	19db      	adds	r3, r3, r7
 800452c:	2204      	movs	r2, #4
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	e06f      	b.n	8004612 <UART_SetConfig+0x246>
 8004532:	231b      	movs	r3, #27
 8004534:	2220      	movs	r2, #32
 8004536:	189b      	adds	r3, r3, r2
 8004538:	19db      	adds	r3, r3, r7
 800453a:	2208      	movs	r2, #8
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	e068      	b.n	8004612 <UART_SetConfig+0x246>
 8004540:	231b      	movs	r3, #27
 8004542:	2220      	movs	r2, #32
 8004544:	189b      	adds	r3, r3, r2
 8004546:	19db      	adds	r3, r3, r7
 8004548:	2210      	movs	r2, #16
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	e061      	b.n	8004612 <UART_SetConfig+0x246>
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a61      	ldr	r2, [pc, #388]	; (80046d8 <UART_SetConfig+0x30c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d106      	bne.n	8004566 <UART_SetConfig+0x19a>
 8004558:	231b      	movs	r3, #27
 800455a:	2220      	movs	r2, #32
 800455c:	189b      	adds	r3, r3, r2
 800455e:	19db      	adds	r3, r3, r7
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	e055      	b.n	8004612 <UART_SetConfig+0x246>
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a5c      	ldr	r2, [pc, #368]	; (80046dc <UART_SetConfig+0x310>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d106      	bne.n	800457e <UART_SetConfig+0x1b2>
 8004570:	231b      	movs	r3, #27
 8004572:	2220      	movs	r2, #32
 8004574:	189b      	adds	r3, r3, r2
 8004576:	19db      	adds	r3, r3, r7
 8004578:	2200      	movs	r2, #0
 800457a:	701a      	strb	r2, [r3, #0]
 800457c:	e049      	b.n	8004612 <UART_SetConfig+0x246>
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a50      	ldr	r2, [pc, #320]	; (80046c4 <UART_SetConfig+0x2f8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d13e      	bne.n	8004606 <UART_SetConfig+0x23a>
 8004588:	4b51      	ldr	r3, [pc, #324]	; (80046d0 <UART_SetConfig+0x304>)
 800458a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800458c:	23c0      	movs	r3, #192	; 0xc0
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	4013      	ands	r3, r2
 8004592:	22c0      	movs	r2, #192	; 0xc0
 8004594:	0112      	lsls	r2, r2, #4
 8004596:	4293      	cmp	r3, r2
 8004598:	d027      	beq.n	80045ea <UART_SetConfig+0x21e>
 800459a:	22c0      	movs	r2, #192	; 0xc0
 800459c:	0112      	lsls	r2, r2, #4
 800459e:	4293      	cmp	r3, r2
 80045a0:	d82a      	bhi.n	80045f8 <UART_SetConfig+0x22c>
 80045a2:	2280      	movs	r2, #128	; 0x80
 80045a4:	0112      	lsls	r2, r2, #4
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d011      	beq.n	80045ce <UART_SetConfig+0x202>
 80045aa:	2280      	movs	r2, #128	; 0x80
 80045ac:	0112      	lsls	r2, r2, #4
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d822      	bhi.n	80045f8 <UART_SetConfig+0x22c>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d004      	beq.n	80045c0 <UART_SetConfig+0x1f4>
 80045b6:	2280      	movs	r2, #128	; 0x80
 80045b8:	00d2      	lsls	r2, r2, #3
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00e      	beq.n	80045dc <UART_SetConfig+0x210>
 80045be:	e01b      	b.n	80045f8 <UART_SetConfig+0x22c>
 80045c0:	231b      	movs	r3, #27
 80045c2:	2220      	movs	r2, #32
 80045c4:	189b      	adds	r3, r3, r2
 80045c6:	19db      	adds	r3, r3, r7
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]
 80045cc:	e021      	b.n	8004612 <UART_SetConfig+0x246>
 80045ce:	231b      	movs	r3, #27
 80045d0:	2220      	movs	r2, #32
 80045d2:	189b      	adds	r3, r3, r2
 80045d4:	19db      	adds	r3, r3, r7
 80045d6:	2202      	movs	r2, #2
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	e01a      	b.n	8004612 <UART_SetConfig+0x246>
 80045dc:	231b      	movs	r3, #27
 80045de:	2220      	movs	r2, #32
 80045e0:	189b      	adds	r3, r3, r2
 80045e2:	19db      	adds	r3, r3, r7
 80045e4:	2204      	movs	r2, #4
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	e013      	b.n	8004612 <UART_SetConfig+0x246>
 80045ea:	231b      	movs	r3, #27
 80045ec:	2220      	movs	r2, #32
 80045ee:	189b      	adds	r3, r3, r2
 80045f0:	19db      	adds	r3, r3, r7
 80045f2:	2208      	movs	r2, #8
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	e00c      	b.n	8004612 <UART_SetConfig+0x246>
 80045f8:	231b      	movs	r3, #27
 80045fa:	2220      	movs	r2, #32
 80045fc:	189b      	adds	r3, r3, r2
 80045fe:	19db      	adds	r3, r3, r7
 8004600:	2210      	movs	r2, #16
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	e005      	b.n	8004612 <UART_SetConfig+0x246>
 8004606:	231b      	movs	r3, #27
 8004608:	2220      	movs	r2, #32
 800460a:	189b      	adds	r3, r3, r2
 800460c:	19db      	adds	r3, r3, r7
 800460e:	2210      	movs	r2, #16
 8004610:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a2b      	ldr	r2, [pc, #172]	; (80046c4 <UART_SetConfig+0x2f8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d000      	beq.n	800461e <UART_SetConfig+0x252>
 800461c:	e0a9      	b.n	8004772 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800461e:	231b      	movs	r3, #27
 8004620:	2220      	movs	r2, #32
 8004622:	189b      	adds	r3, r3, r2
 8004624:	19db      	adds	r3, r3, r7
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b08      	cmp	r3, #8
 800462a:	d015      	beq.n	8004658 <UART_SetConfig+0x28c>
 800462c:	dc18      	bgt.n	8004660 <UART_SetConfig+0x294>
 800462e:	2b04      	cmp	r3, #4
 8004630:	d00d      	beq.n	800464e <UART_SetConfig+0x282>
 8004632:	dc15      	bgt.n	8004660 <UART_SetConfig+0x294>
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <UART_SetConfig+0x272>
 8004638:	2b02      	cmp	r3, #2
 800463a:	d005      	beq.n	8004648 <UART_SetConfig+0x27c>
 800463c:	e010      	b.n	8004660 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800463e:	f7fe fe7d 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 8004642:	0003      	movs	r3, r0
 8004644:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004646:	e014      	b.n	8004672 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004648:	4b25      	ldr	r3, [pc, #148]	; (80046e0 <UART_SetConfig+0x314>)
 800464a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800464c:	e011      	b.n	8004672 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800464e:	f7fe fde9 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 8004652:	0003      	movs	r3, r0
 8004654:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004656:	e00c      	b.n	8004672 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004658:	2380      	movs	r3, #128	; 0x80
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800465e:	e008      	b.n	8004672 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004664:	231a      	movs	r3, #26
 8004666:	2220      	movs	r2, #32
 8004668:	189b      	adds	r3, r3, r2
 800466a:	19db      	adds	r3, r3, r7
 800466c:	2201      	movs	r2, #1
 800466e:	701a      	strb	r2, [r3, #0]
        break;
 8004670:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004674:	2b00      	cmp	r3, #0
 8004676:	d100      	bne.n	800467a <UART_SetConfig+0x2ae>
 8004678:	e14b      	b.n	8004912 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800467e:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <UART_SetConfig+0x318>)
 8004680:	0052      	lsls	r2, r2, #1
 8004682:	5ad3      	ldrh	r3, [r2, r3]
 8004684:	0019      	movs	r1, r3
 8004686:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004688:	f7fb fd46 	bl	8000118 <__udivsi3>
 800468c:	0003      	movs	r3, r0
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	0013      	movs	r3, r2
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	189b      	adds	r3, r3, r2
 800469a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800469c:	429a      	cmp	r2, r3
 800469e:	d305      	bcc.n	80046ac <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d91d      	bls.n	80046e8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80046ac:	231a      	movs	r3, #26
 80046ae:	2220      	movs	r2, #32
 80046b0:	189b      	adds	r3, r3, r2
 80046b2:	19db      	adds	r3, r3, r7
 80046b4:	2201      	movs	r2, #1
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e12b      	b.n	8004912 <UART_SetConfig+0x546>
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	cfff69f3 	.word	0xcfff69f3
 80046c0:	ffffcfff 	.word	0xffffcfff
 80046c4:	40008000 	.word	0x40008000
 80046c8:	11fff4ff 	.word	0x11fff4ff
 80046cc:	40013800 	.word	0x40013800
 80046d0:	40021000 	.word	0x40021000
 80046d4:	40004400 	.word	0x40004400
 80046d8:	40004800 	.word	0x40004800
 80046dc:	40004c00 	.word	0x40004c00
 80046e0:	00f42400 	.word	0x00f42400
 80046e4:	08006178 	.word	0x08006178
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ea:	61bb      	str	r3, [r7, #24]
 80046ec:	2300      	movs	r3, #0
 80046ee:	61fb      	str	r3, [r7, #28]
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046f4:	4b92      	ldr	r3, [pc, #584]	; (8004940 <UART_SetConfig+0x574>)
 80046f6:	0052      	lsls	r2, r2, #1
 80046f8:	5ad3      	ldrh	r3, [r2, r3]
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	2300      	movs	r3, #0
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	69b8      	ldr	r0, [r7, #24]
 8004706:	69f9      	ldr	r1, [r7, #28]
 8004708:	f7fb fe7c 	bl	8000404 <__aeabi_uldivmod>
 800470c:	0002      	movs	r2, r0
 800470e:	000b      	movs	r3, r1
 8004710:	0e11      	lsrs	r1, r2, #24
 8004712:	021d      	lsls	r5, r3, #8
 8004714:	430d      	orrs	r5, r1
 8004716:	0214      	lsls	r4, r2, #8
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	68b8      	ldr	r0, [r7, #8]
 8004726:	68f9      	ldr	r1, [r7, #12]
 8004728:	1900      	adds	r0, r0, r4
 800472a:	4169      	adcs	r1, r5
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	603b      	str	r3, [r7, #0]
 8004732:	2300      	movs	r3, #0
 8004734:	607b      	str	r3, [r7, #4]
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f7fb fe63 	bl	8000404 <__aeabi_uldivmod>
 800473e:	0002      	movs	r2, r0
 8004740:	000b      	movs	r3, r1
 8004742:	0013      	movs	r3, r2
 8004744:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004748:	23c0      	movs	r3, #192	; 0xc0
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	429a      	cmp	r2, r3
 800474e:	d309      	bcc.n	8004764 <UART_SetConfig+0x398>
 8004750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	035b      	lsls	r3, r3, #13
 8004756:	429a      	cmp	r2, r3
 8004758:	d204      	bcs.n	8004764 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004760:	60da      	str	r2, [r3, #12]
 8004762:	e0d6      	b.n	8004912 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004764:	231a      	movs	r3, #26
 8004766:	2220      	movs	r2, #32
 8004768:	189b      	adds	r3, r3, r2
 800476a:	19db      	adds	r3, r3, r7
 800476c:	2201      	movs	r2, #1
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e0cf      	b.n	8004912 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	69da      	ldr	r2, [r3, #28]
 8004776:	2380      	movs	r3, #128	; 0x80
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	429a      	cmp	r2, r3
 800477c:	d000      	beq.n	8004780 <UART_SetConfig+0x3b4>
 800477e:	e070      	b.n	8004862 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004780:	231b      	movs	r3, #27
 8004782:	2220      	movs	r2, #32
 8004784:	189b      	adds	r3, r3, r2
 8004786:	19db      	adds	r3, r3, r7
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b08      	cmp	r3, #8
 800478c:	d015      	beq.n	80047ba <UART_SetConfig+0x3ee>
 800478e:	dc18      	bgt.n	80047c2 <UART_SetConfig+0x3f6>
 8004790:	2b04      	cmp	r3, #4
 8004792:	d00d      	beq.n	80047b0 <UART_SetConfig+0x3e4>
 8004794:	dc15      	bgt.n	80047c2 <UART_SetConfig+0x3f6>
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <UART_SetConfig+0x3d4>
 800479a:	2b02      	cmp	r3, #2
 800479c:	d005      	beq.n	80047aa <UART_SetConfig+0x3de>
 800479e:	e010      	b.n	80047c2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a0:	f7fe fdcc 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 80047a4:	0003      	movs	r3, r0
 80047a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047a8:	e014      	b.n	80047d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047aa:	4b66      	ldr	r3, [pc, #408]	; (8004944 <UART_SetConfig+0x578>)
 80047ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047ae:	e011      	b.n	80047d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b0:	f7fe fd38 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 80047b4:	0003      	movs	r3, r0
 80047b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047b8:	e00c      	b.n	80047d4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ba:	2380      	movs	r3, #128	; 0x80
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047c0:	e008      	b.n	80047d4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80047c6:	231a      	movs	r3, #26
 80047c8:	2220      	movs	r2, #32
 80047ca:	189b      	adds	r3, r3, r2
 80047cc:	19db      	adds	r3, r3, r7
 80047ce:	2201      	movs	r2, #1
 80047d0:	701a      	strb	r2, [r3, #0]
        break;
 80047d2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d100      	bne.n	80047dc <UART_SetConfig+0x410>
 80047da:	e09a      	b.n	8004912 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047e0:	4b57      	ldr	r3, [pc, #348]	; (8004940 <UART_SetConfig+0x574>)
 80047e2:	0052      	lsls	r2, r2, #1
 80047e4:	5ad3      	ldrh	r3, [r2, r3]
 80047e6:	0019      	movs	r1, r3
 80047e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047ea:	f7fb fc95 	bl	8000118 <__udivsi3>
 80047ee:	0003      	movs	r3, r0
 80047f0:	005a      	lsls	r2, r3, #1
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	18d2      	adds	r2, r2, r3
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	0019      	movs	r1, r3
 8004800:	0010      	movs	r0, r2
 8004802:	f7fb fc89 	bl	8000118 <__udivsi3>
 8004806:	0003      	movs	r3, r0
 8004808:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	2b0f      	cmp	r3, #15
 800480e:	d921      	bls.n	8004854 <UART_SetConfig+0x488>
 8004810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	025b      	lsls	r3, r3, #9
 8004816:	429a      	cmp	r2, r3
 8004818:	d21c      	bcs.n	8004854 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	b29a      	uxth	r2, r3
 800481e:	200e      	movs	r0, #14
 8004820:	2420      	movs	r4, #32
 8004822:	1903      	adds	r3, r0, r4
 8004824:	19db      	adds	r3, r3, r7
 8004826:	210f      	movs	r1, #15
 8004828:	438a      	bics	r2, r1
 800482a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	085b      	lsrs	r3, r3, #1
 8004830:	b29b      	uxth	r3, r3
 8004832:	2207      	movs	r2, #7
 8004834:	4013      	ands	r3, r2
 8004836:	b299      	uxth	r1, r3
 8004838:	1903      	adds	r3, r0, r4
 800483a:	19db      	adds	r3, r3, r7
 800483c:	1902      	adds	r2, r0, r4
 800483e:	19d2      	adds	r2, r2, r7
 8004840:	8812      	ldrh	r2, [r2, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	1902      	adds	r2, r0, r4
 800484c:	19d2      	adds	r2, r2, r7
 800484e:	8812      	ldrh	r2, [r2, #0]
 8004850:	60da      	str	r2, [r3, #12]
 8004852:	e05e      	b.n	8004912 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004854:	231a      	movs	r3, #26
 8004856:	2220      	movs	r2, #32
 8004858:	189b      	adds	r3, r3, r2
 800485a:	19db      	adds	r3, r3, r7
 800485c:	2201      	movs	r2, #1
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	e057      	b.n	8004912 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004862:	231b      	movs	r3, #27
 8004864:	2220      	movs	r2, #32
 8004866:	189b      	adds	r3, r3, r2
 8004868:	19db      	adds	r3, r3, r7
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b08      	cmp	r3, #8
 800486e:	d015      	beq.n	800489c <UART_SetConfig+0x4d0>
 8004870:	dc18      	bgt.n	80048a4 <UART_SetConfig+0x4d8>
 8004872:	2b04      	cmp	r3, #4
 8004874:	d00d      	beq.n	8004892 <UART_SetConfig+0x4c6>
 8004876:	dc15      	bgt.n	80048a4 <UART_SetConfig+0x4d8>
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <UART_SetConfig+0x4b6>
 800487c:	2b02      	cmp	r3, #2
 800487e:	d005      	beq.n	800488c <UART_SetConfig+0x4c0>
 8004880:	e010      	b.n	80048a4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004882:	f7fe fd5b 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 8004886:	0003      	movs	r3, r0
 8004888:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800488a:	e014      	b.n	80048b6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800488c:	4b2d      	ldr	r3, [pc, #180]	; (8004944 <UART_SetConfig+0x578>)
 800488e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004890:	e011      	b.n	80048b6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004892:	f7fe fcc7 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 8004896:	0003      	movs	r3, r0
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800489a:	e00c      	b.n	80048b6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800489c:	2380      	movs	r3, #128	; 0x80
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048a2:	e008      	b.n	80048b6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80048a8:	231a      	movs	r3, #26
 80048aa:	2220      	movs	r2, #32
 80048ac:	189b      	adds	r3, r3, r2
 80048ae:	19db      	adds	r3, r3, r7
 80048b0:	2201      	movs	r2, #1
 80048b2:	701a      	strb	r2, [r3, #0]
        break;
 80048b4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80048b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d02a      	beq.n	8004912 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048c0:	4b1f      	ldr	r3, [pc, #124]	; (8004940 <UART_SetConfig+0x574>)
 80048c2:	0052      	lsls	r2, r2, #1
 80048c4:	5ad3      	ldrh	r3, [r2, r3]
 80048c6:	0019      	movs	r1, r3
 80048c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80048ca:	f7fb fc25 	bl	8000118 <__udivsi3>
 80048ce:	0003      	movs	r3, r0
 80048d0:	001a      	movs	r2, r3
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	085b      	lsrs	r3, r3, #1
 80048d8:	18d2      	adds	r2, r2, r3
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	0019      	movs	r1, r3
 80048e0:	0010      	movs	r0, r2
 80048e2:	f7fb fc19 	bl	8000118 <__udivsi3>
 80048e6:	0003      	movs	r3, r0
 80048e8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ec:	2b0f      	cmp	r3, #15
 80048ee:	d90a      	bls.n	8004906 <UART_SetConfig+0x53a>
 80048f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	025b      	lsls	r3, r3, #9
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d205      	bcs.n	8004906 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60da      	str	r2, [r3, #12]
 8004904:	e005      	b.n	8004912 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004906:	231a      	movs	r3, #26
 8004908:	2220      	movs	r2, #32
 800490a:	189b      	adds	r3, r3, r2
 800490c:	19db      	adds	r3, r3, r7
 800490e:	2201      	movs	r2, #1
 8004910:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	226a      	movs	r2, #106	; 0x6a
 8004916:	2101      	movs	r1, #1
 8004918:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	2268      	movs	r2, #104	; 0x68
 800491e:	2101      	movs	r1, #1
 8004920:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	2200      	movs	r2, #0
 8004926:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	2200      	movs	r2, #0
 800492c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800492e:	231a      	movs	r3, #26
 8004930:	2220      	movs	r2, #32
 8004932:	189b      	adds	r3, r3, r2
 8004934:	19db      	adds	r3, r3, r7
 8004936:	781b      	ldrb	r3, [r3, #0]
}
 8004938:	0018      	movs	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	b010      	add	sp, #64	; 0x40
 800493e:	bdb0      	pop	{r4, r5, r7, pc}
 8004940:	08006178 	.word	0x08006178
 8004944:	00f42400 	.word	0x00f42400

08004948 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	2201      	movs	r2, #1
 8004956:	4013      	ands	r3, r2
 8004958:	d00b      	beq.n	8004972 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	4a4a      	ldr	r2, [pc, #296]	; (8004a8c <UART_AdvFeatureConfig+0x144>)
 8004962:	4013      	ands	r3, r2
 8004964:	0019      	movs	r1, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	2202      	movs	r2, #2
 8004978:	4013      	ands	r3, r2
 800497a:	d00b      	beq.n	8004994 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	4a43      	ldr	r2, [pc, #268]	; (8004a90 <UART_AdvFeatureConfig+0x148>)
 8004984:	4013      	ands	r3, r2
 8004986:	0019      	movs	r1, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004998:	2204      	movs	r2, #4
 800499a:	4013      	ands	r3, r2
 800499c:	d00b      	beq.n	80049b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4a3b      	ldr	r2, [pc, #236]	; (8004a94 <UART_AdvFeatureConfig+0x14c>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	0019      	movs	r1, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	2208      	movs	r2, #8
 80049bc:	4013      	ands	r3, r2
 80049be:	d00b      	beq.n	80049d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4a34      	ldr	r2, [pc, #208]	; (8004a98 <UART_AdvFeatureConfig+0x150>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	0019      	movs	r1, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	2210      	movs	r2, #16
 80049de:	4013      	ands	r3, r2
 80049e0:	d00b      	beq.n	80049fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	4a2c      	ldr	r2, [pc, #176]	; (8004a9c <UART_AdvFeatureConfig+0x154>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	0019      	movs	r1, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	2220      	movs	r2, #32
 8004a00:	4013      	ands	r3, r2
 8004a02:	d00b      	beq.n	8004a1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	4a25      	ldr	r2, [pc, #148]	; (8004aa0 <UART_AdvFeatureConfig+0x158>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	0019      	movs	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a20:	2240      	movs	r2, #64	; 0x40
 8004a22:	4013      	ands	r3, r2
 8004a24:	d01d      	beq.n	8004a62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <UART_AdvFeatureConfig+0x15c>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	0019      	movs	r1, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a42:	2380      	movs	r3, #128	; 0x80
 8004a44:	035b      	lsls	r3, r3, #13
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d10b      	bne.n	8004a62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	4a15      	ldr	r2, [pc, #84]	; (8004aa8 <UART_AdvFeatureConfig+0x160>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	0019      	movs	r1, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a66:	2280      	movs	r2, #128	; 0x80
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d00b      	beq.n	8004a84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	4a0e      	ldr	r2, [pc, #56]	; (8004aac <UART_AdvFeatureConfig+0x164>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	0019      	movs	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	605a      	str	r2, [r3, #4]
  }
}
 8004a84:	46c0      	nop			; (mov r8, r8)
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b002      	add	sp, #8
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	fffdffff 	.word	0xfffdffff
 8004a90:	fffeffff 	.word	0xfffeffff
 8004a94:	fffbffff 	.word	0xfffbffff
 8004a98:	ffff7fff 	.word	0xffff7fff
 8004a9c:	ffffefff 	.word	0xffffefff
 8004aa0:	ffffdfff 	.word	0xffffdfff
 8004aa4:	ffefffff 	.word	0xffefffff
 8004aa8:	ff9fffff 	.word	0xff9fffff
 8004aac:	fff7ffff 	.word	0xfff7ffff

08004ab0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2290      	movs	r2, #144	; 0x90
 8004abc:	2100      	movs	r1, #0
 8004abe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ac0:	f7fd fcbc 	bl	800243c <HAL_GetTick>
 8004ac4:	0003      	movs	r3, r0
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2208      	movs	r2, #8
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d10c      	bne.n	8004af0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2280      	movs	r2, #128	; 0x80
 8004ada:	0391      	lsls	r1, r2, #14
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <UART_CheckIdleState+0x98>)
 8004ae0:	9200      	str	r2, [sp, #0]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f000 f832 	bl	8004b4c <UART_WaitOnFlagUntilTimeout>
 8004ae8:	1e03      	subs	r3, r0, #0
 8004aea:	d001      	beq.n	8004af0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e026      	b.n	8004b3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2204      	movs	r2, #4
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d10c      	bne.n	8004b18 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2280      	movs	r2, #128	; 0x80
 8004b02:	03d1      	lsls	r1, r2, #15
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	4a10      	ldr	r2, [pc, #64]	; (8004b48 <UART_CheckIdleState+0x98>)
 8004b08:	9200      	str	r2, [sp, #0]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f000 f81e 	bl	8004b4c <UART_WaitOnFlagUntilTimeout>
 8004b10:	1e03      	subs	r3, r0, #0
 8004b12:	d001      	beq.n	8004b18 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e012      	b.n	8004b3e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2288      	movs	r2, #136	; 0x88
 8004b1c:	2120      	movs	r1, #32
 8004b1e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	228c      	movs	r2, #140	; 0x8c
 8004b24:	2120      	movs	r1, #32
 8004b26:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2284      	movs	r2, #132	; 0x84
 8004b38:	2100      	movs	r1, #0
 8004b3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b004      	add	sp, #16
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	01ffffff 	.word	0x01ffffff

08004b4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b094      	sub	sp, #80	; 0x50
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	1dfb      	adds	r3, r7, #7
 8004b5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b5c:	e0a7      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b60:	3301      	adds	r3, #1
 8004b62:	d100      	bne.n	8004b66 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004b64:	e0a3      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b66:	f7fd fc69 	bl	800243c <HAL_GetTick>
 8004b6a:	0002      	movs	r2, r0
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d302      	bcc.n	8004b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d13f      	bne.n	8004bfc <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b80:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b84:	647b      	str	r3, [r7, #68]	; 0x44
 8004b86:	2301      	movs	r3, #1
 8004b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	f383 8810 	msr	PRIMASK, r3
}
 8004b90:	46c0      	nop			; (mov r8, r8)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	494e      	ldr	r1, [pc, #312]	; (8004cd8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004b9e:	400a      	ands	r2, r1
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	f383 8810 	msr	PRIMASK, r3
}
 8004bac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bae:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb6:	643b      	str	r3, [r7, #64]	; 0x40
 8004bb8:	2301      	movs	r3, #1
 8004bba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbe:	f383 8810 	msr	PRIMASK, r3
}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2101      	movs	r1, #1
 8004bd0:	438a      	bics	r2, r1
 8004bd2:	609a      	str	r2, [r3, #8]
 8004bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bda:	f383 8810 	msr	PRIMASK, r3
}
 8004bde:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2288      	movs	r2, #136	; 0x88
 8004be4:	2120      	movs	r1, #32
 8004be6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	228c      	movs	r2, #140	; 0x8c
 8004bec:	2120      	movs	r1, #32
 8004bee:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2284      	movs	r2, #132	; 0x84
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e069      	b.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2204      	movs	r2, #4
 8004c04:	4013      	ands	r3, r2
 8004c06:	d052      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	2380      	movs	r3, #128	; 0x80
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	401a      	ands	r2, r3
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d148      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2280      	movs	r2, #128	; 0x80
 8004c22:	0112      	lsls	r2, r2, #4
 8004c24:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c26:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2a:	613b      	str	r3, [r7, #16]
  return(result);
 8004c2c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c30:	2301      	movs	r3, #1
 8004c32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f383 8810 	msr	PRIMASK, r3
}
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4924      	ldr	r1, [pc, #144]	; (8004cd8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004c48:	400a      	ands	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	f383 8810 	msr	PRIMASK, r3
}
 8004c56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c58:	f3ef 8310 	mrs	r3, PRIMASK
 8004c5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c5e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c60:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c62:	2301      	movs	r3, #1
 8004c64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	f383 8810 	msr	PRIMASK, r3
}
 8004c6c:	46c0      	nop			; (mov r8, r8)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2101      	movs	r1, #1
 8004c7a:	438a      	bics	r2, r1
 8004c7c:	609a      	str	r2, [r3, #8]
 8004c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	f383 8810 	msr	PRIMASK, r3
}
 8004c88:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2288      	movs	r2, #136	; 0x88
 8004c8e:	2120      	movs	r1, #32
 8004c90:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	228c      	movs	r2, #140	; 0x8c
 8004c96:	2120      	movs	r1, #32
 8004c98:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2290      	movs	r2, #144	; 0x90
 8004c9e:	2120      	movs	r1, #32
 8004ca0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2284      	movs	r2, #132	; 0x84
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e010      	b.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	425a      	negs	r2, r3
 8004cbe:	4153      	adcs	r3, r2
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	001a      	movs	r2, r3
 8004cc4:	1dfb      	adds	r3, r7, #7
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d100      	bne.n	8004cce <UART_WaitOnFlagUntilTimeout+0x182>
 8004ccc:	e747      	b.n	8004b5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b014      	add	sp, #80	; 0x50
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	fffffe5f 	.word	0xfffffe5f

08004cdc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2284      	movs	r2, #132	; 0x84
 8004ce8:	5c9b      	ldrb	r3, [r3, r2]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_UARTEx_DisableFifoMode+0x16>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e027      	b.n	8004d42 <HAL_UARTEx_DisableFifoMode+0x66>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2284      	movs	r2, #132	; 0x84
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2288      	movs	r2, #136	; 0x88
 8004cfe:	2124      	movs	r1, #36	; 0x24
 8004d00:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2101      	movs	r1, #1
 8004d16:	438a      	bics	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4a0b      	ldr	r2, [pc, #44]	; (8004d4c <HAL_UARTEx_DisableFifoMode+0x70>)
 8004d1e:	4013      	ands	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2288      	movs	r2, #136	; 0x88
 8004d34:	2120      	movs	r1, #32
 8004d36:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2284      	movs	r2, #132	; 0x84
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	0018      	movs	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b004      	add	sp, #16
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	dfffffff 	.word	0xdfffffff

08004d50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2284      	movs	r2, #132	; 0x84
 8004d5e:	5c9b      	ldrb	r3, [r3, r2]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e02e      	b.n	8004dc6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2284      	movs	r2, #132	; 0x84
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2288      	movs	r2, #136	; 0x88
 8004d74:	2124      	movs	r1, #36	; 0x24
 8004d76:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	438a      	bics	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	08d9      	lsrs	r1, r3, #3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	0018      	movs	r0, r3
 8004da8:	f000 f854 	bl	8004e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2288      	movs	r2, #136	; 0x88
 8004db8:	2120      	movs	r1, #32
 8004dba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2284      	movs	r2, #132	; 0x84
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	b004      	add	sp, #16
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2284      	movs	r2, #132	; 0x84
 8004dde:	5c9b      	ldrb	r3, [r3, r2]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e02f      	b.n	8004e48 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2284      	movs	r2, #132	; 0x84
 8004dec:	2101      	movs	r1, #1
 8004dee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2288      	movs	r2, #136	; 0x88
 8004df4:	2124      	movs	r1, #36	; 0x24
 8004df6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	438a      	bics	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	4a0e      	ldr	r2, [pc, #56]	; (8004e50 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	0019      	movs	r1, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f000 f813 	bl	8004e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2288      	movs	r2, #136	; 0x88
 8004e3a:	2120      	movs	r1, #32
 8004e3c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2284      	movs	r2, #132	; 0x84
 8004e42:	2100      	movs	r1, #0
 8004e44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	0018      	movs	r0, r3
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	b004      	add	sp, #16
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	f1ffffff 	.word	0xf1ffffff

08004e54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d108      	bne.n	8004e76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	226a      	movs	r2, #106	; 0x6a
 8004e68:	2101      	movs	r1, #1
 8004e6a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2268      	movs	r2, #104	; 0x68
 8004e70:	2101      	movs	r1, #1
 8004e72:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e74:	e043      	b.n	8004efe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e76:	260f      	movs	r6, #15
 8004e78:	19bb      	adds	r3, r7, r6
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e7e:	200e      	movs	r0, #14
 8004e80:	183b      	adds	r3, r7, r0
 8004e82:	2208      	movs	r2, #8
 8004e84:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	0e5b      	lsrs	r3, r3, #25
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	240d      	movs	r4, #13
 8004e92:	193b      	adds	r3, r7, r4
 8004e94:	2107      	movs	r1, #7
 8004e96:	400a      	ands	r2, r1
 8004e98:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	0f5b      	lsrs	r3, r3, #29
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	250c      	movs	r5, #12
 8004ea6:	197b      	adds	r3, r7, r5
 8004ea8:	2107      	movs	r1, #7
 8004eaa:	400a      	ands	r2, r1
 8004eac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004eae:	183b      	adds	r3, r7, r0
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	197a      	adds	r2, r7, r5
 8004eb4:	7812      	ldrb	r2, [r2, #0]
 8004eb6:	4914      	ldr	r1, [pc, #80]	; (8004f08 <UARTEx_SetNbDataToProcess+0xb4>)
 8004eb8:	5c8a      	ldrb	r2, [r1, r2]
 8004eba:	435a      	muls	r2, r3
 8004ebc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ebe:	197b      	adds	r3, r7, r5
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	4a12      	ldr	r2, [pc, #72]	; (8004f0c <UARTEx_SetNbDataToProcess+0xb8>)
 8004ec4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ec6:	0019      	movs	r1, r3
 8004ec8:	f7fb f9b0 	bl	800022c <__divsi3>
 8004ecc:	0003      	movs	r3, r0
 8004ece:	b299      	uxth	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	226a      	movs	r2, #106	; 0x6a
 8004ed4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ed6:	19bb      	adds	r3, r7, r6
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	193a      	adds	r2, r7, r4
 8004edc:	7812      	ldrb	r2, [r2, #0]
 8004ede:	490a      	ldr	r1, [pc, #40]	; (8004f08 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ee0:	5c8a      	ldrb	r2, [r1, r2]
 8004ee2:	435a      	muls	r2, r3
 8004ee4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ee6:	193b      	adds	r3, r7, r4
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <UARTEx_SetNbDataToProcess+0xb8>)
 8004eec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004eee:	0019      	movs	r1, r3
 8004ef0:	f7fb f99c 	bl	800022c <__divsi3>
 8004ef4:	0003      	movs	r3, r0
 8004ef6:	b299      	uxth	r1, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2268      	movs	r2, #104	; 0x68
 8004efc:	5299      	strh	r1, [r3, r2]
}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b005      	add	sp, #20
 8004f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	08006190 	.word	0x08006190
 8004f0c:	08006198 	.word	0x08006198

08004f10 <__errno>:
 8004f10:	4b01      	ldr	r3, [pc, #4]	; (8004f18 <__errno+0x8>)
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	4770      	bx	lr
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	20000010 	.word	0x20000010

08004f1c <__libc_init_array>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	2600      	movs	r6, #0
 8004f20:	4d0c      	ldr	r5, [pc, #48]	; (8004f54 <__libc_init_array+0x38>)
 8004f22:	4c0d      	ldr	r4, [pc, #52]	; (8004f58 <__libc_init_array+0x3c>)
 8004f24:	1b64      	subs	r4, r4, r5
 8004f26:	10a4      	asrs	r4, r4, #2
 8004f28:	42a6      	cmp	r6, r4
 8004f2a:	d109      	bne.n	8004f40 <__libc_init_array+0x24>
 8004f2c:	2600      	movs	r6, #0
 8004f2e:	f001 f8b1 	bl	8006094 <_init>
 8004f32:	4d0a      	ldr	r5, [pc, #40]	; (8004f5c <__libc_init_array+0x40>)
 8004f34:	4c0a      	ldr	r4, [pc, #40]	; (8004f60 <__libc_init_array+0x44>)
 8004f36:	1b64      	subs	r4, r4, r5
 8004f38:	10a4      	asrs	r4, r4, #2
 8004f3a:	42a6      	cmp	r6, r4
 8004f3c:	d105      	bne.n	8004f4a <__libc_init_array+0x2e>
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	00b3      	lsls	r3, r6, #2
 8004f42:	58eb      	ldr	r3, [r5, r3]
 8004f44:	4798      	blx	r3
 8004f46:	3601      	adds	r6, #1
 8004f48:	e7ee      	b.n	8004f28 <__libc_init_array+0xc>
 8004f4a:	00b3      	lsls	r3, r6, #2
 8004f4c:	58eb      	ldr	r3, [r5, r3]
 8004f4e:	4798      	blx	r3
 8004f50:	3601      	adds	r6, #1
 8004f52:	e7f2      	b.n	8004f3a <__libc_init_array+0x1e>
 8004f54:	080062f0 	.word	0x080062f0
 8004f58:	080062f0 	.word	0x080062f0
 8004f5c:	080062f0 	.word	0x080062f0
 8004f60:	080062f4 	.word	0x080062f4

08004f64 <memcpy>:
 8004f64:	2300      	movs	r3, #0
 8004f66:	b510      	push	{r4, lr}
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d100      	bne.n	8004f6e <memcpy+0xa>
 8004f6c:	bd10      	pop	{r4, pc}
 8004f6e:	5ccc      	ldrb	r4, [r1, r3]
 8004f70:	54c4      	strb	r4, [r0, r3]
 8004f72:	3301      	adds	r3, #1
 8004f74:	e7f8      	b.n	8004f68 <memcpy+0x4>

08004f76 <memset>:
 8004f76:	0003      	movs	r3, r0
 8004f78:	1882      	adds	r2, r0, r2
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d100      	bne.n	8004f80 <memset+0xa>
 8004f7e:	4770      	bx	lr
 8004f80:	7019      	strb	r1, [r3, #0]
 8004f82:	3301      	adds	r3, #1
 8004f84:	e7f9      	b.n	8004f7a <memset+0x4>
	...

08004f88 <rand>:
 8004f88:	4b16      	ldr	r3, [pc, #88]	; (8004fe4 <rand+0x5c>)
 8004f8a:	b510      	push	{r4, lr}
 8004f8c:	681c      	ldr	r4, [r3, #0]
 8004f8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d116      	bne.n	8004fc2 <rand+0x3a>
 8004f94:	2018      	movs	r0, #24
 8004f96:	f000 f863 	bl	8005060 <malloc>
 8004f9a:	1e02      	subs	r2, r0, #0
 8004f9c:	63a0      	str	r0, [r4, #56]	; 0x38
 8004f9e:	d104      	bne.n	8004faa <rand+0x22>
 8004fa0:	214e      	movs	r1, #78	; 0x4e
 8004fa2:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <rand+0x60>)
 8004fa4:	4811      	ldr	r0, [pc, #68]	; (8004fec <rand+0x64>)
 8004fa6:	f000 f82d 	bl	8005004 <__assert_func>
 8004faa:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <rand+0x68>)
 8004fac:	2100      	movs	r1, #0
 8004fae:	6003      	str	r3, [r0, #0]
 8004fb0:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <rand+0x6c>)
 8004fb2:	6043      	str	r3, [r0, #4]
 8004fb4:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <rand+0x70>)
 8004fb6:	6083      	str	r3, [r0, #8]
 8004fb8:	230b      	movs	r3, #11
 8004fba:	8183      	strh	r3, [r0, #12]
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	6110      	str	r0, [r2, #16]
 8004fc0:	6151      	str	r1, [r2, #20]
 8004fc2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004fc4:	4a0d      	ldr	r2, [pc, #52]	; (8004ffc <rand+0x74>)
 8004fc6:	6920      	ldr	r0, [r4, #16]
 8004fc8:	6961      	ldr	r1, [r4, #20]
 8004fca:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <rand+0x78>)
 8004fcc:	f7fb fa3a 	bl	8000444 <__aeabi_lmul>
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	1880      	adds	r0, r0, r2
 8004fd6:	4159      	adcs	r1, r3
 8004fd8:	6120      	str	r0, [r4, #16]
 8004fda:	6161      	str	r1, [r4, #20]
 8004fdc:	0048      	lsls	r0, r1, #1
 8004fde:	0840      	lsrs	r0, r0, #1
 8004fe0:	bd10      	pop	{r4, pc}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	20000010 	.word	0x20000010
 8004fe8:	080061a4 	.word	0x080061a4
 8004fec:	080061bb 	.word	0x080061bb
 8004ff0:	abcd330e 	.word	0xabcd330e
 8004ff4:	e66d1234 	.word	0xe66d1234
 8004ff8:	0005deec 	.word	0x0005deec
 8004ffc:	4c957f2d 	.word	0x4c957f2d
 8005000:	5851f42d 	.word	0x5851f42d

08005004 <__assert_func>:
 8005004:	b530      	push	{r4, r5, lr}
 8005006:	0014      	movs	r4, r2
 8005008:	001a      	movs	r2, r3
 800500a:	4b09      	ldr	r3, [pc, #36]	; (8005030 <__assert_func+0x2c>)
 800500c:	0005      	movs	r5, r0
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	b085      	sub	sp, #20
 8005012:	68d8      	ldr	r0, [r3, #12]
 8005014:	4b07      	ldr	r3, [pc, #28]	; (8005034 <__assert_func+0x30>)
 8005016:	2c00      	cmp	r4, #0
 8005018:	d101      	bne.n	800501e <__assert_func+0x1a>
 800501a:	4b07      	ldr	r3, [pc, #28]	; (8005038 <__assert_func+0x34>)
 800501c:	001c      	movs	r4, r3
 800501e:	9301      	str	r3, [sp, #4]
 8005020:	9100      	str	r1, [sp, #0]
 8005022:	002b      	movs	r3, r5
 8005024:	4905      	ldr	r1, [pc, #20]	; (800503c <__assert_func+0x38>)
 8005026:	9402      	str	r4, [sp, #8]
 8005028:	f000 f80a 	bl	8005040 <fiprintf>
 800502c:	f000 fcc8 	bl	80059c0 <abort>
 8005030:	20000010 	.word	0x20000010
 8005034:	08006216 	.word	0x08006216
 8005038:	08006251 	.word	0x08006251
 800503c:	08006223 	.word	0x08006223

08005040 <fiprintf>:
 8005040:	b40e      	push	{r1, r2, r3}
 8005042:	b503      	push	{r0, r1, lr}
 8005044:	0001      	movs	r1, r0
 8005046:	ab03      	add	r3, sp, #12
 8005048:	4804      	ldr	r0, [pc, #16]	; (800505c <fiprintf+0x1c>)
 800504a:	cb04      	ldmia	r3!, {r2}
 800504c:	6800      	ldr	r0, [r0, #0]
 800504e:	9301      	str	r3, [sp, #4]
 8005050:	f000 f91a 	bl	8005288 <_vfiprintf_r>
 8005054:	b002      	add	sp, #8
 8005056:	bc08      	pop	{r3}
 8005058:	b003      	add	sp, #12
 800505a:	4718      	bx	r3
 800505c:	20000010 	.word	0x20000010

08005060 <malloc>:
 8005060:	b510      	push	{r4, lr}
 8005062:	4b03      	ldr	r3, [pc, #12]	; (8005070 <malloc+0x10>)
 8005064:	0001      	movs	r1, r0
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	f000 f870 	bl	800514c <_malloc_r>
 800506c:	bd10      	pop	{r4, pc}
 800506e:	46c0      	nop			; (mov r8, r8)
 8005070:	20000010 	.word	0x20000010

08005074 <_free_r>:
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	0005      	movs	r5, r0
 8005078:	2900      	cmp	r1, #0
 800507a:	d010      	beq.n	800509e <_free_r+0x2a>
 800507c:	1f0c      	subs	r4, r1, #4
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	da00      	bge.n	8005086 <_free_r+0x12>
 8005084:	18e4      	adds	r4, r4, r3
 8005086:	0028      	movs	r0, r5
 8005088:	f000 feec 	bl	8005e64 <__malloc_lock>
 800508c:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <_free_r+0x90>)
 800508e:	6813      	ldr	r3, [r2, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d105      	bne.n	80050a0 <_free_r+0x2c>
 8005094:	6063      	str	r3, [r4, #4]
 8005096:	6014      	str	r4, [r2, #0]
 8005098:	0028      	movs	r0, r5
 800509a:	f000 feeb 	bl	8005e74 <__malloc_unlock>
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	42a3      	cmp	r3, r4
 80050a2:	d908      	bls.n	80050b6 <_free_r+0x42>
 80050a4:	6821      	ldr	r1, [r4, #0]
 80050a6:	1860      	adds	r0, r4, r1
 80050a8:	4283      	cmp	r3, r0
 80050aa:	d1f3      	bne.n	8005094 <_free_r+0x20>
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	1841      	adds	r1, r0, r1
 80050b2:	6021      	str	r1, [r4, #0]
 80050b4:	e7ee      	b.n	8005094 <_free_r+0x20>
 80050b6:	001a      	movs	r2, r3
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <_free_r+0x4e>
 80050be:	42a3      	cmp	r3, r4
 80050c0:	d9f9      	bls.n	80050b6 <_free_r+0x42>
 80050c2:	6811      	ldr	r1, [r2, #0]
 80050c4:	1850      	adds	r0, r2, r1
 80050c6:	42a0      	cmp	r0, r4
 80050c8:	d10b      	bne.n	80050e2 <_free_r+0x6e>
 80050ca:	6820      	ldr	r0, [r4, #0]
 80050cc:	1809      	adds	r1, r1, r0
 80050ce:	1850      	adds	r0, r2, r1
 80050d0:	6011      	str	r1, [r2, #0]
 80050d2:	4283      	cmp	r3, r0
 80050d4:	d1e0      	bne.n	8005098 <_free_r+0x24>
 80050d6:	6818      	ldr	r0, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	1841      	adds	r1, r0, r1
 80050dc:	6011      	str	r1, [r2, #0]
 80050de:	6053      	str	r3, [r2, #4]
 80050e0:	e7da      	b.n	8005098 <_free_r+0x24>
 80050e2:	42a0      	cmp	r0, r4
 80050e4:	d902      	bls.n	80050ec <_free_r+0x78>
 80050e6:	230c      	movs	r3, #12
 80050e8:	602b      	str	r3, [r5, #0]
 80050ea:	e7d5      	b.n	8005098 <_free_r+0x24>
 80050ec:	6821      	ldr	r1, [r4, #0]
 80050ee:	1860      	adds	r0, r4, r1
 80050f0:	4283      	cmp	r3, r0
 80050f2:	d103      	bne.n	80050fc <_free_r+0x88>
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	1841      	adds	r1, r0, r1
 80050fa:	6021      	str	r1, [r4, #0]
 80050fc:	6063      	str	r3, [r4, #4]
 80050fe:	6054      	str	r4, [r2, #4]
 8005100:	e7ca      	b.n	8005098 <_free_r+0x24>
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	20000260 	.word	0x20000260

08005108 <sbrk_aligned>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	4e0f      	ldr	r6, [pc, #60]	; (8005148 <sbrk_aligned+0x40>)
 800510c:	000d      	movs	r5, r1
 800510e:	6831      	ldr	r1, [r6, #0]
 8005110:	0004      	movs	r4, r0
 8005112:	2900      	cmp	r1, #0
 8005114:	d102      	bne.n	800511c <sbrk_aligned+0x14>
 8005116:	f000 fb73 	bl	8005800 <_sbrk_r>
 800511a:	6030      	str	r0, [r6, #0]
 800511c:	0029      	movs	r1, r5
 800511e:	0020      	movs	r0, r4
 8005120:	f000 fb6e 	bl	8005800 <_sbrk_r>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d00a      	beq.n	800513e <sbrk_aligned+0x36>
 8005128:	2303      	movs	r3, #3
 800512a:	1cc5      	adds	r5, r0, #3
 800512c:	439d      	bics	r5, r3
 800512e:	42a8      	cmp	r0, r5
 8005130:	d007      	beq.n	8005142 <sbrk_aligned+0x3a>
 8005132:	1a29      	subs	r1, r5, r0
 8005134:	0020      	movs	r0, r4
 8005136:	f000 fb63 	bl	8005800 <_sbrk_r>
 800513a:	1c43      	adds	r3, r0, #1
 800513c:	d101      	bne.n	8005142 <sbrk_aligned+0x3a>
 800513e:	2501      	movs	r5, #1
 8005140:	426d      	negs	r5, r5
 8005142:	0028      	movs	r0, r5
 8005144:	bd70      	pop	{r4, r5, r6, pc}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	20000264 	.word	0x20000264

0800514c <_malloc_r>:
 800514c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800514e:	2203      	movs	r2, #3
 8005150:	1ccb      	adds	r3, r1, #3
 8005152:	4393      	bics	r3, r2
 8005154:	3308      	adds	r3, #8
 8005156:	0006      	movs	r6, r0
 8005158:	001f      	movs	r7, r3
 800515a:	2b0c      	cmp	r3, #12
 800515c:	d232      	bcs.n	80051c4 <_malloc_r+0x78>
 800515e:	270c      	movs	r7, #12
 8005160:	42b9      	cmp	r1, r7
 8005162:	d831      	bhi.n	80051c8 <_malloc_r+0x7c>
 8005164:	0030      	movs	r0, r6
 8005166:	f000 fe7d 	bl	8005e64 <__malloc_lock>
 800516a:	4d32      	ldr	r5, [pc, #200]	; (8005234 <_malloc_r+0xe8>)
 800516c:	682b      	ldr	r3, [r5, #0]
 800516e:	001c      	movs	r4, r3
 8005170:	2c00      	cmp	r4, #0
 8005172:	d12e      	bne.n	80051d2 <_malloc_r+0x86>
 8005174:	0039      	movs	r1, r7
 8005176:	0030      	movs	r0, r6
 8005178:	f7ff ffc6 	bl	8005108 <sbrk_aligned>
 800517c:	0004      	movs	r4, r0
 800517e:	1c43      	adds	r3, r0, #1
 8005180:	d11e      	bne.n	80051c0 <_malloc_r+0x74>
 8005182:	682c      	ldr	r4, [r5, #0]
 8005184:	0025      	movs	r5, r4
 8005186:	2d00      	cmp	r5, #0
 8005188:	d14a      	bne.n	8005220 <_malloc_r+0xd4>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	0029      	movs	r1, r5
 800518e:	18e3      	adds	r3, r4, r3
 8005190:	0030      	movs	r0, r6
 8005192:	9301      	str	r3, [sp, #4]
 8005194:	f000 fb34 	bl	8005800 <_sbrk_r>
 8005198:	9b01      	ldr	r3, [sp, #4]
 800519a:	4283      	cmp	r3, r0
 800519c:	d143      	bne.n	8005226 <_malloc_r+0xda>
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	3703      	adds	r7, #3
 80051a2:	1aff      	subs	r7, r7, r3
 80051a4:	2303      	movs	r3, #3
 80051a6:	439f      	bics	r7, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	2f0c      	cmp	r7, #12
 80051ac:	d200      	bcs.n	80051b0 <_malloc_r+0x64>
 80051ae:	270c      	movs	r7, #12
 80051b0:	0039      	movs	r1, r7
 80051b2:	0030      	movs	r0, r6
 80051b4:	f7ff ffa8 	bl	8005108 <sbrk_aligned>
 80051b8:	1c43      	adds	r3, r0, #1
 80051ba:	d034      	beq.n	8005226 <_malloc_r+0xda>
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	19df      	adds	r7, r3, r7
 80051c0:	6027      	str	r7, [r4, #0]
 80051c2:	e013      	b.n	80051ec <_malloc_r+0xa0>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	dacb      	bge.n	8005160 <_malloc_r+0x14>
 80051c8:	230c      	movs	r3, #12
 80051ca:	2500      	movs	r5, #0
 80051cc:	6033      	str	r3, [r6, #0]
 80051ce:	0028      	movs	r0, r5
 80051d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051d2:	6822      	ldr	r2, [r4, #0]
 80051d4:	1bd1      	subs	r1, r2, r7
 80051d6:	d420      	bmi.n	800521a <_malloc_r+0xce>
 80051d8:	290b      	cmp	r1, #11
 80051da:	d917      	bls.n	800520c <_malloc_r+0xc0>
 80051dc:	19e2      	adds	r2, r4, r7
 80051de:	6027      	str	r7, [r4, #0]
 80051e0:	42a3      	cmp	r3, r4
 80051e2:	d111      	bne.n	8005208 <_malloc_r+0xbc>
 80051e4:	602a      	str	r2, [r5, #0]
 80051e6:	6863      	ldr	r3, [r4, #4]
 80051e8:	6011      	str	r1, [r2, #0]
 80051ea:	6053      	str	r3, [r2, #4]
 80051ec:	0030      	movs	r0, r6
 80051ee:	0025      	movs	r5, r4
 80051f0:	f000 fe40 	bl	8005e74 <__malloc_unlock>
 80051f4:	2207      	movs	r2, #7
 80051f6:	350b      	adds	r5, #11
 80051f8:	1d23      	adds	r3, r4, #4
 80051fa:	4395      	bics	r5, r2
 80051fc:	1aea      	subs	r2, r5, r3
 80051fe:	429d      	cmp	r5, r3
 8005200:	d0e5      	beq.n	80051ce <_malloc_r+0x82>
 8005202:	1b5b      	subs	r3, r3, r5
 8005204:	50a3      	str	r3, [r4, r2]
 8005206:	e7e2      	b.n	80051ce <_malloc_r+0x82>
 8005208:	605a      	str	r2, [r3, #4]
 800520a:	e7ec      	b.n	80051e6 <_malloc_r+0x9a>
 800520c:	6862      	ldr	r2, [r4, #4]
 800520e:	42a3      	cmp	r3, r4
 8005210:	d101      	bne.n	8005216 <_malloc_r+0xca>
 8005212:	602a      	str	r2, [r5, #0]
 8005214:	e7ea      	b.n	80051ec <_malloc_r+0xa0>
 8005216:	605a      	str	r2, [r3, #4]
 8005218:	e7e8      	b.n	80051ec <_malloc_r+0xa0>
 800521a:	0023      	movs	r3, r4
 800521c:	6864      	ldr	r4, [r4, #4]
 800521e:	e7a7      	b.n	8005170 <_malloc_r+0x24>
 8005220:	002c      	movs	r4, r5
 8005222:	686d      	ldr	r5, [r5, #4]
 8005224:	e7af      	b.n	8005186 <_malloc_r+0x3a>
 8005226:	230c      	movs	r3, #12
 8005228:	0030      	movs	r0, r6
 800522a:	6033      	str	r3, [r6, #0]
 800522c:	f000 fe22 	bl	8005e74 <__malloc_unlock>
 8005230:	e7cd      	b.n	80051ce <_malloc_r+0x82>
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	20000260 	.word	0x20000260

08005238 <__sfputc_r>:
 8005238:	6893      	ldr	r3, [r2, #8]
 800523a:	b510      	push	{r4, lr}
 800523c:	3b01      	subs	r3, #1
 800523e:	6093      	str	r3, [r2, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	da04      	bge.n	800524e <__sfputc_r+0x16>
 8005244:	6994      	ldr	r4, [r2, #24]
 8005246:	42a3      	cmp	r3, r4
 8005248:	db07      	blt.n	800525a <__sfputc_r+0x22>
 800524a:	290a      	cmp	r1, #10
 800524c:	d005      	beq.n	800525a <__sfputc_r+0x22>
 800524e:	6813      	ldr	r3, [r2, #0]
 8005250:	1c58      	adds	r0, r3, #1
 8005252:	6010      	str	r0, [r2, #0]
 8005254:	7019      	strb	r1, [r3, #0]
 8005256:	0008      	movs	r0, r1
 8005258:	bd10      	pop	{r4, pc}
 800525a:	f000 fae3 	bl	8005824 <__swbuf_r>
 800525e:	0001      	movs	r1, r0
 8005260:	e7f9      	b.n	8005256 <__sfputc_r+0x1e>

08005262 <__sfputs_r>:
 8005262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005264:	0006      	movs	r6, r0
 8005266:	000f      	movs	r7, r1
 8005268:	0014      	movs	r4, r2
 800526a:	18d5      	adds	r5, r2, r3
 800526c:	42ac      	cmp	r4, r5
 800526e:	d101      	bne.n	8005274 <__sfputs_r+0x12>
 8005270:	2000      	movs	r0, #0
 8005272:	e007      	b.n	8005284 <__sfputs_r+0x22>
 8005274:	7821      	ldrb	r1, [r4, #0]
 8005276:	003a      	movs	r2, r7
 8005278:	0030      	movs	r0, r6
 800527a:	f7ff ffdd 	bl	8005238 <__sfputc_r>
 800527e:	3401      	adds	r4, #1
 8005280:	1c43      	adds	r3, r0, #1
 8005282:	d1f3      	bne.n	800526c <__sfputs_r+0xa>
 8005284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005288 <_vfiprintf_r>:
 8005288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800528a:	b0a1      	sub	sp, #132	; 0x84
 800528c:	0006      	movs	r6, r0
 800528e:	000c      	movs	r4, r1
 8005290:	001f      	movs	r7, r3
 8005292:	9203      	str	r2, [sp, #12]
 8005294:	2800      	cmp	r0, #0
 8005296:	d004      	beq.n	80052a2 <_vfiprintf_r+0x1a>
 8005298:	6983      	ldr	r3, [r0, #24]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <_vfiprintf_r+0x1a>
 800529e:	f000 fcc5 	bl	8005c2c <__sinit>
 80052a2:	4b8e      	ldr	r3, [pc, #568]	; (80054dc <_vfiprintf_r+0x254>)
 80052a4:	429c      	cmp	r4, r3
 80052a6:	d11c      	bne.n	80052e2 <_vfiprintf_r+0x5a>
 80052a8:	6874      	ldr	r4, [r6, #4]
 80052aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052ac:	07db      	lsls	r3, r3, #31
 80052ae:	d405      	bmi.n	80052bc <_vfiprintf_r+0x34>
 80052b0:	89a3      	ldrh	r3, [r4, #12]
 80052b2:	059b      	lsls	r3, r3, #22
 80052b4:	d402      	bmi.n	80052bc <_vfiprintf_r+0x34>
 80052b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052b8:	f000 fd59 	bl	8005d6e <__retarget_lock_acquire_recursive>
 80052bc:	89a3      	ldrh	r3, [r4, #12]
 80052be:	071b      	lsls	r3, r3, #28
 80052c0:	d502      	bpl.n	80052c8 <_vfiprintf_r+0x40>
 80052c2:	6923      	ldr	r3, [r4, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d11d      	bne.n	8005304 <_vfiprintf_r+0x7c>
 80052c8:	0021      	movs	r1, r4
 80052ca:	0030      	movs	r0, r6
 80052cc:	f000 fb00 	bl	80058d0 <__swsetup_r>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d017      	beq.n	8005304 <_vfiprintf_r+0x7c>
 80052d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052d6:	07db      	lsls	r3, r3, #31
 80052d8:	d50d      	bpl.n	80052f6 <_vfiprintf_r+0x6e>
 80052da:	2001      	movs	r0, #1
 80052dc:	4240      	negs	r0, r0
 80052de:	b021      	add	sp, #132	; 0x84
 80052e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052e2:	4b7f      	ldr	r3, [pc, #508]	; (80054e0 <_vfiprintf_r+0x258>)
 80052e4:	429c      	cmp	r4, r3
 80052e6:	d101      	bne.n	80052ec <_vfiprintf_r+0x64>
 80052e8:	68b4      	ldr	r4, [r6, #8]
 80052ea:	e7de      	b.n	80052aa <_vfiprintf_r+0x22>
 80052ec:	4b7d      	ldr	r3, [pc, #500]	; (80054e4 <_vfiprintf_r+0x25c>)
 80052ee:	429c      	cmp	r4, r3
 80052f0:	d1db      	bne.n	80052aa <_vfiprintf_r+0x22>
 80052f2:	68f4      	ldr	r4, [r6, #12]
 80052f4:	e7d9      	b.n	80052aa <_vfiprintf_r+0x22>
 80052f6:	89a3      	ldrh	r3, [r4, #12]
 80052f8:	059b      	lsls	r3, r3, #22
 80052fa:	d4ee      	bmi.n	80052da <_vfiprintf_r+0x52>
 80052fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052fe:	f000 fd37 	bl	8005d70 <__retarget_lock_release_recursive>
 8005302:	e7ea      	b.n	80052da <_vfiprintf_r+0x52>
 8005304:	2300      	movs	r3, #0
 8005306:	ad08      	add	r5, sp, #32
 8005308:	616b      	str	r3, [r5, #20]
 800530a:	3320      	adds	r3, #32
 800530c:	766b      	strb	r3, [r5, #25]
 800530e:	3310      	adds	r3, #16
 8005310:	76ab      	strb	r3, [r5, #26]
 8005312:	9707      	str	r7, [sp, #28]
 8005314:	9f03      	ldr	r7, [sp, #12]
 8005316:	783b      	ldrb	r3, [r7, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <_vfiprintf_r+0x98>
 800531c:	2b25      	cmp	r3, #37	; 0x25
 800531e:	d14e      	bne.n	80053be <_vfiprintf_r+0x136>
 8005320:	9b03      	ldr	r3, [sp, #12]
 8005322:	1afb      	subs	r3, r7, r3
 8005324:	9305      	str	r3, [sp, #20]
 8005326:	9b03      	ldr	r3, [sp, #12]
 8005328:	429f      	cmp	r7, r3
 800532a:	d00d      	beq.n	8005348 <_vfiprintf_r+0xc0>
 800532c:	9b05      	ldr	r3, [sp, #20]
 800532e:	0021      	movs	r1, r4
 8005330:	0030      	movs	r0, r6
 8005332:	9a03      	ldr	r2, [sp, #12]
 8005334:	f7ff ff95 	bl	8005262 <__sfputs_r>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d100      	bne.n	800533e <_vfiprintf_r+0xb6>
 800533c:	e0b5      	b.n	80054aa <_vfiprintf_r+0x222>
 800533e:	696a      	ldr	r2, [r5, #20]
 8005340:	9b05      	ldr	r3, [sp, #20]
 8005342:	4694      	mov	ip, r2
 8005344:	4463      	add	r3, ip
 8005346:	616b      	str	r3, [r5, #20]
 8005348:	783b      	ldrb	r3, [r7, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d100      	bne.n	8005350 <_vfiprintf_r+0xc8>
 800534e:	e0ac      	b.n	80054aa <_vfiprintf_r+0x222>
 8005350:	2201      	movs	r2, #1
 8005352:	1c7b      	adds	r3, r7, #1
 8005354:	9303      	str	r3, [sp, #12]
 8005356:	2300      	movs	r3, #0
 8005358:	4252      	negs	r2, r2
 800535a:	606a      	str	r2, [r5, #4]
 800535c:	a904      	add	r1, sp, #16
 800535e:	3254      	adds	r2, #84	; 0x54
 8005360:	1852      	adds	r2, r2, r1
 8005362:	602b      	str	r3, [r5, #0]
 8005364:	60eb      	str	r3, [r5, #12]
 8005366:	60ab      	str	r3, [r5, #8]
 8005368:	7013      	strb	r3, [r2, #0]
 800536a:	65ab      	str	r3, [r5, #88]	; 0x58
 800536c:	9b03      	ldr	r3, [sp, #12]
 800536e:	2205      	movs	r2, #5
 8005370:	7819      	ldrb	r1, [r3, #0]
 8005372:	485d      	ldr	r0, [pc, #372]	; (80054e8 <_vfiprintf_r+0x260>)
 8005374:	f000 fd6a 	bl	8005e4c <memchr>
 8005378:	9b03      	ldr	r3, [sp, #12]
 800537a:	1c5f      	adds	r7, r3, #1
 800537c:	2800      	cmp	r0, #0
 800537e:	d120      	bne.n	80053c2 <_vfiprintf_r+0x13a>
 8005380:	682a      	ldr	r2, [r5, #0]
 8005382:	06d3      	lsls	r3, r2, #27
 8005384:	d504      	bpl.n	8005390 <_vfiprintf_r+0x108>
 8005386:	2353      	movs	r3, #83	; 0x53
 8005388:	a904      	add	r1, sp, #16
 800538a:	185b      	adds	r3, r3, r1
 800538c:	2120      	movs	r1, #32
 800538e:	7019      	strb	r1, [r3, #0]
 8005390:	0713      	lsls	r3, r2, #28
 8005392:	d504      	bpl.n	800539e <_vfiprintf_r+0x116>
 8005394:	2353      	movs	r3, #83	; 0x53
 8005396:	a904      	add	r1, sp, #16
 8005398:	185b      	adds	r3, r3, r1
 800539a:	212b      	movs	r1, #43	; 0x2b
 800539c:	7019      	strb	r1, [r3, #0]
 800539e:	9b03      	ldr	r3, [sp, #12]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	2b2a      	cmp	r3, #42	; 0x2a
 80053a4:	d016      	beq.n	80053d4 <_vfiprintf_r+0x14c>
 80053a6:	2100      	movs	r1, #0
 80053a8:	68eb      	ldr	r3, [r5, #12]
 80053aa:	9f03      	ldr	r7, [sp, #12]
 80053ac:	783a      	ldrb	r2, [r7, #0]
 80053ae:	1c78      	adds	r0, r7, #1
 80053b0:	3a30      	subs	r2, #48	; 0x30
 80053b2:	4684      	mov	ip, r0
 80053b4:	2a09      	cmp	r2, #9
 80053b6:	d94f      	bls.n	8005458 <_vfiprintf_r+0x1d0>
 80053b8:	2900      	cmp	r1, #0
 80053ba:	d111      	bne.n	80053e0 <_vfiprintf_r+0x158>
 80053bc:	e017      	b.n	80053ee <_vfiprintf_r+0x166>
 80053be:	3701      	adds	r7, #1
 80053c0:	e7a9      	b.n	8005316 <_vfiprintf_r+0x8e>
 80053c2:	4b49      	ldr	r3, [pc, #292]	; (80054e8 <_vfiprintf_r+0x260>)
 80053c4:	682a      	ldr	r2, [r5, #0]
 80053c6:	1ac0      	subs	r0, r0, r3
 80053c8:	2301      	movs	r3, #1
 80053ca:	4083      	lsls	r3, r0
 80053cc:	4313      	orrs	r3, r2
 80053ce:	602b      	str	r3, [r5, #0]
 80053d0:	9703      	str	r7, [sp, #12]
 80053d2:	e7cb      	b.n	800536c <_vfiprintf_r+0xe4>
 80053d4:	9b07      	ldr	r3, [sp, #28]
 80053d6:	1d19      	adds	r1, r3, #4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	9107      	str	r1, [sp, #28]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	db01      	blt.n	80053e4 <_vfiprintf_r+0x15c>
 80053e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80053e2:	e004      	b.n	80053ee <_vfiprintf_r+0x166>
 80053e4:	425b      	negs	r3, r3
 80053e6:	60eb      	str	r3, [r5, #12]
 80053e8:	2302      	movs	r3, #2
 80053ea:	4313      	orrs	r3, r2
 80053ec:	602b      	str	r3, [r5, #0]
 80053ee:	783b      	ldrb	r3, [r7, #0]
 80053f0:	2b2e      	cmp	r3, #46	; 0x2e
 80053f2:	d10a      	bne.n	800540a <_vfiprintf_r+0x182>
 80053f4:	787b      	ldrb	r3, [r7, #1]
 80053f6:	2b2a      	cmp	r3, #42	; 0x2a
 80053f8:	d137      	bne.n	800546a <_vfiprintf_r+0x1e2>
 80053fa:	9b07      	ldr	r3, [sp, #28]
 80053fc:	3702      	adds	r7, #2
 80053fe:	1d1a      	adds	r2, r3, #4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	9207      	str	r2, [sp, #28]
 8005404:	2b00      	cmp	r3, #0
 8005406:	db2d      	blt.n	8005464 <_vfiprintf_r+0x1dc>
 8005408:	9309      	str	r3, [sp, #36]	; 0x24
 800540a:	2203      	movs	r2, #3
 800540c:	7839      	ldrb	r1, [r7, #0]
 800540e:	4837      	ldr	r0, [pc, #220]	; (80054ec <_vfiprintf_r+0x264>)
 8005410:	f000 fd1c 	bl	8005e4c <memchr>
 8005414:	2800      	cmp	r0, #0
 8005416:	d007      	beq.n	8005428 <_vfiprintf_r+0x1a0>
 8005418:	4b34      	ldr	r3, [pc, #208]	; (80054ec <_vfiprintf_r+0x264>)
 800541a:	682a      	ldr	r2, [r5, #0]
 800541c:	1ac0      	subs	r0, r0, r3
 800541e:	2340      	movs	r3, #64	; 0x40
 8005420:	4083      	lsls	r3, r0
 8005422:	4313      	orrs	r3, r2
 8005424:	3701      	adds	r7, #1
 8005426:	602b      	str	r3, [r5, #0]
 8005428:	7839      	ldrb	r1, [r7, #0]
 800542a:	1c7b      	adds	r3, r7, #1
 800542c:	2206      	movs	r2, #6
 800542e:	4830      	ldr	r0, [pc, #192]	; (80054f0 <_vfiprintf_r+0x268>)
 8005430:	9303      	str	r3, [sp, #12]
 8005432:	7629      	strb	r1, [r5, #24]
 8005434:	f000 fd0a 	bl	8005e4c <memchr>
 8005438:	2800      	cmp	r0, #0
 800543a:	d045      	beq.n	80054c8 <_vfiprintf_r+0x240>
 800543c:	4b2d      	ldr	r3, [pc, #180]	; (80054f4 <_vfiprintf_r+0x26c>)
 800543e:	2b00      	cmp	r3, #0
 8005440:	d127      	bne.n	8005492 <_vfiprintf_r+0x20a>
 8005442:	2207      	movs	r2, #7
 8005444:	9b07      	ldr	r3, [sp, #28]
 8005446:	3307      	adds	r3, #7
 8005448:	4393      	bics	r3, r2
 800544a:	3308      	adds	r3, #8
 800544c:	9307      	str	r3, [sp, #28]
 800544e:	696b      	ldr	r3, [r5, #20]
 8005450:	9a04      	ldr	r2, [sp, #16]
 8005452:	189b      	adds	r3, r3, r2
 8005454:	616b      	str	r3, [r5, #20]
 8005456:	e75d      	b.n	8005314 <_vfiprintf_r+0x8c>
 8005458:	210a      	movs	r1, #10
 800545a:	434b      	muls	r3, r1
 800545c:	4667      	mov	r7, ip
 800545e:	189b      	adds	r3, r3, r2
 8005460:	3909      	subs	r1, #9
 8005462:	e7a3      	b.n	80053ac <_vfiprintf_r+0x124>
 8005464:	2301      	movs	r3, #1
 8005466:	425b      	negs	r3, r3
 8005468:	e7ce      	b.n	8005408 <_vfiprintf_r+0x180>
 800546a:	2300      	movs	r3, #0
 800546c:	001a      	movs	r2, r3
 800546e:	3701      	adds	r7, #1
 8005470:	606b      	str	r3, [r5, #4]
 8005472:	7839      	ldrb	r1, [r7, #0]
 8005474:	1c78      	adds	r0, r7, #1
 8005476:	3930      	subs	r1, #48	; 0x30
 8005478:	4684      	mov	ip, r0
 800547a:	2909      	cmp	r1, #9
 800547c:	d903      	bls.n	8005486 <_vfiprintf_r+0x1fe>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0c3      	beq.n	800540a <_vfiprintf_r+0x182>
 8005482:	9209      	str	r2, [sp, #36]	; 0x24
 8005484:	e7c1      	b.n	800540a <_vfiprintf_r+0x182>
 8005486:	230a      	movs	r3, #10
 8005488:	435a      	muls	r2, r3
 800548a:	4667      	mov	r7, ip
 800548c:	1852      	adds	r2, r2, r1
 800548e:	3b09      	subs	r3, #9
 8005490:	e7ef      	b.n	8005472 <_vfiprintf_r+0x1ea>
 8005492:	ab07      	add	r3, sp, #28
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	0022      	movs	r2, r4
 8005498:	0029      	movs	r1, r5
 800549a:	0030      	movs	r0, r6
 800549c:	4b16      	ldr	r3, [pc, #88]	; (80054f8 <_vfiprintf_r+0x270>)
 800549e:	e000      	b.n	80054a2 <_vfiprintf_r+0x21a>
 80054a0:	bf00      	nop
 80054a2:	9004      	str	r0, [sp, #16]
 80054a4:	9b04      	ldr	r3, [sp, #16]
 80054a6:	3301      	adds	r3, #1
 80054a8:	d1d1      	bne.n	800544e <_vfiprintf_r+0x1c6>
 80054aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054ac:	07db      	lsls	r3, r3, #31
 80054ae:	d405      	bmi.n	80054bc <_vfiprintf_r+0x234>
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	059b      	lsls	r3, r3, #22
 80054b4:	d402      	bmi.n	80054bc <_vfiprintf_r+0x234>
 80054b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054b8:	f000 fc5a 	bl	8005d70 <__retarget_lock_release_recursive>
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	065b      	lsls	r3, r3, #25
 80054c0:	d500      	bpl.n	80054c4 <_vfiprintf_r+0x23c>
 80054c2:	e70a      	b.n	80052da <_vfiprintf_r+0x52>
 80054c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80054c6:	e70a      	b.n	80052de <_vfiprintf_r+0x56>
 80054c8:	ab07      	add	r3, sp, #28
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	0022      	movs	r2, r4
 80054ce:	0029      	movs	r1, r5
 80054d0:	0030      	movs	r0, r6
 80054d2:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <_vfiprintf_r+0x270>)
 80054d4:	f000 f882 	bl	80055dc <_printf_i>
 80054d8:	e7e3      	b.n	80054a2 <_vfiprintf_r+0x21a>
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	080062a8 	.word	0x080062a8
 80054e0:	080062c8 	.word	0x080062c8
 80054e4:	08006288 	.word	0x08006288
 80054e8:	08006252 	.word	0x08006252
 80054ec:	08006258 	.word	0x08006258
 80054f0:	0800625c 	.word	0x0800625c
 80054f4:	00000000 	.word	0x00000000
 80054f8:	08005263 	.word	0x08005263

080054fc <_printf_common>:
 80054fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054fe:	0015      	movs	r5, r2
 8005500:	9301      	str	r3, [sp, #4]
 8005502:	688a      	ldr	r2, [r1, #8]
 8005504:	690b      	ldr	r3, [r1, #16]
 8005506:	000c      	movs	r4, r1
 8005508:	9000      	str	r0, [sp, #0]
 800550a:	4293      	cmp	r3, r2
 800550c:	da00      	bge.n	8005510 <_printf_common+0x14>
 800550e:	0013      	movs	r3, r2
 8005510:	0022      	movs	r2, r4
 8005512:	602b      	str	r3, [r5, #0]
 8005514:	3243      	adds	r2, #67	; 0x43
 8005516:	7812      	ldrb	r2, [r2, #0]
 8005518:	2a00      	cmp	r2, #0
 800551a:	d001      	beq.n	8005520 <_printf_common+0x24>
 800551c:	3301      	adds	r3, #1
 800551e:	602b      	str	r3, [r5, #0]
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	069b      	lsls	r3, r3, #26
 8005524:	d502      	bpl.n	800552c <_printf_common+0x30>
 8005526:	682b      	ldr	r3, [r5, #0]
 8005528:	3302      	adds	r3, #2
 800552a:	602b      	str	r3, [r5, #0]
 800552c:	6822      	ldr	r2, [r4, #0]
 800552e:	2306      	movs	r3, #6
 8005530:	0017      	movs	r7, r2
 8005532:	401f      	ands	r7, r3
 8005534:	421a      	tst	r2, r3
 8005536:	d027      	beq.n	8005588 <_printf_common+0x8c>
 8005538:	0023      	movs	r3, r4
 800553a:	3343      	adds	r3, #67	; 0x43
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	1e5a      	subs	r2, r3, #1
 8005540:	4193      	sbcs	r3, r2
 8005542:	6822      	ldr	r2, [r4, #0]
 8005544:	0692      	lsls	r2, r2, #26
 8005546:	d430      	bmi.n	80055aa <_printf_common+0xae>
 8005548:	0022      	movs	r2, r4
 800554a:	9901      	ldr	r1, [sp, #4]
 800554c:	9800      	ldr	r0, [sp, #0]
 800554e:	9e08      	ldr	r6, [sp, #32]
 8005550:	3243      	adds	r2, #67	; 0x43
 8005552:	47b0      	blx	r6
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d025      	beq.n	80055a4 <_printf_common+0xa8>
 8005558:	2306      	movs	r3, #6
 800555a:	6820      	ldr	r0, [r4, #0]
 800555c:	682a      	ldr	r2, [r5, #0]
 800555e:	68e1      	ldr	r1, [r4, #12]
 8005560:	2500      	movs	r5, #0
 8005562:	4003      	ands	r3, r0
 8005564:	2b04      	cmp	r3, #4
 8005566:	d103      	bne.n	8005570 <_printf_common+0x74>
 8005568:	1a8d      	subs	r5, r1, r2
 800556a:	43eb      	mvns	r3, r5
 800556c:	17db      	asrs	r3, r3, #31
 800556e:	401d      	ands	r5, r3
 8005570:	68a3      	ldr	r3, [r4, #8]
 8005572:	6922      	ldr	r2, [r4, #16]
 8005574:	4293      	cmp	r3, r2
 8005576:	dd01      	ble.n	800557c <_printf_common+0x80>
 8005578:	1a9b      	subs	r3, r3, r2
 800557a:	18ed      	adds	r5, r5, r3
 800557c:	2700      	movs	r7, #0
 800557e:	42bd      	cmp	r5, r7
 8005580:	d120      	bne.n	80055c4 <_printf_common+0xc8>
 8005582:	2000      	movs	r0, #0
 8005584:	e010      	b.n	80055a8 <_printf_common+0xac>
 8005586:	3701      	adds	r7, #1
 8005588:	68e3      	ldr	r3, [r4, #12]
 800558a:	682a      	ldr	r2, [r5, #0]
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	42bb      	cmp	r3, r7
 8005590:	ddd2      	ble.n	8005538 <_printf_common+0x3c>
 8005592:	0022      	movs	r2, r4
 8005594:	2301      	movs	r3, #1
 8005596:	9901      	ldr	r1, [sp, #4]
 8005598:	9800      	ldr	r0, [sp, #0]
 800559a:	9e08      	ldr	r6, [sp, #32]
 800559c:	3219      	adds	r2, #25
 800559e:	47b0      	blx	r6
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d1f0      	bne.n	8005586 <_printf_common+0x8a>
 80055a4:	2001      	movs	r0, #1
 80055a6:	4240      	negs	r0, r0
 80055a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055aa:	2030      	movs	r0, #48	; 0x30
 80055ac:	18e1      	adds	r1, r4, r3
 80055ae:	3143      	adds	r1, #67	; 0x43
 80055b0:	7008      	strb	r0, [r1, #0]
 80055b2:	0021      	movs	r1, r4
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	3145      	adds	r1, #69	; 0x45
 80055b8:	7809      	ldrb	r1, [r1, #0]
 80055ba:	18a2      	adds	r2, r4, r2
 80055bc:	3243      	adds	r2, #67	; 0x43
 80055be:	3302      	adds	r3, #2
 80055c0:	7011      	strb	r1, [r2, #0]
 80055c2:	e7c1      	b.n	8005548 <_printf_common+0x4c>
 80055c4:	0022      	movs	r2, r4
 80055c6:	2301      	movs	r3, #1
 80055c8:	9901      	ldr	r1, [sp, #4]
 80055ca:	9800      	ldr	r0, [sp, #0]
 80055cc:	9e08      	ldr	r6, [sp, #32]
 80055ce:	321a      	adds	r2, #26
 80055d0:	47b0      	blx	r6
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	d0e6      	beq.n	80055a4 <_printf_common+0xa8>
 80055d6:	3701      	adds	r7, #1
 80055d8:	e7d1      	b.n	800557e <_printf_common+0x82>
	...

080055dc <_printf_i>:
 80055dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055de:	b08b      	sub	sp, #44	; 0x2c
 80055e0:	9206      	str	r2, [sp, #24]
 80055e2:	000a      	movs	r2, r1
 80055e4:	3243      	adds	r2, #67	; 0x43
 80055e6:	9307      	str	r3, [sp, #28]
 80055e8:	9005      	str	r0, [sp, #20]
 80055ea:	9204      	str	r2, [sp, #16]
 80055ec:	7e0a      	ldrb	r2, [r1, #24]
 80055ee:	000c      	movs	r4, r1
 80055f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80055f2:	2a78      	cmp	r2, #120	; 0x78
 80055f4:	d807      	bhi.n	8005606 <_printf_i+0x2a>
 80055f6:	2a62      	cmp	r2, #98	; 0x62
 80055f8:	d809      	bhi.n	800560e <_printf_i+0x32>
 80055fa:	2a00      	cmp	r2, #0
 80055fc:	d100      	bne.n	8005600 <_printf_i+0x24>
 80055fe:	e0c1      	b.n	8005784 <_printf_i+0x1a8>
 8005600:	2a58      	cmp	r2, #88	; 0x58
 8005602:	d100      	bne.n	8005606 <_printf_i+0x2a>
 8005604:	e08c      	b.n	8005720 <_printf_i+0x144>
 8005606:	0026      	movs	r6, r4
 8005608:	3642      	adds	r6, #66	; 0x42
 800560a:	7032      	strb	r2, [r6, #0]
 800560c:	e022      	b.n	8005654 <_printf_i+0x78>
 800560e:	0010      	movs	r0, r2
 8005610:	3863      	subs	r0, #99	; 0x63
 8005612:	2815      	cmp	r0, #21
 8005614:	d8f7      	bhi.n	8005606 <_printf_i+0x2a>
 8005616:	f7fa fd75 	bl	8000104 <__gnu_thumb1_case_shi>
 800561a:	0016      	.short	0x0016
 800561c:	fff6001f 	.word	0xfff6001f
 8005620:	fff6fff6 	.word	0xfff6fff6
 8005624:	001ffff6 	.word	0x001ffff6
 8005628:	fff6fff6 	.word	0xfff6fff6
 800562c:	fff6fff6 	.word	0xfff6fff6
 8005630:	003600a8 	.word	0x003600a8
 8005634:	fff6009a 	.word	0xfff6009a
 8005638:	00b9fff6 	.word	0x00b9fff6
 800563c:	0036fff6 	.word	0x0036fff6
 8005640:	fff6fff6 	.word	0xfff6fff6
 8005644:	009e      	.short	0x009e
 8005646:	0026      	movs	r6, r4
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	3642      	adds	r6, #66	; 0x42
 800564c:	1d11      	adds	r1, r2, #4
 800564e:	6019      	str	r1, [r3, #0]
 8005650:	6813      	ldr	r3, [r2, #0]
 8005652:	7033      	strb	r3, [r6, #0]
 8005654:	2301      	movs	r3, #1
 8005656:	e0a7      	b.n	80057a8 <_printf_i+0x1cc>
 8005658:	6808      	ldr	r0, [r1, #0]
 800565a:	6819      	ldr	r1, [r3, #0]
 800565c:	1d0a      	adds	r2, r1, #4
 800565e:	0605      	lsls	r5, r0, #24
 8005660:	d50b      	bpl.n	800567a <_printf_i+0x9e>
 8005662:	680d      	ldr	r5, [r1, #0]
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	2d00      	cmp	r5, #0
 8005668:	da03      	bge.n	8005672 <_printf_i+0x96>
 800566a:	232d      	movs	r3, #45	; 0x2d
 800566c:	9a04      	ldr	r2, [sp, #16]
 800566e:	426d      	negs	r5, r5
 8005670:	7013      	strb	r3, [r2, #0]
 8005672:	4b61      	ldr	r3, [pc, #388]	; (80057f8 <_printf_i+0x21c>)
 8005674:	270a      	movs	r7, #10
 8005676:	9303      	str	r3, [sp, #12]
 8005678:	e01b      	b.n	80056b2 <_printf_i+0xd6>
 800567a:	680d      	ldr	r5, [r1, #0]
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	0641      	lsls	r1, r0, #25
 8005680:	d5f1      	bpl.n	8005666 <_printf_i+0x8a>
 8005682:	b22d      	sxth	r5, r5
 8005684:	e7ef      	b.n	8005666 <_printf_i+0x8a>
 8005686:	680d      	ldr	r5, [r1, #0]
 8005688:	6819      	ldr	r1, [r3, #0]
 800568a:	1d08      	adds	r0, r1, #4
 800568c:	6018      	str	r0, [r3, #0]
 800568e:	062e      	lsls	r6, r5, #24
 8005690:	d501      	bpl.n	8005696 <_printf_i+0xba>
 8005692:	680d      	ldr	r5, [r1, #0]
 8005694:	e003      	b.n	800569e <_printf_i+0xc2>
 8005696:	066d      	lsls	r5, r5, #25
 8005698:	d5fb      	bpl.n	8005692 <_printf_i+0xb6>
 800569a:	680d      	ldr	r5, [r1, #0]
 800569c:	b2ad      	uxth	r5, r5
 800569e:	4b56      	ldr	r3, [pc, #344]	; (80057f8 <_printf_i+0x21c>)
 80056a0:	2708      	movs	r7, #8
 80056a2:	9303      	str	r3, [sp, #12]
 80056a4:	2a6f      	cmp	r2, #111	; 0x6f
 80056a6:	d000      	beq.n	80056aa <_printf_i+0xce>
 80056a8:	3702      	adds	r7, #2
 80056aa:	0023      	movs	r3, r4
 80056ac:	2200      	movs	r2, #0
 80056ae:	3343      	adds	r3, #67	; 0x43
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	6863      	ldr	r3, [r4, #4]
 80056b4:	60a3      	str	r3, [r4, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	db03      	blt.n	80056c2 <_printf_i+0xe6>
 80056ba:	2204      	movs	r2, #4
 80056bc:	6821      	ldr	r1, [r4, #0]
 80056be:	4391      	bics	r1, r2
 80056c0:	6021      	str	r1, [r4, #0]
 80056c2:	2d00      	cmp	r5, #0
 80056c4:	d102      	bne.n	80056cc <_printf_i+0xf0>
 80056c6:	9e04      	ldr	r6, [sp, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00c      	beq.n	80056e6 <_printf_i+0x10a>
 80056cc:	9e04      	ldr	r6, [sp, #16]
 80056ce:	0028      	movs	r0, r5
 80056d0:	0039      	movs	r1, r7
 80056d2:	f7fa fda7 	bl	8000224 <__aeabi_uidivmod>
 80056d6:	9b03      	ldr	r3, [sp, #12]
 80056d8:	3e01      	subs	r6, #1
 80056da:	5c5b      	ldrb	r3, [r3, r1]
 80056dc:	7033      	strb	r3, [r6, #0]
 80056de:	002b      	movs	r3, r5
 80056e0:	0005      	movs	r5, r0
 80056e2:	429f      	cmp	r7, r3
 80056e4:	d9f3      	bls.n	80056ce <_printf_i+0xf2>
 80056e6:	2f08      	cmp	r7, #8
 80056e8:	d109      	bne.n	80056fe <_printf_i+0x122>
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	07db      	lsls	r3, r3, #31
 80056ee:	d506      	bpl.n	80056fe <_printf_i+0x122>
 80056f0:	6863      	ldr	r3, [r4, #4]
 80056f2:	6922      	ldr	r2, [r4, #16]
 80056f4:	4293      	cmp	r3, r2
 80056f6:	dc02      	bgt.n	80056fe <_printf_i+0x122>
 80056f8:	2330      	movs	r3, #48	; 0x30
 80056fa:	3e01      	subs	r6, #1
 80056fc:	7033      	strb	r3, [r6, #0]
 80056fe:	9b04      	ldr	r3, [sp, #16]
 8005700:	1b9b      	subs	r3, r3, r6
 8005702:	6123      	str	r3, [r4, #16]
 8005704:	9b07      	ldr	r3, [sp, #28]
 8005706:	0021      	movs	r1, r4
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	9805      	ldr	r0, [sp, #20]
 800570c:	9b06      	ldr	r3, [sp, #24]
 800570e:	aa09      	add	r2, sp, #36	; 0x24
 8005710:	f7ff fef4 	bl	80054fc <_printf_common>
 8005714:	1c43      	adds	r3, r0, #1
 8005716:	d14c      	bne.n	80057b2 <_printf_i+0x1d6>
 8005718:	2001      	movs	r0, #1
 800571a:	4240      	negs	r0, r0
 800571c:	b00b      	add	sp, #44	; 0x2c
 800571e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005720:	3145      	adds	r1, #69	; 0x45
 8005722:	700a      	strb	r2, [r1, #0]
 8005724:	4a34      	ldr	r2, [pc, #208]	; (80057f8 <_printf_i+0x21c>)
 8005726:	9203      	str	r2, [sp, #12]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	6821      	ldr	r1, [r4, #0]
 800572c:	ca20      	ldmia	r2!, {r5}
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	0608      	lsls	r0, r1, #24
 8005732:	d516      	bpl.n	8005762 <_printf_i+0x186>
 8005734:	07cb      	lsls	r3, r1, #31
 8005736:	d502      	bpl.n	800573e <_printf_i+0x162>
 8005738:	2320      	movs	r3, #32
 800573a:	4319      	orrs	r1, r3
 800573c:	6021      	str	r1, [r4, #0]
 800573e:	2710      	movs	r7, #16
 8005740:	2d00      	cmp	r5, #0
 8005742:	d1b2      	bne.n	80056aa <_printf_i+0xce>
 8005744:	2320      	movs	r3, #32
 8005746:	6822      	ldr	r2, [r4, #0]
 8005748:	439a      	bics	r2, r3
 800574a:	6022      	str	r2, [r4, #0]
 800574c:	e7ad      	b.n	80056aa <_printf_i+0xce>
 800574e:	2220      	movs	r2, #32
 8005750:	6809      	ldr	r1, [r1, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	6022      	str	r2, [r4, #0]
 8005756:	0022      	movs	r2, r4
 8005758:	2178      	movs	r1, #120	; 0x78
 800575a:	3245      	adds	r2, #69	; 0x45
 800575c:	7011      	strb	r1, [r2, #0]
 800575e:	4a27      	ldr	r2, [pc, #156]	; (80057fc <_printf_i+0x220>)
 8005760:	e7e1      	b.n	8005726 <_printf_i+0x14a>
 8005762:	0648      	lsls	r0, r1, #25
 8005764:	d5e6      	bpl.n	8005734 <_printf_i+0x158>
 8005766:	b2ad      	uxth	r5, r5
 8005768:	e7e4      	b.n	8005734 <_printf_i+0x158>
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	680d      	ldr	r5, [r1, #0]
 800576e:	1d10      	adds	r0, r2, #4
 8005770:	6949      	ldr	r1, [r1, #20]
 8005772:	6018      	str	r0, [r3, #0]
 8005774:	6813      	ldr	r3, [r2, #0]
 8005776:	062e      	lsls	r6, r5, #24
 8005778:	d501      	bpl.n	800577e <_printf_i+0x1a2>
 800577a:	6019      	str	r1, [r3, #0]
 800577c:	e002      	b.n	8005784 <_printf_i+0x1a8>
 800577e:	066d      	lsls	r5, r5, #25
 8005780:	d5fb      	bpl.n	800577a <_printf_i+0x19e>
 8005782:	8019      	strh	r1, [r3, #0]
 8005784:	2300      	movs	r3, #0
 8005786:	9e04      	ldr	r6, [sp, #16]
 8005788:	6123      	str	r3, [r4, #16]
 800578a:	e7bb      	b.n	8005704 <_printf_i+0x128>
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	1d11      	adds	r1, r2, #4
 8005790:	6019      	str	r1, [r3, #0]
 8005792:	6816      	ldr	r6, [r2, #0]
 8005794:	2100      	movs	r1, #0
 8005796:	0030      	movs	r0, r6
 8005798:	6862      	ldr	r2, [r4, #4]
 800579a:	f000 fb57 	bl	8005e4c <memchr>
 800579e:	2800      	cmp	r0, #0
 80057a0:	d001      	beq.n	80057a6 <_printf_i+0x1ca>
 80057a2:	1b80      	subs	r0, r0, r6
 80057a4:	6060      	str	r0, [r4, #4]
 80057a6:	6863      	ldr	r3, [r4, #4]
 80057a8:	6123      	str	r3, [r4, #16]
 80057aa:	2300      	movs	r3, #0
 80057ac:	9a04      	ldr	r2, [sp, #16]
 80057ae:	7013      	strb	r3, [r2, #0]
 80057b0:	e7a8      	b.n	8005704 <_printf_i+0x128>
 80057b2:	6923      	ldr	r3, [r4, #16]
 80057b4:	0032      	movs	r2, r6
 80057b6:	9906      	ldr	r1, [sp, #24]
 80057b8:	9805      	ldr	r0, [sp, #20]
 80057ba:	9d07      	ldr	r5, [sp, #28]
 80057bc:	47a8      	blx	r5
 80057be:	1c43      	adds	r3, r0, #1
 80057c0:	d0aa      	beq.n	8005718 <_printf_i+0x13c>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	079b      	lsls	r3, r3, #30
 80057c6:	d415      	bmi.n	80057f4 <_printf_i+0x218>
 80057c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ca:	68e0      	ldr	r0, [r4, #12]
 80057cc:	4298      	cmp	r0, r3
 80057ce:	daa5      	bge.n	800571c <_printf_i+0x140>
 80057d0:	0018      	movs	r0, r3
 80057d2:	e7a3      	b.n	800571c <_printf_i+0x140>
 80057d4:	0022      	movs	r2, r4
 80057d6:	2301      	movs	r3, #1
 80057d8:	9906      	ldr	r1, [sp, #24]
 80057da:	9805      	ldr	r0, [sp, #20]
 80057dc:	9e07      	ldr	r6, [sp, #28]
 80057de:	3219      	adds	r2, #25
 80057e0:	47b0      	blx	r6
 80057e2:	1c43      	adds	r3, r0, #1
 80057e4:	d098      	beq.n	8005718 <_printf_i+0x13c>
 80057e6:	3501      	adds	r5, #1
 80057e8:	68e3      	ldr	r3, [r4, #12]
 80057ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057ec:	1a9b      	subs	r3, r3, r2
 80057ee:	42ab      	cmp	r3, r5
 80057f0:	dcf0      	bgt.n	80057d4 <_printf_i+0x1f8>
 80057f2:	e7e9      	b.n	80057c8 <_printf_i+0x1ec>
 80057f4:	2500      	movs	r5, #0
 80057f6:	e7f7      	b.n	80057e8 <_printf_i+0x20c>
 80057f8:	08006263 	.word	0x08006263
 80057fc:	08006274 	.word	0x08006274

08005800 <_sbrk_r>:
 8005800:	2300      	movs	r3, #0
 8005802:	b570      	push	{r4, r5, r6, lr}
 8005804:	4d06      	ldr	r5, [pc, #24]	; (8005820 <_sbrk_r+0x20>)
 8005806:	0004      	movs	r4, r0
 8005808:	0008      	movs	r0, r1
 800580a:	602b      	str	r3, [r5, #0]
 800580c:	f7fc fd34 	bl	8002278 <_sbrk>
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	d103      	bne.n	800581c <_sbrk_r+0x1c>
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d000      	beq.n	800581c <_sbrk_r+0x1c>
 800581a:	6023      	str	r3, [r4, #0]
 800581c:	bd70      	pop	{r4, r5, r6, pc}
 800581e:	46c0      	nop			; (mov r8, r8)
 8005820:	2000026c 	.word	0x2000026c

08005824 <__swbuf_r>:
 8005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005826:	0005      	movs	r5, r0
 8005828:	000e      	movs	r6, r1
 800582a:	0014      	movs	r4, r2
 800582c:	2800      	cmp	r0, #0
 800582e:	d004      	beq.n	800583a <__swbuf_r+0x16>
 8005830:	6983      	ldr	r3, [r0, #24]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <__swbuf_r+0x16>
 8005836:	f000 f9f9 	bl	8005c2c <__sinit>
 800583a:	4b22      	ldr	r3, [pc, #136]	; (80058c4 <__swbuf_r+0xa0>)
 800583c:	429c      	cmp	r4, r3
 800583e:	d12e      	bne.n	800589e <__swbuf_r+0x7a>
 8005840:	686c      	ldr	r4, [r5, #4]
 8005842:	69a3      	ldr	r3, [r4, #24]
 8005844:	60a3      	str	r3, [r4, #8]
 8005846:	89a3      	ldrh	r3, [r4, #12]
 8005848:	071b      	lsls	r3, r3, #28
 800584a:	d532      	bpl.n	80058b2 <__swbuf_r+0x8e>
 800584c:	6923      	ldr	r3, [r4, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d02f      	beq.n	80058b2 <__swbuf_r+0x8e>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	6922      	ldr	r2, [r4, #16]
 8005856:	b2f7      	uxtb	r7, r6
 8005858:	1a98      	subs	r0, r3, r2
 800585a:	6963      	ldr	r3, [r4, #20]
 800585c:	b2f6      	uxtb	r6, r6
 800585e:	4283      	cmp	r3, r0
 8005860:	dc05      	bgt.n	800586e <__swbuf_r+0x4a>
 8005862:	0021      	movs	r1, r4
 8005864:	0028      	movs	r0, r5
 8005866:	f000 f93f 	bl	8005ae8 <_fflush_r>
 800586a:	2800      	cmp	r0, #0
 800586c:	d127      	bne.n	80058be <__swbuf_r+0x9a>
 800586e:	68a3      	ldr	r3, [r4, #8]
 8005870:	3001      	adds	r0, #1
 8005872:	3b01      	subs	r3, #1
 8005874:	60a3      	str	r3, [r4, #8]
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	6022      	str	r2, [r4, #0]
 800587c:	701f      	strb	r7, [r3, #0]
 800587e:	6963      	ldr	r3, [r4, #20]
 8005880:	4283      	cmp	r3, r0
 8005882:	d004      	beq.n	800588e <__swbuf_r+0x6a>
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	07db      	lsls	r3, r3, #31
 8005888:	d507      	bpl.n	800589a <__swbuf_r+0x76>
 800588a:	2e0a      	cmp	r6, #10
 800588c:	d105      	bne.n	800589a <__swbuf_r+0x76>
 800588e:	0021      	movs	r1, r4
 8005890:	0028      	movs	r0, r5
 8005892:	f000 f929 	bl	8005ae8 <_fflush_r>
 8005896:	2800      	cmp	r0, #0
 8005898:	d111      	bne.n	80058be <__swbuf_r+0x9a>
 800589a:	0030      	movs	r0, r6
 800589c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800589e:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <__swbuf_r+0xa4>)
 80058a0:	429c      	cmp	r4, r3
 80058a2:	d101      	bne.n	80058a8 <__swbuf_r+0x84>
 80058a4:	68ac      	ldr	r4, [r5, #8]
 80058a6:	e7cc      	b.n	8005842 <__swbuf_r+0x1e>
 80058a8:	4b08      	ldr	r3, [pc, #32]	; (80058cc <__swbuf_r+0xa8>)
 80058aa:	429c      	cmp	r4, r3
 80058ac:	d1c9      	bne.n	8005842 <__swbuf_r+0x1e>
 80058ae:	68ec      	ldr	r4, [r5, #12]
 80058b0:	e7c7      	b.n	8005842 <__swbuf_r+0x1e>
 80058b2:	0021      	movs	r1, r4
 80058b4:	0028      	movs	r0, r5
 80058b6:	f000 f80b 	bl	80058d0 <__swsetup_r>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d0c9      	beq.n	8005852 <__swbuf_r+0x2e>
 80058be:	2601      	movs	r6, #1
 80058c0:	4276      	negs	r6, r6
 80058c2:	e7ea      	b.n	800589a <__swbuf_r+0x76>
 80058c4:	080062a8 	.word	0x080062a8
 80058c8:	080062c8 	.word	0x080062c8
 80058cc:	08006288 	.word	0x08006288

080058d0 <__swsetup_r>:
 80058d0:	4b37      	ldr	r3, [pc, #220]	; (80059b0 <__swsetup_r+0xe0>)
 80058d2:	b570      	push	{r4, r5, r6, lr}
 80058d4:	681d      	ldr	r5, [r3, #0]
 80058d6:	0006      	movs	r6, r0
 80058d8:	000c      	movs	r4, r1
 80058da:	2d00      	cmp	r5, #0
 80058dc:	d005      	beq.n	80058ea <__swsetup_r+0x1a>
 80058de:	69ab      	ldr	r3, [r5, #24]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <__swsetup_r+0x1a>
 80058e4:	0028      	movs	r0, r5
 80058e6:	f000 f9a1 	bl	8005c2c <__sinit>
 80058ea:	4b32      	ldr	r3, [pc, #200]	; (80059b4 <__swsetup_r+0xe4>)
 80058ec:	429c      	cmp	r4, r3
 80058ee:	d10f      	bne.n	8005910 <__swsetup_r+0x40>
 80058f0:	686c      	ldr	r4, [r5, #4]
 80058f2:	230c      	movs	r3, #12
 80058f4:	5ee2      	ldrsh	r2, [r4, r3]
 80058f6:	b293      	uxth	r3, r2
 80058f8:	0711      	lsls	r1, r2, #28
 80058fa:	d42d      	bmi.n	8005958 <__swsetup_r+0x88>
 80058fc:	06d9      	lsls	r1, r3, #27
 80058fe:	d411      	bmi.n	8005924 <__swsetup_r+0x54>
 8005900:	2309      	movs	r3, #9
 8005902:	2001      	movs	r0, #1
 8005904:	6033      	str	r3, [r6, #0]
 8005906:	3337      	adds	r3, #55	; 0x37
 8005908:	4313      	orrs	r3, r2
 800590a:	81a3      	strh	r3, [r4, #12]
 800590c:	4240      	negs	r0, r0
 800590e:	bd70      	pop	{r4, r5, r6, pc}
 8005910:	4b29      	ldr	r3, [pc, #164]	; (80059b8 <__swsetup_r+0xe8>)
 8005912:	429c      	cmp	r4, r3
 8005914:	d101      	bne.n	800591a <__swsetup_r+0x4a>
 8005916:	68ac      	ldr	r4, [r5, #8]
 8005918:	e7eb      	b.n	80058f2 <__swsetup_r+0x22>
 800591a:	4b28      	ldr	r3, [pc, #160]	; (80059bc <__swsetup_r+0xec>)
 800591c:	429c      	cmp	r4, r3
 800591e:	d1e8      	bne.n	80058f2 <__swsetup_r+0x22>
 8005920:	68ec      	ldr	r4, [r5, #12]
 8005922:	e7e6      	b.n	80058f2 <__swsetup_r+0x22>
 8005924:	075b      	lsls	r3, r3, #29
 8005926:	d513      	bpl.n	8005950 <__swsetup_r+0x80>
 8005928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800592a:	2900      	cmp	r1, #0
 800592c:	d008      	beq.n	8005940 <__swsetup_r+0x70>
 800592e:	0023      	movs	r3, r4
 8005930:	3344      	adds	r3, #68	; 0x44
 8005932:	4299      	cmp	r1, r3
 8005934:	d002      	beq.n	800593c <__swsetup_r+0x6c>
 8005936:	0030      	movs	r0, r6
 8005938:	f7ff fb9c 	bl	8005074 <_free_r>
 800593c:	2300      	movs	r3, #0
 800593e:	6363      	str	r3, [r4, #52]	; 0x34
 8005940:	2224      	movs	r2, #36	; 0x24
 8005942:	89a3      	ldrh	r3, [r4, #12]
 8005944:	4393      	bics	r3, r2
 8005946:	81a3      	strh	r3, [r4, #12]
 8005948:	2300      	movs	r3, #0
 800594a:	6063      	str	r3, [r4, #4]
 800594c:	6923      	ldr	r3, [r4, #16]
 800594e:	6023      	str	r3, [r4, #0]
 8005950:	2308      	movs	r3, #8
 8005952:	89a2      	ldrh	r2, [r4, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	81a3      	strh	r3, [r4, #12]
 8005958:	6923      	ldr	r3, [r4, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10b      	bne.n	8005976 <__swsetup_r+0xa6>
 800595e:	21a0      	movs	r1, #160	; 0xa0
 8005960:	2280      	movs	r2, #128	; 0x80
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	0089      	lsls	r1, r1, #2
 8005966:	0092      	lsls	r2, r2, #2
 8005968:	400b      	ands	r3, r1
 800596a:	4293      	cmp	r3, r2
 800596c:	d003      	beq.n	8005976 <__swsetup_r+0xa6>
 800596e:	0021      	movs	r1, r4
 8005970:	0030      	movs	r0, r6
 8005972:	f000 fa27 	bl	8005dc4 <__smakebuf_r>
 8005976:	220c      	movs	r2, #12
 8005978:	5ea3      	ldrsh	r3, [r4, r2]
 800597a:	2001      	movs	r0, #1
 800597c:	001a      	movs	r2, r3
 800597e:	b299      	uxth	r1, r3
 8005980:	4002      	ands	r2, r0
 8005982:	4203      	tst	r3, r0
 8005984:	d00f      	beq.n	80059a6 <__swsetup_r+0xd6>
 8005986:	2200      	movs	r2, #0
 8005988:	60a2      	str	r2, [r4, #8]
 800598a:	6962      	ldr	r2, [r4, #20]
 800598c:	4252      	negs	r2, r2
 800598e:	61a2      	str	r2, [r4, #24]
 8005990:	2000      	movs	r0, #0
 8005992:	6922      	ldr	r2, [r4, #16]
 8005994:	4282      	cmp	r2, r0
 8005996:	d1ba      	bne.n	800590e <__swsetup_r+0x3e>
 8005998:	060a      	lsls	r2, r1, #24
 800599a:	d5b8      	bpl.n	800590e <__swsetup_r+0x3e>
 800599c:	2240      	movs	r2, #64	; 0x40
 800599e:	4313      	orrs	r3, r2
 80059a0:	81a3      	strh	r3, [r4, #12]
 80059a2:	3801      	subs	r0, #1
 80059a4:	e7b3      	b.n	800590e <__swsetup_r+0x3e>
 80059a6:	0788      	lsls	r0, r1, #30
 80059a8:	d400      	bmi.n	80059ac <__swsetup_r+0xdc>
 80059aa:	6962      	ldr	r2, [r4, #20]
 80059ac:	60a2      	str	r2, [r4, #8]
 80059ae:	e7ef      	b.n	8005990 <__swsetup_r+0xc0>
 80059b0:	20000010 	.word	0x20000010
 80059b4:	080062a8 	.word	0x080062a8
 80059b8:	080062c8 	.word	0x080062c8
 80059bc:	08006288 	.word	0x08006288

080059c0 <abort>:
 80059c0:	2006      	movs	r0, #6
 80059c2:	b510      	push	{r4, lr}
 80059c4:	f000 fa88 	bl	8005ed8 <raise>
 80059c8:	2001      	movs	r0, #1
 80059ca:	f7fc fbe3 	bl	8002194 <_exit>
	...

080059d0 <__sflush_r>:
 80059d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059d2:	898b      	ldrh	r3, [r1, #12]
 80059d4:	0005      	movs	r5, r0
 80059d6:	000c      	movs	r4, r1
 80059d8:	071a      	lsls	r2, r3, #28
 80059da:	d45f      	bmi.n	8005a9c <__sflush_r+0xcc>
 80059dc:	684a      	ldr	r2, [r1, #4]
 80059de:	2a00      	cmp	r2, #0
 80059e0:	dc04      	bgt.n	80059ec <__sflush_r+0x1c>
 80059e2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80059e4:	2a00      	cmp	r2, #0
 80059e6:	dc01      	bgt.n	80059ec <__sflush_r+0x1c>
 80059e8:	2000      	movs	r0, #0
 80059ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059ec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80059ee:	2f00      	cmp	r7, #0
 80059f0:	d0fa      	beq.n	80059e8 <__sflush_r+0x18>
 80059f2:	2200      	movs	r2, #0
 80059f4:	2180      	movs	r1, #128	; 0x80
 80059f6:	682e      	ldr	r6, [r5, #0]
 80059f8:	602a      	str	r2, [r5, #0]
 80059fa:	001a      	movs	r2, r3
 80059fc:	0149      	lsls	r1, r1, #5
 80059fe:	400a      	ands	r2, r1
 8005a00:	420b      	tst	r3, r1
 8005a02:	d034      	beq.n	8005a6e <__sflush_r+0x9e>
 8005a04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a06:	89a3      	ldrh	r3, [r4, #12]
 8005a08:	075b      	lsls	r3, r3, #29
 8005a0a:	d506      	bpl.n	8005a1a <__sflush_r+0x4a>
 8005a0c:	6863      	ldr	r3, [r4, #4]
 8005a0e:	1ac0      	subs	r0, r0, r3
 8005a10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <__sflush_r+0x4a>
 8005a16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a18:	1ac0      	subs	r0, r0, r3
 8005a1a:	0002      	movs	r2, r0
 8005a1c:	6a21      	ldr	r1, [r4, #32]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	0028      	movs	r0, r5
 8005a22:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005a24:	47b8      	blx	r7
 8005a26:	89a1      	ldrh	r1, [r4, #12]
 8005a28:	1c43      	adds	r3, r0, #1
 8005a2a:	d106      	bne.n	8005a3a <__sflush_r+0x6a>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	2b1d      	cmp	r3, #29
 8005a30:	d831      	bhi.n	8005a96 <__sflush_r+0xc6>
 8005a32:	4a2c      	ldr	r2, [pc, #176]	; (8005ae4 <__sflush_r+0x114>)
 8005a34:	40da      	lsrs	r2, r3
 8005a36:	07d3      	lsls	r3, r2, #31
 8005a38:	d52d      	bpl.n	8005a96 <__sflush_r+0xc6>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	6063      	str	r3, [r4, #4]
 8005a3e:	6923      	ldr	r3, [r4, #16]
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	04cb      	lsls	r3, r1, #19
 8005a44:	d505      	bpl.n	8005a52 <__sflush_r+0x82>
 8005a46:	1c43      	adds	r3, r0, #1
 8005a48:	d102      	bne.n	8005a50 <__sflush_r+0x80>
 8005a4a:	682b      	ldr	r3, [r5, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d100      	bne.n	8005a52 <__sflush_r+0x82>
 8005a50:	6560      	str	r0, [r4, #84]	; 0x54
 8005a52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a54:	602e      	str	r6, [r5, #0]
 8005a56:	2900      	cmp	r1, #0
 8005a58:	d0c6      	beq.n	80059e8 <__sflush_r+0x18>
 8005a5a:	0023      	movs	r3, r4
 8005a5c:	3344      	adds	r3, #68	; 0x44
 8005a5e:	4299      	cmp	r1, r3
 8005a60:	d002      	beq.n	8005a68 <__sflush_r+0x98>
 8005a62:	0028      	movs	r0, r5
 8005a64:	f7ff fb06 	bl	8005074 <_free_r>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	6360      	str	r0, [r4, #52]	; 0x34
 8005a6c:	e7bd      	b.n	80059ea <__sflush_r+0x1a>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	0028      	movs	r0, r5
 8005a72:	6a21      	ldr	r1, [r4, #32]
 8005a74:	47b8      	blx	r7
 8005a76:	1c43      	adds	r3, r0, #1
 8005a78:	d1c5      	bne.n	8005a06 <__sflush_r+0x36>
 8005a7a:	682b      	ldr	r3, [r5, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0c2      	beq.n	8005a06 <__sflush_r+0x36>
 8005a80:	2b1d      	cmp	r3, #29
 8005a82:	d001      	beq.n	8005a88 <__sflush_r+0xb8>
 8005a84:	2b16      	cmp	r3, #22
 8005a86:	d101      	bne.n	8005a8c <__sflush_r+0xbc>
 8005a88:	602e      	str	r6, [r5, #0]
 8005a8a:	e7ad      	b.n	80059e8 <__sflush_r+0x18>
 8005a8c:	2340      	movs	r3, #64	; 0x40
 8005a8e:	89a2      	ldrh	r2, [r4, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	81a3      	strh	r3, [r4, #12]
 8005a94:	e7a9      	b.n	80059ea <__sflush_r+0x1a>
 8005a96:	2340      	movs	r3, #64	; 0x40
 8005a98:	430b      	orrs	r3, r1
 8005a9a:	e7fa      	b.n	8005a92 <__sflush_r+0xc2>
 8005a9c:	690f      	ldr	r7, [r1, #16]
 8005a9e:	2f00      	cmp	r7, #0
 8005aa0:	d0a2      	beq.n	80059e8 <__sflush_r+0x18>
 8005aa2:	680a      	ldr	r2, [r1, #0]
 8005aa4:	600f      	str	r7, [r1, #0]
 8005aa6:	1bd2      	subs	r2, r2, r7
 8005aa8:	9201      	str	r2, [sp, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	079b      	lsls	r3, r3, #30
 8005aae:	d100      	bne.n	8005ab2 <__sflush_r+0xe2>
 8005ab0:	694a      	ldr	r2, [r1, #20]
 8005ab2:	60a2      	str	r2, [r4, #8]
 8005ab4:	9b01      	ldr	r3, [sp, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	dc00      	bgt.n	8005abc <__sflush_r+0xec>
 8005aba:	e795      	b.n	80059e8 <__sflush_r+0x18>
 8005abc:	003a      	movs	r2, r7
 8005abe:	0028      	movs	r0, r5
 8005ac0:	9b01      	ldr	r3, [sp, #4]
 8005ac2:	6a21      	ldr	r1, [r4, #32]
 8005ac4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ac6:	47b0      	blx	r6
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	dc06      	bgt.n	8005ada <__sflush_r+0x10a>
 8005acc:	2340      	movs	r3, #64	; 0x40
 8005ace:	2001      	movs	r0, #1
 8005ad0:	89a2      	ldrh	r2, [r4, #12]
 8005ad2:	4240      	negs	r0, r0
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	81a3      	strh	r3, [r4, #12]
 8005ad8:	e787      	b.n	80059ea <__sflush_r+0x1a>
 8005ada:	9b01      	ldr	r3, [sp, #4]
 8005adc:	183f      	adds	r7, r7, r0
 8005ade:	1a1b      	subs	r3, r3, r0
 8005ae0:	9301      	str	r3, [sp, #4]
 8005ae2:	e7e7      	b.n	8005ab4 <__sflush_r+0xe4>
 8005ae4:	20400001 	.word	0x20400001

08005ae8 <_fflush_r>:
 8005ae8:	690b      	ldr	r3, [r1, #16]
 8005aea:	b570      	push	{r4, r5, r6, lr}
 8005aec:	0005      	movs	r5, r0
 8005aee:	000c      	movs	r4, r1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d102      	bne.n	8005afa <_fflush_r+0x12>
 8005af4:	2500      	movs	r5, #0
 8005af6:	0028      	movs	r0, r5
 8005af8:	bd70      	pop	{r4, r5, r6, pc}
 8005afa:	2800      	cmp	r0, #0
 8005afc:	d004      	beq.n	8005b08 <_fflush_r+0x20>
 8005afe:	6983      	ldr	r3, [r0, #24]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <_fflush_r+0x20>
 8005b04:	f000 f892 	bl	8005c2c <__sinit>
 8005b08:	4b14      	ldr	r3, [pc, #80]	; (8005b5c <_fflush_r+0x74>)
 8005b0a:	429c      	cmp	r4, r3
 8005b0c:	d11b      	bne.n	8005b46 <_fflush_r+0x5e>
 8005b0e:	686c      	ldr	r4, [r5, #4]
 8005b10:	220c      	movs	r2, #12
 8005b12:	5ea3      	ldrsh	r3, [r4, r2]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0ed      	beq.n	8005af4 <_fflush_r+0xc>
 8005b18:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b1a:	07d2      	lsls	r2, r2, #31
 8005b1c:	d404      	bmi.n	8005b28 <_fflush_r+0x40>
 8005b1e:	059b      	lsls	r3, r3, #22
 8005b20:	d402      	bmi.n	8005b28 <_fflush_r+0x40>
 8005b22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b24:	f000 f923 	bl	8005d6e <__retarget_lock_acquire_recursive>
 8005b28:	0028      	movs	r0, r5
 8005b2a:	0021      	movs	r1, r4
 8005b2c:	f7ff ff50 	bl	80059d0 <__sflush_r>
 8005b30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b32:	0005      	movs	r5, r0
 8005b34:	07db      	lsls	r3, r3, #31
 8005b36:	d4de      	bmi.n	8005af6 <_fflush_r+0xe>
 8005b38:	89a3      	ldrh	r3, [r4, #12]
 8005b3a:	059b      	lsls	r3, r3, #22
 8005b3c:	d4db      	bmi.n	8005af6 <_fflush_r+0xe>
 8005b3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b40:	f000 f916 	bl	8005d70 <__retarget_lock_release_recursive>
 8005b44:	e7d7      	b.n	8005af6 <_fflush_r+0xe>
 8005b46:	4b06      	ldr	r3, [pc, #24]	; (8005b60 <_fflush_r+0x78>)
 8005b48:	429c      	cmp	r4, r3
 8005b4a:	d101      	bne.n	8005b50 <_fflush_r+0x68>
 8005b4c:	68ac      	ldr	r4, [r5, #8]
 8005b4e:	e7df      	b.n	8005b10 <_fflush_r+0x28>
 8005b50:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <_fflush_r+0x7c>)
 8005b52:	429c      	cmp	r4, r3
 8005b54:	d1dc      	bne.n	8005b10 <_fflush_r+0x28>
 8005b56:	68ec      	ldr	r4, [r5, #12]
 8005b58:	e7da      	b.n	8005b10 <_fflush_r+0x28>
 8005b5a:	46c0      	nop			; (mov r8, r8)
 8005b5c:	080062a8 	.word	0x080062a8
 8005b60:	080062c8 	.word	0x080062c8
 8005b64:	08006288 	.word	0x08006288

08005b68 <std>:
 8005b68:	2300      	movs	r3, #0
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	0004      	movs	r4, r0
 8005b6e:	6003      	str	r3, [r0, #0]
 8005b70:	6043      	str	r3, [r0, #4]
 8005b72:	6083      	str	r3, [r0, #8]
 8005b74:	8181      	strh	r1, [r0, #12]
 8005b76:	6643      	str	r3, [r0, #100]	; 0x64
 8005b78:	0019      	movs	r1, r3
 8005b7a:	81c2      	strh	r2, [r0, #14]
 8005b7c:	6103      	str	r3, [r0, #16]
 8005b7e:	6143      	str	r3, [r0, #20]
 8005b80:	6183      	str	r3, [r0, #24]
 8005b82:	2208      	movs	r2, #8
 8005b84:	305c      	adds	r0, #92	; 0x5c
 8005b86:	f7ff f9f6 	bl	8004f76 <memset>
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <std+0x38>)
 8005b8c:	6224      	str	r4, [r4, #32]
 8005b8e:	6263      	str	r3, [r4, #36]	; 0x24
 8005b90:	4b04      	ldr	r3, [pc, #16]	; (8005ba4 <std+0x3c>)
 8005b92:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b94:	4b04      	ldr	r3, [pc, #16]	; (8005ba8 <std+0x40>)
 8005b96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b98:	4b04      	ldr	r3, [pc, #16]	; (8005bac <std+0x44>)
 8005b9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	08005f19 	.word	0x08005f19
 8005ba4:	08005f41 	.word	0x08005f41
 8005ba8:	08005f79 	.word	0x08005f79
 8005bac:	08005fa5 	.word	0x08005fa5

08005bb0 <_cleanup_r>:
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	4902      	ldr	r1, [pc, #8]	; (8005bbc <_cleanup_r+0xc>)
 8005bb4:	f000 f8ba 	bl	8005d2c <_fwalk_reent>
 8005bb8:	bd10      	pop	{r4, pc}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	08005ae9 	.word	0x08005ae9

08005bc0 <__sfmoreglue>:
 8005bc0:	b570      	push	{r4, r5, r6, lr}
 8005bc2:	2568      	movs	r5, #104	; 0x68
 8005bc4:	1e4a      	subs	r2, r1, #1
 8005bc6:	4355      	muls	r5, r2
 8005bc8:	000e      	movs	r6, r1
 8005bca:	0029      	movs	r1, r5
 8005bcc:	3174      	adds	r1, #116	; 0x74
 8005bce:	f7ff fabd 	bl	800514c <_malloc_r>
 8005bd2:	1e04      	subs	r4, r0, #0
 8005bd4:	d008      	beq.n	8005be8 <__sfmoreglue+0x28>
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	002a      	movs	r2, r5
 8005bda:	6001      	str	r1, [r0, #0]
 8005bdc:	6046      	str	r6, [r0, #4]
 8005bde:	300c      	adds	r0, #12
 8005be0:	60a0      	str	r0, [r4, #8]
 8005be2:	3268      	adds	r2, #104	; 0x68
 8005be4:	f7ff f9c7 	bl	8004f76 <memset>
 8005be8:	0020      	movs	r0, r4
 8005bea:	bd70      	pop	{r4, r5, r6, pc}

08005bec <__sfp_lock_acquire>:
 8005bec:	b510      	push	{r4, lr}
 8005bee:	4802      	ldr	r0, [pc, #8]	; (8005bf8 <__sfp_lock_acquire+0xc>)
 8005bf0:	f000 f8bd 	bl	8005d6e <__retarget_lock_acquire_recursive>
 8005bf4:	bd10      	pop	{r4, pc}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	20000269 	.word	0x20000269

08005bfc <__sfp_lock_release>:
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	4802      	ldr	r0, [pc, #8]	; (8005c08 <__sfp_lock_release+0xc>)
 8005c00:	f000 f8b6 	bl	8005d70 <__retarget_lock_release_recursive>
 8005c04:	bd10      	pop	{r4, pc}
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	20000269 	.word	0x20000269

08005c0c <__sinit_lock_acquire>:
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	4802      	ldr	r0, [pc, #8]	; (8005c18 <__sinit_lock_acquire+0xc>)
 8005c10:	f000 f8ad 	bl	8005d6e <__retarget_lock_acquire_recursive>
 8005c14:	bd10      	pop	{r4, pc}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	2000026a 	.word	0x2000026a

08005c1c <__sinit_lock_release>:
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	4802      	ldr	r0, [pc, #8]	; (8005c28 <__sinit_lock_release+0xc>)
 8005c20:	f000 f8a6 	bl	8005d70 <__retarget_lock_release_recursive>
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	2000026a 	.word	0x2000026a

08005c2c <__sinit>:
 8005c2c:	b513      	push	{r0, r1, r4, lr}
 8005c2e:	0004      	movs	r4, r0
 8005c30:	f7ff ffec 	bl	8005c0c <__sinit_lock_acquire>
 8005c34:	69a3      	ldr	r3, [r4, #24]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <__sinit+0x14>
 8005c3a:	f7ff ffef 	bl	8005c1c <__sinit_lock_release>
 8005c3e:	bd13      	pop	{r0, r1, r4, pc}
 8005c40:	64a3      	str	r3, [r4, #72]	; 0x48
 8005c42:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005c44:	6523      	str	r3, [r4, #80]	; 0x50
 8005c46:	4b13      	ldr	r3, [pc, #76]	; (8005c94 <__sinit+0x68>)
 8005c48:	4a13      	ldr	r2, [pc, #76]	; (8005c98 <__sinit+0x6c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c4e:	9301      	str	r3, [sp, #4]
 8005c50:	42a3      	cmp	r3, r4
 8005c52:	d101      	bne.n	8005c58 <__sinit+0x2c>
 8005c54:	2301      	movs	r3, #1
 8005c56:	61a3      	str	r3, [r4, #24]
 8005c58:	0020      	movs	r0, r4
 8005c5a:	f000 f81f 	bl	8005c9c <__sfp>
 8005c5e:	6060      	str	r0, [r4, #4]
 8005c60:	0020      	movs	r0, r4
 8005c62:	f000 f81b 	bl	8005c9c <__sfp>
 8005c66:	60a0      	str	r0, [r4, #8]
 8005c68:	0020      	movs	r0, r4
 8005c6a:	f000 f817 	bl	8005c9c <__sfp>
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2104      	movs	r1, #4
 8005c72:	60e0      	str	r0, [r4, #12]
 8005c74:	6860      	ldr	r0, [r4, #4]
 8005c76:	f7ff ff77 	bl	8005b68 <std>
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	2109      	movs	r1, #9
 8005c7e:	68a0      	ldr	r0, [r4, #8]
 8005c80:	f7ff ff72 	bl	8005b68 <std>
 8005c84:	2202      	movs	r2, #2
 8005c86:	2112      	movs	r1, #18
 8005c88:	68e0      	ldr	r0, [r4, #12]
 8005c8a:	f7ff ff6d 	bl	8005b68 <std>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	61a3      	str	r3, [r4, #24]
 8005c92:	e7d2      	b.n	8005c3a <__sinit+0xe>
 8005c94:	080061a0 	.word	0x080061a0
 8005c98:	08005bb1 	.word	0x08005bb1

08005c9c <__sfp>:
 8005c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9e:	0007      	movs	r7, r0
 8005ca0:	f7ff ffa4 	bl	8005bec <__sfp_lock_acquire>
 8005ca4:	4b1f      	ldr	r3, [pc, #124]	; (8005d24 <__sfp+0x88>)
 8005ca6:	681e      	ldr	r6, [r3, #0]
 8005ca8:	69b3      	ldr	r3, [r6, #24]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d102      	bne.n	8005cb4 <__sfp+0x18>
 8005cae:	0030      	movs	r0, r6
 8005cb0:	f7ff ffbc 	bl	8005c2c <__sinit>
 8005cb4:	3648      	adds	r6, #72	; 0x48
 8005cb6:	68b4      	ldr	r4, [r6, #8]
 8005cb8:	6873      	ldr	r3, [r6, #4]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	d504      	bpl.n	8005cc8 <__sfp+0x2c>
 8005cbe:	6833      	ldr	r3, [r6, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d022      	beq.n	8005d0a <__sfp+0x6e>
 8005cc4:	6836      	ldr	r6, [r6, #0]
 8005cc6:	e7f6      	b.n	8005cb6 <__sfp+0x1a>
 8005cc8:	220c      	movs	r2, #12
 8005cca:	5ea5      	ldrsh	r5, [r4, r2]
 8005ccc:	2d00      	cmp	r5, #0
 8005cce:	d11a      	bne.n	8005d06 <__sfp+0x6a>
 8005cd0:	0020      	movs	r0, r4
 8005cd2:	4b15      	ldr	r3, [pc, #84]	; (8005d28 <__sfp+0x8c>)
 8005cd4:	3058      	adds	r0, #88	; 0x58
 8005cd6:	60e3      	str	r3, [r4, #12]
 8005cd8:	6665      	str	r5, [r4, #100]	; 0x64
 8005cda:	f000 f847 	bl	8005d6c <__retarget_lock_init_recursive>
 8005cde:	f7ff ff8d 	bl	8005bfc <__sfp_lock_release>
 8005ce2:	0020      	movs	r0, r4
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	0029      	movs	r1, r5
 8005ce8:	6025      	str	r5, [r4, #0]
 8005cea:	60a5      	str	r5, [r4, #8]
 8005cec:	6065      	str	r5, [r4, #4]
 8005cee:	6125      	str	r5, [r4, #16]
 8005cf0:	6165      	str	r5, [r4, #20]
 8005cf2:	61a5      	str	r5, [r4, #24]
 8005cf4:	305c      	adds	r0, #92	; 0x5c
 8005cf6:	f7ff f93e 	bl	8004f76 <memset>
 8005cfa:	6365      	str	r5, [r4, #52]	; 0x34
 8005cfc:	63a5      	str	r5, [r4, #56]	; 0x38
 8005cfe:	64a5      	str	r5, [r4, #72]	; 0x48
 8005d00:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005d02:	0020      	movs	r0, r4
 8005d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d06:	3468      	adds	r4, #104	; 0x68
 8005d08:	e7d7      	b.n	8005cba <__sfp+0x1e>
 8005d0a:	2104      	movs	r1, #4
 8005d0c:	0038      	movs	r0, r7
 8005d0e:	f7ff ff57 	bl	8005bc0 <__sfmoreglue>
 8005d12:	1e04      	subs	r4, r0, #0
 8005d14:	6030      	str	r0, [r6, #0]
 8005d16:	d1d5      	bne.n	8005cc4 <__sfp+0x28>
 8005d18:	f7ff ff70 	bl	8005bfc <__sfp_lock_release>
 8005d1c:	230c      	movs	r3, #12
 8005d1e:	603b      	str	r3, [r7, #0]
 8005d20:	e7ef      	b.n	8005d02 <__sfp+0x66>
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	080061a0 	.word	0x080061a0
 8005d28:	ffff0001 	.word	0xffff0001

08005d2c <_fwalk_reent>:
 8005d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d2e:	0004      	movs	r4, r0
 8005d30:	0006      	movs	r6, r0
 8005d32:	2700      	movs	r7, #0
 8005d34:	9101      	str	r1, [sp, #4]
 8005d36:	3448      	adds	r4, #72	; 0x48
 8005d38:	6863      	ldr	r3, [r4, #4]
 8005d3a:	68a5      	ldr	r5, [r4, #8]
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	9b00      	ldr	r3, [sp, #0]
 8005d40:	3b01      	subs	r3, #1
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	d504      	bpl.n	8005d50 <_fwalk_reent+0x24>
 8005d46:	6824      	ldr	r4, [r4, #0]
 8005d48:	2c00      	cmp	r4, #0
 8005d4a:	d1f5      	bne.n	8005d38 <_fwalk_reent+0xc>
 8005d4c:	0038      	movs	r0, r7
 8005d4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d50:	89ab      	ldrh	r3, [r5, #12]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d908      	bls.n	8005d68 <_fwalk_reent+0x3c>
 8005d56:	220e      	movs	r2, #14
 8005d58:	5eab      	ldrsh	r3, [r5, r2]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	d004      	beq.n	8005d68 <_fwalk_reent+0x3c>
 8005d5e:	0029      	movs	r1, r5
 8005d60:	0030      	movs	r0, r6
 8005d62:	9b01      	ldr	r3, [sp, #4]
 8005d64:	4798      	blx	r3
 8005d66:	4307      	orrs	r7, r0
 8005d68:	3568      	adds	r5, #104	; 0x68
 8005d6a:	e7e8      	b.n	8005d3e <_fwalk_reent+0x12>

08005d6c <__retarget_lock_init_recursive>:
 8005d6c:	4770      	bx	lr

08005d6e <__retarget_lock_acquire_recursive>:
 8005d6e:	4770      	bx	lr

08005d70 <__retarget_lock_release_recursive>:
 8005d70:	4770      	bx	lr
	...

08005d74 <__swhatbuf_r>:
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	000e      	movs	r6, r1
 8005d78:	001d      	movs	r5, r3
 8005d7a:	230e      	movs	r3, #14
 8005d7c:	5ec9      	ldrsh	r1, [r1, r3]
 8005d7e:	0014      	movs	r4, r2
 8005d80:	b096      	sub	sp, #88	; 0x58
 8005d82:	2900      	cmp	r1, #0
 8005d84:	da08      	bge.n	8005d98 <__swhatbuf_r+0x24>
 8005d86:	220c      	movs	r2, #12
 8005d88:	5eb3      	ldrsh	r3, [r6, r2]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	602a      	str	r2, [r5, #0]
 8005d8e:	061b      	lsls	r3, r3, #24
 8005d90:	d411      	bmi.n	8005db6 <__swhatbuf_r+0x42>
 8005d92:	2380      	movs	r3, #128	; 0x80
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	e00f      	b.n	8005db8 <__swhatbuf_r+0x44>
 8005d98:	466a      	mov	r2, sp
 8005d9a:	f000 f92f 	bl	8005ffc <_fstat_r>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	dbf1      	blt.n	8005d86 <__swhatbuf_r+0x12>
 8005da2:	23f0      	movs	r3, #240	; 0xf0
 8005da4:	9901      	ldr	r1, [sp, #4]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	4019      	ands	r1, r3
 8005daa:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <__swhatbuf_r+0x4c>)
 8005dac:	18c9      	adds	r1, r1, r3
 8005dae:	424b      	negs	r3, r1
 8005db0:	4159      	adcs	r1, r3
 8005db2:	6029      	str	r1, [r5, #0]
 8005db4:	e7ed      	b.n	8005d92 <__swhatbuf_r+0x1e>
 8005db6:	2340      	movs	r3, #64	; 0x40
 8005db8:	2000      	movs	r0, #0
 8005dba:	6023      	str	r3, [r4, #0]
 8005dbc:	b016      	add	sp, #88	; 0x58
 8005dbe:	bd70      	pop	{r4, r5, r6, pc}
 8005dc0:	ffffe000 	.word	0xffffe000

08005dc4 <__smakebuf_r>:
 8005dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dc6:	2602      	movs	r6, #2
 8005dc8:	898b      	ldrh	r3, [r1, #12]
 8005dca:	0005      	movs	r5, r0
 8005dcc:	000c      	movs	r4, r1
 8005dce:	4233      	tst	r3, r6
 8005dd0:	d006      	beq.n	8005de0 <__smakebuf_r+0x1c>
 8005dd2:	0023      	movs	r3, r4
 8005dd4:	3347      	adds	r3, #71	; 0x47
 8005dd6:	6023      	str	r3, [r4, #0]
 8005dd8:	6123      	str	r3, [r4, #16]
 8005dda:	2301      	movs	r3, #1
 8005ddc:	6163      	str	r3, [r4, #20]
 8005dde:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005de0:	466a      	mov	r2, sp
 8005de2:	ab01      	add	r3, sp, #4
 8005de4:	f7ff ffc6 	bl	8005d74 <__swhatbuf_r>
 8005de8:	9900      	ldr	r1, [sp, #0]
 8005dea:	0007      	movs	r7, r0
 8005dec:	0028      	movs	r0, r5
 8005dee:	f7ff f9ad 	bl	800514c <_malloc_r>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d108      	bne.n	8005e08 <__smakebuf_r+0x44>
 8005df6:	220c      	movs	r2, #12
 8005df8:	5ea3      	ldrsh	r3, [r4, r2]
 8005dfa:	059a      	lsls	r2, r3, #22
 8005dfc:	d4ef      	bmi.n	8005dde <__smakebuf_r+0x1a>
 8005dfe:	2203      	movs	r2, #3
 8005e00:	4393      	bics	r3, r2
 8005e02:	431e      	orrs	r6, r3
 8005e04:	81a6      	strh	r6, [r4, #12]
 8005e06:	e7e4      	b.n	8005dd2 <__smakebuf_r+0xe>
 8005e08:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <__smakebuf_r+0x84>)
 8005e0a:	62ab      	str	r3, [r5, #40]	; 0x28
 8005e0c:	2380      	movs	r3, #128	; 0x80
 8005e0e:	89a2      	ldrh	r2, [r4, #12]
 8005e10:	6020      	str	r0, [r4, #0]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	81a3      	strh	r3, [r4, #12]
 8005e16:	9b00      	ldr	r3, [sp, #0]
 8005e18:	6120      	str	r0, [r4, #16]
 8005e1a:	6163      	str	r3, [r4, #20]
 8005e1c:	9b01      	ldr	r3, [sp, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00d      	beq.n	8005e3e <__smakebuf_r+0x7a>
 8005e22:	0028      	movs	r0, r5
 8005e24:	230e      	movs	r3, #14
 8005e26:	5ee1      	ldrsh	r1, [r4, r3]
 8005e28:	f000 f8fa 	bl	8006020 <_isatty_r>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d006      	beq.n	8005e3e <__smakebuf_r+0x7a>
 8005e30:	2203      	movs	r2, #3
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	4393      	bics	r3, r2
 8005e36:	001a      	movs	r2, r3
 8005e38:	2301      	movs	r3, #1
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	81a3      	strh	r3, [r4, #12]
 8005e3e:	89a0      	ldrh	r0, [r4, #12]
 8005e40:	4307      	orrs	r7, r0
 8005e42:	81a7      	strh	r7, [r4, #12]
 8005e44:	e7cb      	b.n	8005dde <__smakebuf_r+0x1a>
 8005e46:	46c0      	nop			; (mov r8, r8)
 8005e48:	08005bb1 	.word	0x08005bb1

08005e4c <memchr>:
 8005e4c:	b2c9      	uxtb	r1, r1
 8005e4e:	1882      	adds	r2, r0, r2
 8005e50:	4290      	cmp	r0, r2
 8005e52:	d101      	bne.n	8005e58 <memchr+0xc>
 8005e54:	2000      	movs	r0, #0
 8005e56:	4770      	bx	lr
 8005e58:	7803      	ldrb	r3, [r0, #0]
 8005e5a:	428b      	cmp	r3, r1
 8005e5c:	d0fb      	beq.n	8005e56 <memchr+0xa>
 8005e5e:	3001      	adds	r0, #1
 8005e60:	e7f6      	b.n	8005e50 <memchr+0x4>
	...

08005e64 <__malloc_lock>:
 8005e64:	b510      	push	{r4, lr}
 8005e66:	4802      	ldr	r0, [pc, #8]	; (8005e70 <__malloc_lock+0xc>)
 8005e68:	f7ff ff81 	bl	8005d6e <__retarget_lock_acquire_recursive>
 8005e6c:	bd10      	pop	{r4, pc}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	20000268 	.word	0x20000268

08005e74 <__malloc_unlock>:
 8005e74:	b510      	push	{r4, lr}
 8005e76:	4802      	ldr	r0, [pc, #8]	; (8005e80 <__malloc_unlock+0xc>)
 8005e78:	f7ff ff7a 	bl	8005d70 <__retarget_lock_release_recursive>
 8005e7c:	bd10      	pop	{r4, pc}
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	20000268 	.word	0x20000268

08005e84 <_raise_r>:
 8005e84:	b570      	push	{r4, r5, r6, lr}
 8005e86:	0004      	movs	r4, r0
 8005e88:	000d      	movs	r5, r1
 8005e8a:	291f      	cmp	r1, #31
 8005e8c:	d904      	bls.n	8005e98 <_raise_r+0x14>
 8005e8e:	2316      	movs	r3, #22
 8005e90:	6003      	str	r3, [r0, #0]
 8005e92:	2001      	movs	r0, #1
 8005e94:	4240      	negs	r0, r0
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
 8005e98:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d004      	beq.n	8005ea8 <_raise_r+0x24>
 8005e9e:	008a      	lsls	r2, r1, #2
 8005ea0:	189b      	adds	r3, r3, r2
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	2a00      	cmp	r2, #0
 8005ea6:	d108      	bne.n	8005eba <_raise_r+0x36>
 8005ea8:	0020      	movs	r0, r4
 8005eaa:	f000 f831 	bl	8005f10 <_getpid_r>
 8005eae:	002a      	movs	r2, r5
 8005eb0:	0001      	movs	r1, r0
 8005eb2:	0020      	movs	r0, r4
 8005eb4:	f000 f81a 	bl	8005eec <_kill_r>
 8005eb8:	e7ed      	b.n	8005e96 <_raise_r+0x12>
 8005eba:	2000      	movs	r0, #0
 8005ebc:	2a01      	cmp	r2, #1
 8005ebe:	d0ea      	beq.n	8005e96 <_raise_r+0x12>
 8005ec0:	1c51      	adds	r1, r2, #1
 8005ec2:	d103      	bne.n	8005ecc <_raise_r+0x48>
 8005ec4:	2316      	movs	r3, #22
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	e7e4      	b.n	8005e96 <_raise_r+0x12>
 8005ecc:	2400      	movs	r4, #0
 8005ece:	0028      	movs	r0, r5
 8005ed0:	601c      	str	r4, [r3, #0]
 8005ed2:	4790      	blx	r2
 8005ed4:	0020      	movs	r0, r4
 8005ed6:	e7de      	b.n	8005e96 <_raise_r+0x12>

08005ed8 <raise>:
 8005ed8:	b510      	push	{r4, lr}
 8005eda:	4b03      	ldr	r3, [pc, #12]	; (8005ee8 <raise+0x10>)
 8005edc:	0001      	movs	r1, r0
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	f7ff ffd0 	bl	8005e84 <_raise_r>
 8005ee4:	bd10      	pop	{r4, pc}
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	20000010 	.word	0x20000010

08005eec <_kill_r>:
 8005eec:	2300      	movs	r3, #0
 8005eee:	b570      	push	{r4, r5, r6, lr}
 8005ef0:	4d06      	ldr	r5, [pc, #24]	; (8005f0c <_kill_r+0x20>)
 8005ef2:	0004      	movs	r4, r0
 8005ef4:	0008      	movs	r0, r1
 8005ef6:	0011      	movs	r1, r2
 8005ef8:	602b      	str	r3, [r5, #0]
 8005efa:	f7fc f93b 	bl	8002174 <_kill>
 8005efe:	1c43      	adds	r3, r0, #1
 8005f00:	d103      	bne.n	8005f0a <_kill_r+0x1e>
 8005f02:	682b      	ldr	r3, [r5, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d000      	beq.n	8005f0a <_kill_r+0x1e>
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	bd70      	pop	{r4, r5, r6, pc}
 8005f0c:	2000026c 	.word	0x2000026c

08005f10 <_getpid_r>:
 8005f10:	b510      	push	{r4, lr}
 8005f12:	f7fc f929 	bl	8002168 <_getpid>
 8005f16:	bd10      	pop	{r4, pc}

08005f18 <__sread>:
 8005f18:	b570      	push	{r4, r5, r6, lr}
 8005f1a:	000c      	movs	r4, r1
 8005f1c:	250e      	movs	r5, #14
 8005f1e:	5f49      	ldrsh	r1, [r1, r5]
 8005f20:	f000 f8a4 	bl	800606c <_read_r>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	db03      	blt.n	8005f30 <__sread+0x18>
 8005f28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f2a:	181b      	adds	r3, r3, r0
 8005f2c:	6563      	str	r3, [r4, #84]	; 0x54
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	4a02      	ldr	r2, [pc, #8]	; (8005f3c <__sread+0x24>)
 8005f34:	4013      	ands	r3, r2
 8005f36:	81a3      	strh	r3, [r4, #12]
 8005f38:	e7f9      	b.n	8005f2e <__sread+0x16>
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	ffffefff 	.word	0xffffefff

08005f40 <__swrite>:
 8005f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f42:	001f      	movs	r7, r3
 8005f44:	898b      	ldrh	r3, [r1, #12]
 8005f46:	0005      	movs	r5, r0
 8005f48:	000c      	movs	r4, r1
 8005f4a:	0016      	movs	r6, r2
 8005f4c:	05db      	lsls	r3, r3, #23
 8005f4e:	d505      	bpl.n	8005f5c <__swrite+0x1c>
 8005f50:	230e      	movs	r3, #14
 8005f52:	5ec9      	ldrsh	r1, [r1, r3]
 8005f54:	2200      	movs	r2, #0
 8005f56:	2302      	movs	r3, #2
 8005f58:	f000 f874 	bl	8006044 <_lseek_r>
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	4a05      	ldr	r2, [pc, #20]	; (8005f74 <__swrite+0x34>)
 8005f60:	0028      	movs	r0, r5
 8005f62:	4013      	ands	r3, r2
 8005f64:	81a3      	strh	r3, [r4, #12]
 8005f66:	0032      	movs	r2, r6
 8005f68:	230e      	movs	r3, #14
 8005f6a:	5ee1      	ldrsh	r1, [r4, r3]
 8005f6c:	003b      	movs	r3, r7
 8005f6e:	f000 f81f 	bl	8005fb0 <_write_r>
 8005f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f74:	ffffefff 	.word	0xffffefff

08005f78 <__sseek>:
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	000c      	movs	r4, r1
 8005f7c:	250e      	movs	r5, #14
 8005f7e:	5f49      	ldrsh	r1, [r1, r5]
 8005f80:	f000 f860 	bl	8006044 <_lseek_r>
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	1c42      	adds	r2, r0, #1
 8005f88:	d103      	bne.n	8005f92 <__sseek+0x1a>
 8005f8a:	4a05      	ldr	r2, [pc, #20]	; (8005fa0 <__sseek+0x28>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	bd70      	pop	{r4, r5, r6, pc}
 8005f92:	2280      	movs	r2, #128	; 0x80
 8005f94:	0152      	lsls	r2, r2, #5
 8005f96:	4313      	orrs	r3, r2
 8005f98:	81a3      	strh	r3, [r4, #12]
 8005f9a:	6560      	str	r0, [r4, #84]	; 0x54
 8005f9c:	e7f8      	b.n	8005f90 <__sseek+0x18>
 8005f9e:	46c0      	nop			; (mov r8, r8)
 8005fa0:	ffffefff 	.word	0xffffefff

08005fa4 <__sclose>:
 8005fa4:	b510      	push	{r4, lr}
 8005fa6:	230e      	movs	r3, #14
 8005fa8:	5ec9      	ldrsh	r1, [r1, r3]
 8005faa:	f000 f815 	bl	8005fd8 <_close_r>
 8005fae:	bd10      	pop	{r4, pc}

08005fb0 <_write_r>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	0004      	movs	r4, r0
 8005fb4:	0008      	movs	r0, r1
 8005fb6:	0011      	movs	r1, r2
 8005fb8:	001a      	movs	r2, r3
 8005fba:	2300      	movs	r3, #0
 8005fbc:	4d05      	ldr	r5, [pc, #20]	; (8005fd4 <_write_r+0x24>)
 8005fbe:	602b      	str	r3, [r5, #0]
 8005fc0:	f7fc f911 	bl	80021e6 <_write>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d103      	bne.n	8005fd0 <_write_r+0x20>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d000      	beq.n	8005fd0 <_write_r+0x20>
 8005fce:	6023      	str	r3, [r4, #0]
 8005fd0:	bd70      	pop	{r4, r5, r6, pc}
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	2000026c 	.word	0x2000026c

08005fd8 <_close_r>:
 8005fd8:	2300      	movs	r3, #0
 8005fda:	b570      	push	{r4, r5, r6, lr}
 8005fdc:	4d06      	ldr	r5, [pc, #24]	; (8005ff8 <_close_r+0x20>)
 8005fde:	0004      	movs	r4, r0
 8005fe0:	0008      	movs	r0, r1
 8005fe2:	602b      	str	r3, [r5, #0]
 8005fe4:	f7fc f91b 	bl	800221e <_close>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d103      	bne.n	8005ff4 <_close_r+0x1c>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d000      	beq.n	8005ff4 <_close_r+0x1c>
 8005ff2:	6023      	str	r3, [r4, #0]
 8005ff4:	bd70      	pop	{r4, r5, r6, pc}
 8005ff6:	46c0      	nop			; (mov r8, r8)
 8005ff8:	2000026c 	.word	0x2000026c

08005ffc <_fstat_r>:
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	b570      	push	{r4, r5, r6, lr}
 8006000:	4d06      	ldr	r5, [pc, #24]	; (800601c <_fstat_r+0x20>)
 8006002:	0004      	movs	r4, r0
 8006004:	0008      	movs	r0, r1
 8006006:	0011      	movs	r1, r2
 8006008:	602b      	str	r3, [r5, #0]
 800600a:	f7fc f912 	bl	8002232 <_fstat>
 800600e:	1c43      	adds	r3, r0, #1
 8006010:	d103      	bne.n	800601a <_fstat_r+0x1e>
 8006012:	682b      	ldr	r3, [r5, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d000      	beq.n	800601a <_fstat_r+0x1e>
 8006018:	6023      	str	r3, [r4, #0]
 800601a:	bd70      	pop	{r4, r5, r6, pc}
 800601c:	2000026c 	.word	0x2000026c

08006020 <_isatty_r>:
 8006020:	2300      	movs	r3, #0
 8006022:	b570      	push	{r4, r5, r6, lr}
 8006024:	4d06      	ldr	r5, [pc, #24]	; (8006040 <_isatty_r+0x20>)
 8006026:	0004      	movs	r4, r0
 8006028:	0008      	movs	r0, r1
 800602a:	602b      	str	r3, [r5, #0]
 800602c:	f7fc f90f 	bl	800224e <_isatty>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d103      	bne.n	800603c <_isatty_r+0x1c>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d000      	beq.n	800603c <_isatty_r+0x1c>
 800603a:	6023      	str	r3, [r4, #0]
 800603c:	bd70      	pop	{r4, r5, r6, pc}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	2000026c 	.word	0x2000026c

08006044 <_lseek_r>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	0004      	movs	r4, r0
 8006048:	0008      	movs	r0, r1
 800604a:	0011      	movs	r1, r2
 800604c:	001a      	movs	r2, r3
 800604e:	2300      	movs	r3, #0
 8006050:	4d05      	ldr	r5, [pc, #20]	; (8006068 <_lseek_r+0x24>)
 8006052:	602b      	str	r3, [r5, #0]
 8006054:	f7fc f904 	bl	8002260 <_lseek>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	d103      	bne.n	8006064 <_lseek_r+0x20>
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d000      	beq.n	8006064 <_lseek_r+0x20>
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	bd70      	pop	{r4, r5, r6, pc}
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	2000026c 	.word	0x2000026c

0800606c <_read_r>:
 800606c:	b570      	push	{r4, r5, r6, lr}
 800606e:	0004      	movs	r4, r0
 8006070:	0008      	movs	r0, r1
 8006072:	0011      	movs	r1, r2
 8006074:	001a      	movs	r2, r3
 8006076:	2300      	movs	r3, #0
 8006078:	4d05      	ldr	r5, [pc, #20]	; (8006090 <_read_r+0x24>)
 800607a:	602b      	str	r3, [r5, #0]
 800607c:	f7fc f896 	bl	80021ac <_read>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d103      	bne.n	800608c <_read_r+0x20>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d000      	beq.n	800608c <_read_r+0x20>
 800608a:	6023      	str	r3, [r4, #0]
 800608c:	bd70      	pop	{r4, r5, r6, pc}
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	2000026c 	.word	0x2000026c

08006094 <_init>:
 8006094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006096:	46c0      	nop			; (mov r8, r8)
 8006098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609a:	bc08      	pop	{r3}
 800609c:	469e      	mov	lr, r3
 800609e:	4770      	bx	lr

080060a0 <_fini>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a6:	bc08      	pop	{r3}
 80060a8:	469e      	mov	lr, r3
 80060aa:	4770      	bx	lr

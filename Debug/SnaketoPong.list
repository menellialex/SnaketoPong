
SnaketoPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000471c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080047d8  080047d8  000147d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004880  08004880  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004880  08004880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004888  08004888  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004888  08004888  00014888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800488c  0800488c  0001488c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000010  080048a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  080048a0  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c79  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ced  00000000  00000000  00034cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  000379a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00038ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b2f  00000000  00000000  00039ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015676  00000000  00000000  0003d5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3971  00000000  00000000  00052c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f65de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dac  00000000  00000000  000f6630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080047c0 	.word	0x080047c0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	080047c0 	.word	0x080047c0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <spi_msg_out>:
// to HAL_SPI_Transmit(&hspi2 ...) won't build.




static void spi_msg_out(DOGS_packet pkt){
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	8018      	strh	r0, [r3, #0]
	const int16_t twelve_us = 20;
 8000626:	2312      	movs	r3, #18
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	2214      	movs	r2, #20
 800062c:	801a      	strh	r2, [r3, #0]
	const uint32_t SPI_timeout = 100;
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	60fb      	str	r3, [r7, #12]
	// Pulse the CS line high to mark change-of-packet
	// GPIOD->ODR |= GPIO_ODR_OD9;
	//  -- or, in HAL notation -- //
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);  // * GPIO_PIN_9 == 1<<9
 8000632:	2380      	movs	r3, #128	; 0x80
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	481e      	ldr	r0, [pc, #120]	; (80006b0 <spi_msg_out+0x94>)
 8000638:	2201      	movs	r2, #1
 800063a:	0019      	movs	r1, r3
 800063c:	f001 fd92 	bl	8002164 <HAL_GPIO_WritePin>
	for (int32_t i = 0; i<twelve_us; i++)
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	e002      	b.n	800064c <spi_msg_out+0x30>
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	3301      	adds	r3, #1
 800064a:	617b      	str	r3, [r7, #20]
 800064c:	2312      	movs	r3, #18
 800064e:	18fb      	adds	r3, r7, r3
 8000650:	2200      	movs	r2, #0
 8000652:	5e9b      	ldrsh	r3, [r3, r2]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	429a      	cmp	r2, r3
 8000658:	dbf5      	blt.n	8000646 <spi_msg_out+0x2a>
	   {;}                   // just counting to waste time for about 12 us
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800065a:	2380      	movs	r3, #128	; 0x80
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4814      	ldr	r0, [pc, #80]	; (80006b0 <spi_msg_out+0x94>)
 8000660:	2200      	movs	r2, #0
 8000662:	0019      	movs	r1, r3
 8000664:	f001 fd7e 	bl	8002164 <HAL_GPIO_WritePin>

	// Assert the Command/Data line
	if (pkt.nCD){
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2201      	movs	r2, #1
 800066e:	4013      	ands	r3, r2
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d008      	beq.n	8000688 <spi_msg_out+0x6c>
       GPIOA->ODR |= GPIO_ODR_OD1;
 8000676:	23a0      	movs	r3, #160	; 0xa0
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	695a      	ldr	r2, [r3, #20]
 800067c:	23a0      	movs	r3, #160	; 0xa0
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	2102      	movs	r1, #2
 8000682:	430a      	orrs	r2, r1
 8000684:	615a      	str	r2, [r3, #20]
 8000686:	e007      	b.n	8000698 <spi_msg_out+0x7c>
	}else{
        GPIOA->ODR &=~ GPIO_ODR_OD1;
 8000688:	23a0      	movs	r3, #160	; 0xa0
 800068a:	05db      	lsls	r3, r3, #23
 800068c:	695a      	ldr	r2, [r3, #20]
 800068e:	23a0      	movs	r3, #160	; 0xa0
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	2102      	movs	r1, #2
 8000694:	438a      	bics	r2, r1
 8000696:	615a      	str	r2, [r3, #20]

	// Send one packet (a byte).
	// Use the HAL.
	// SPI1: Send 1 byte of pkt.byte, and timeout only after 100 ticks
	// EXPECT ABOUT 16 us of delay from PD_6 low to SCK action.
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&pkt.byte, 1, SPI_timeout);
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	1c59      	adds	r1, r3, #1
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <spi_msg_out+0x98>)
 80006a0:	0013      	movs	r3, r2
 80006a2:	2201      	movs	r2, #1
 80006a4:	f002 fcfc 	bl	80030a0 <HAL_SPI_Transmit>
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b006      	add	sp, #24
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	50000c00 	.word	0x50000c00
 80006b4:	2000002c 	.word	0x2000002c

080006b8 <display_init>:
	{0, 0x81},  // Set volume = contrast
	{0, 0x02},
	{0, 0xaf}  // Display Active!
}; // Send another "!" shape

void display_init(void){
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b087      	sub	sp, #28
 80006bc:	af00      	add	r7, sp, #0

	const uint32_t five_ms = 40000;
 80006be:	4b36      	ldr	r3, [pc, #216]	; (8000798 <display_init+0xe0>)
 80006c0:	607b      	str	r3, [r7, #4]
	const int init_stream_length = sizeof(init_stream)/ sizeof(init_stream[0]);
 80006c2:	230b      	movs	r3, #11
 80006c4:	603b      	str	r3, [r7, #0]
	// - LET CUBEMX CONFIGURE REGISTERS // config_periph();
	// Hardware reset first:
	HAL_GPIO_WritePin(DOGS_reset_GPIO_Port, DOGS_reset_Pin, GPIO_PIN_RESET);
 80006c6:	23a0      	movs	r3, #160	; 0xa0
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	2200      	movs	r2, #0
 80006cc:	2101      	movs	r1, #1
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 fd48 	bl	8002164 <HAL_GPIO_WritePin>
	// Or use the bit-banging method to do the same thing:
	GPIOA->ODR &=~ GPIO_ODR_OD0; // nReset Low
 80006d4:	23a0      	movs	r3, #160	; 0xa0
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	695a      	ldr	r2, [r3, #20]
 80006da:	23a0      	movs	r3, #160	; 0xa0
 80006dc:	05db      	lsls	r3, r3, #23
 80006de:	2101      	movs	r1, #1
 80006e0:	438a      	bics	r2, r1
 80006e2:	615a      	str	r2, [r3, #20]

	GPIOA->ODR |= GPIO_ODR_OD1;  // nCS high -
 80006e4:	23a0      	movs	r3, #160	; 0xa0
 80006e6:	05db      	lsls	r3, r3, #23
 80006e8:	695a      	ldr	r2, [r3, #20]
 80006ea:	23a0      	movs	r3, #160	; 0xa0
 80006ec:	05db      	lsls	r3, r3, #23
 80006ee:	2102      	movs	r1, #2
 80006f0:	430a      	orrs	r2, r1
 80006f2:	615a      	str	r2, [r3, #20]

	for (uint32_t i = 0; i < five_ms; i++){;} // pause 5 ms
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	e002      	b.n	8000700 <display_init+0x48>
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3301      	adds	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	697a      	ldr	r2, [r7, #20]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	429a      	cmp	r2, r3
 8000706:	d3f8      	bcc.n	80006fa <display_init+0x42>

	GPIOA->ODR |= GPIO_ODR_OD0; // nReset High
 8000708:	23a0      	movs	r3, #160	; 0xa0
 800070a:	05db      	lsls	r3, r3, #23
 800070c:	695a      	ldr	r2, [r3, #20]
 800070e:	23a0      	movs	r3, #160	; 0xa0
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	2101      	movs	r1, #1
 8000714:	430a      	orrs	r2, r1
 8000716:	615a      	str	r2, [r3, #20]

	for (uint32_t i = 0; i < five_ms; i++){;} // pause 5 ms
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	e002      	b.n	8000724 <display_init+0x6c>
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	3301      	adds	r3, #1
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	d3f8      	bcc.n	800071e <display_init+0x66>

	GPIOA->ODR &= ~GPIO_ODR_OD1;  // nCS low
 800072c:	23a0      	movs	r3, #160	; 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	695a      	ldr	r2, [r3, #20]
 8000732:	23a0      	movs	r3, #160	; 0xa0
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	2102      	movs	r1, #2
 8000738:	438a      	bics	r2, r1
 800073a:	615a      	str	r2, [r3, #20]
	for (uint32_t i = 0; i < five_ms; i++){;} // pause 5 ms
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	e002      	b.n	8000748 <display_init+0x90>
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	3301      	adds	r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	d3f8      	bcc.n	8000742 <display_init+0x8a>

	// Initialize the DOGS with a 11-command stream, then send a simple image to plot
	for (uint16_t init_index = 0; init_index < init_stream_length; init_index++){
 8000750:	230a      	movs	r3, #10
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	2200      	movs	r2, #0
 8000756:	801a      	strh	r2, [r3, #0]
 8000758:	e013      	b.n	8000782 <display_init+0xca>
        spi_msg_out(init_stream[init_index]);
 800075a:	240a      	movs	r4, #10
 800075c:	193b      	adds	r3, r7, r4
 800075e:	881a      	ldrh	r2, [r3, #0]
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <display_init+0xe4>)
 8000762:	0052      	lsls	r2, r2, #1
 8000764:	5ad2      	ldrh	r2, [r2, r3]
 8000766:	2300      	movs	r3, #0
 8000768:	0412      	lsls	r2, r2, #16
 800076a:	0c12      	lsrs	r2, r2, #16
 800076c:	0c1b      	lsrs	r3, r3, #16
 800076e:	041b      	lsls	r3, r3, #16
 8000770:	4313      	orrs	r3, r2
 8000772:	0018      	movs	r0, r3
 8000774:	f7ff ff52 	bl	800061c <spi_msg_out>
	for (uint16_t init_index = 0; init_index < init_stream_length; init_index++){
 8000778:	193b      	adds	r3, r7, r4
 800077a:	881a      	ldrh	r2, [r3, #0]
 800077c:	193b      	adds	r3, r7, r4
 800077e:	3201      	adds	r2, #1
 8000780:	801a      	strh	r2, [r3, #0]
 8000782:	230a      	movs	r3, #10
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	429a      	cmp	r2, r3
 800078c:	dce5      	bgt.n	800075a <display_init+0xa2>
    }
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b007      	add	sp, #28
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	00009c40 	.word	0x00009c40
 800079c:	080047d8 	.word	0x080047d8

080007a0 <display_blank>:



void display_blank(void){
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b087      	sub	sp, #28
 80007a4:	af00      	add	r7, sp, #0
	const int display_width = DISPLAY_WIDTH;
 80007a6:	2366      	movs	r3, #102	; 0x66
 80007a8:	613b      	str	r3, [r7, #16]
	const DOGS_packet white = {1, 0x00};
 80007aa:	200c      	movs	r0, #12
 80007ac:	183b      	adds	r3, r7, r0
 80007ae:	781a      	ldrb	r2, [r3, #0]
 80007b0:	2101      	movs	r1, #1
 80007b2:	430a      	orrs	r2, r1
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	183b      	adds	r3, r7, r0
 80007b8:	2200      	movs	r2, #0
 80007ba:	705a      	strb	r2, [r3, #1]
	for (uint16_t pg = 0; pg < CHECKS_WIDE; pg++){
 80007bc:	2316      	movs	r3, #22
 80007be:	18fb      	adds	r3, r7, r3
 80007c0:	2200      	movs	r2, #0
 80007c2:	801a      	strh	r2, [r3, #0]
 80007c4:	e05c      	b.n	8000880 <display_blank+0xe0>
		DOGS_packet page_set = {0, 0xb0|pg};
 80007c6:	2008      	movs	r0, #8
 80007c8:	183b      	adds	r3, r7, r0
 80007ca:	781a      	ldrb	r2, [r3, #0]
 80007cc:	2101      	movs	r1, #1
 80007ce:	438a      	bics	r2, r1
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	2316      	movs	r3, #22
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2250      	movs	r2, #80	; 0x50
 80007dc:	4252      	negs	r2, r2
 80007de:	4313      	orrs	r3, r2
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	183b      	adds	r3, r7, r0
 80007e4:	705a      	strb	r2, [r3, #1]
		for (uint16_t col = 0; col < display_width; col++){
 80007e6:	2314      	movs	r3, #20
 80007e8:	18fb      	adds	r3, r7, r3
 80007ea:	2200      	movs	r2, #0
 80007ec:	801a      	strh	r2, [r3, #0]
 80007ee:	e03b      	b.n	8000868 <display_blank+0xc8>
			spi_msg_out(page_set);
 80007f0:	2308      	movs	r3, #8
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	f7ff ff11 	bl	800061c <spi_msg_out>
			DOGS_packet col_set[2] = {{0, (col &0x0f)}, {0, 0x10|(col>>4)}};
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	2101      	movs	r1, #1
 8000800:	438a      	bics	r2, r1
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	2414      	movs	r4, #20
 8000806:	193b      	adds	r3, r7, r4
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	220f      	movs	r2, #15
 800080e:	4013      	ands	r3, r2
 8000810:	b2da      	uxtb	r2, r3
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	705a      	strb	r2, [r3, #1]
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	789a      	ldrb	r2, [r3, #2]
 800081a:	2101      	movs	r1, #1
 800081c:	438a      	bics	r2, r1
 800081e:	709a      	strb	r2, [r3, #2]
 8000820:	193b      	adds	r3, r7, r4
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	091b      	lsrs	r3, r3, #4
 8000826:	b29b      	uxth	r3, r3
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2210      	movs	r2, #16
 800082c:	4313      	orrs	r3, r2
 800082e:	b2da      	uxtb	r2, r3
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	70da      	strb	r2, [r3, #3]
			spi_msg_out(col_set[0]);
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	f7ff fef0 	bl	800061c <spi_msg_out>
			spi_msg_out(col_set[1]);
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2202      	movs	r2, #2
 8000840:	5a9a      	ldrh	r2, [r3, r2]
 8000842:	2300      	movs	r3, #0
 8000844:	0412      	lsls	r2, r2, #16
 8000846:	0c12      	lsrs	r2, r2, #16
 8000848:	0c1b      	lsrs	r3, r3, #16
 800084a:	041b      	lsls	r3, r3, #16
 800084c:	4313      	orrs	r3, r2
 800084e:	0018      	movs	r0, r3
 8000850:	f7ff fee4 	bl	800061c <spi_msg_out>
			spi_msg_out(white);
 8000854:	230c      	movs	r3, #12
 8000856:	18fb      	adds	r3, r7, r3
 8000858:	6818      	ldr	r0, [r3, #0]
 800085a:	f7ff fedf 	bl	800061c <spi_msg_out>
		for (uint16_t col = 0; col < display_width; col++){
 800085e:	193b      	adds	r3, r7, r4
 8000860:	881a      	ldrh	r2, [r3, #0]
 8000862:	193b      	adds	r3, r7, r4
 8000864:	3201      	adds	r2, #1
 8000866:	801a      	strh	r2, [r3, #0]
 8000868:	2314      	movs	r3, #20
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	429a      	cmp	r2, r3
 8000872:	dcbd      	bgt.n	80007f0 <display_blank+0x50>
	for (uint16_t pg = 0; pg < CHECKS_WIDE; pg++){
 8000874:	2116      	movs	r1, #22
 8000876:	187b      	adds	r3, r7, r1
 8000878:	881a      	ldrh	r2, [r3, #0]
 800087a:	187b      	adds	r3, r7, r1
 800087c:	3201      	adds	r2, #1
 800087e:	801a      	strh	r2, [r3, #0]
 8000880:	2316      	movs	r3, #22
 8000882:	18fb      	adds	r3, r7, r3
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	2b07      	cmp	r3, #7
 8000888:	d99d      	bls.n	80007c6 <display_blank+0x26>
		}
	}
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b007      	add	sp, #28
 8000892:	bd90      	pop	{r4, r7, pc}

08000894 <display_checkerboard>:


void display_checkerboard(void){
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b089      	sub	sp, #36	; 0x24
 8000898:	af00      	add	r7, sp, #0
	const int checkerboard_squares = CHECKS_WIDE;
 800089a:	2308      	movs	r3, #8
 800089c:	61bb      	str	r3, [r7, #24]
	const int checkerboard_pixels_wide = PIXELS_PER_CHECK * CHECKS_WIDE;
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	617b      	str	r3, [r7, #20]
	const int display_width = DISPLAY_WIDTH;
 80008a2:	2366      	movs	r3, #102	; 0x66
 80008a4:	613b      	str	r3, [r7, #16]
	const DOGS_packet black = {1, 0xFF};
	const DOGS_packet white = {1, 0x00};
 80008a6:	200c      	movs	r0, #12
 80008a8:	183b      	adds	r3, r7, r0
 80008aa:	781a      	ldrb	r2, [r3, #0]
 80008ac:	2101      	movs	r1, #1
 80008ae:	430a      	orrs	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
 80008b2:	183b      	adds	r3, r7, r0
 80008b4:	2200      	movs	r2, #0
 80008b6:	705a      	strb	r2, [r3, #1]
	for (uint16_t pg = 0; pg < checkerboard_squares; pg++){
 80008b8:	231e      	movs	r3, #30
 80008ba:	18fb      	adds	r3, r7, r3
 80008bc:	2200      	movs	r2, #0
 80008be:	801a      	strh	r2, [r3, #0]
 80008c0:	e080      	b.n	80009c4 <display_checkerboard+0x130>
		DOGS_packet page_set = {0, 0xb0|pg};
 80008c2:	2008      	movs	r0, #8
 80008c4:	183b      	adds	r3, r7, r0
 80008c6:	781a      	ldrb	r2, [r3, #0]
 80008c8:	2101      	movs	r1, #1
 80008ca:	438a      	bics	r2, r1
 80008cc:	701a      	strb	r2, [r3, #0]
 80008ce:	231e      	movs	r3, #30
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2250      	movs	r2, #80	; 0x50
 80008d8:	4252      	negs	r2, r2
 80008da:	4313      	orrs	r3, r2
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	183b      	adds	r3, r7, r0
 80008e0:	705a      	strb	r2, [r3, #1]
		for (uint16_t col = 0; col < display_width; col++){
 80008e2:	231c      	movs	r3, #28
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	2200      	movs	r2, #0
 80008e8:	801a      	strh	r2, [r3, #0]
 80008ea:	e05f      	b.n	80009ac <display_checkerboard+0x118>
			spi_msg_out(page_set);
 80008ec:	2308      	movs	r3, #8
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	f7ff fe93 	bl	800061c <spi_msg_out>

			DOGS_packet col_set[2] = {{0, (col &0x0f)}, {0, 0x10|(col>>4)}};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	781a      	ldrb	r2, [r3, #0]
 80008fa:	2101      	movs	r1, #1
 80008fc:	438a      	bics	r2, r1
 80008fe:	701a      	strb	r2, [r3, #0]
 8000900:	241c      	movs	r4, #28
 8000902:	193b      	adds	r3, r7, r4
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	220f      	movs	r2, #15
 800090a:	4013      	ands	r3, r2
 800090c:	b2da      	uxtb	r2, r3
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	705a      	strb	r2, [r3, #1]
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	789a      	ldrb	r2, [r3, #2]
 8000916:	2101      	movs	r1, #1
 8000918:	438a      	bics	r2, r1
 800091a:	709a      	strb	r2, [r3, #2]
 800091c:	193b      	adds	r3, r7, r4
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	091b      	lsrs	r3, r3, #4
 8000922:	b29b      	uxth	r3, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2210      	movs	r2, #16
 8000928:	4313      	orrs	r3, r2
 800092a:	b2da      	uxtb	r2, r3
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	70da      	strb	r2, [r3, #3]
			spi_msg_out(col_set[0]);
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	f7ff fe72 	bl	800061c <spi_msg_out>
			spi_msg_out(col_set[1]);
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2202      	movs	r2, #2
 800093c:	5a9a      	ldrh	r2, [r3, r2]
 800093e:	2300      	movs	r3, #0
 8000940:	0412      	lsls	r2, r2, #16
 8000942:	0c12      	lsrs	r2, r2, #16
 8000944:	0c1b      	lsrs	r3, r3, #16
 8000946:	041b      	lsls	r3, r3, #16
 8000948:	4313      	orrs	r3, r2
 800094a:	0018      	movs	r0, r3
 800094c:	f7ff fe66 	bl	800061c <spi_msg_out>
			if ((col < checkerboard_pixels_wide) &
 8000950:	193b      	adds	r3, r7, r4
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	2201      	movs	r2, #1
 8000956:	1c11      	adds	r1, r2, #0
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	429a      	cmp	r2, r3
 800095c:	dc01      	bgt.n	8000962 <display_checkerboard+0xce>
 800095e:	2300      	movs	r3, #0
 8000960:	1c19      	adds	r1, r3, #0
 8000962:	b2cb      	uxtb	r3, r1
					!((pg+col/PIXELS_PER_CHECK) & 0x01))
 8000964:	221c      	movs	r2, #28
 8000966:	18ba      	adds	r2, r7, r2
 8000968:	8812      	ldrh	r2, [r2, #0]
 800096a:	08d2      	lsrs	r2, r2, #3
 800096c:	b291      	uxth	r1, r2
 800096e:	221e      	movs	r2, #30
 8000970:	18ba      	adds	r2, r7, r2
 8000972:	8812      	ldrh	r2, [r2, #0]
 8000974:	188a      	adds	r2, r1, r2
 8000976:	b292      	uxth	r2, r2
 8000978:	0011      	movs	r1, r2
 800097a:	2201      	movs	r2, #1
 800097c:	400a      	ands	r2, r1
			if ((col < checkerboard_pixels_wide) &
 800097e:	4251      	negs	r1, r2
 8000980:	414a      	adcs	r2, r1
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	4013      	ands	r3, r2
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b00      	cmp	r3, #0
 800098a:	d004      	beq.n	8000996 <display_checkerboard+0x102>
			{ // BIT-BANGING for evenness is QUICK
				spi_msg_out(black);
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <display_checkerboard+0x148>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	f7ff fe44 	bl	800061c <spi_msg_out>
 8000994:	e004      	b.n	80009a0 <display_checkerboard+0x10c>
			}else{
				spi_msg_out(white);
 8000996:	230c      	movs	r3, #12
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	f7ff fe3e 	bl	800061c <spi_msg_out>
		for (uint16_t col = 0; col < display_width; col++){
 80009a0:	211c      	movs	r1, #28
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	881a      	ldrh	r2, [r3, #0]
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	3201      	adds	r2, #1
 80009aa:	801a      	strh	r2, [r3, #0]
 80009ac:	231c      	movs	r3, #28
 80009ae:	18fb      	adds	r3, r7, r3
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dc99      	bgt.n	80008ec <display_checkerboard+0x58>
	for (uint16_t pg = 0; pg < checkerboard_squares; pg++){
 80009b8:	211e      	movs	r1, #30
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	881a      	ldrh	r2, [r3, #0]
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	3201      	adds	r2, #1
 80009c2:	801a      	strh	r2, [r3, #0]
 80009c4:	231e      	movs	r3, #30
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dd00      	ble.n	80009d2 <display_checkerboard+0x13e>
 80009d0:	e777      	b.n	80008c2 <display_checkerboard+0x2e>
			}
		}
	}
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b009      	add	sp, #36	; 0x24
 80009da:	bd90      	pop	{r4, r7, pc}
 80009dc:	080047f0 	.word	0x080047f0

080009e0 <display_paint_square>:
		}
	}
}


static void display_paint_square(uint8_t l_to_r, uint8_t t_to_b, DOGS_packet p){
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	003b      	movs	r3, r7
 80009e8:	801a      	strh	r2, [r3, #0]
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	1c02      	adds	r2, r0, #0
 80009ee:	701a      	strb	r2, [r3, #0]
 80009f0:	1dbb      	adds	r3, r7, #6
 80009f2:	1c0a      	adds	r2, r1, #0
 80009f4:	701a      	strb	r2, [r3, #0]
	if ((l_to_r > (DISPLAY_WIDTH/PIXELS_PER_CHECK))||(t_to_b > CHECKS_WIDE)) {
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b0c      	cmp	r3, #12
 80009fc:	d803      	bhi.n	8000a06 <display_paint_square+0x26>
 80009fe:	1dbb      	adds	r3, r7, #6
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b08      	cmp	r3, #8
 8000a04:	d902      	bls.n	8000a0c <display_paint_square+0x2c>
		display_checkerboard();
 8000a06:	f7ff ff45 	bl	8000894 <display_checkerboard>
 8000a0a:	e05d      	b.n	8000ac8 <display_paint_square+0xe8>
	}
	else {
		DOGS_packet page_set = {0, 0xb0|t_to_b};
 8000a0c:	2010      	movs	r0, #16
 8000a0e:	183b      	adds	r3, r7, r0
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	2101      	movs	r1, #1
 8000a14:	438a      	bics	r2, r1
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	1dbb      	adds	r3, r7, #6
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2250      	movs	r2, #80	; 0x50
 8000a1e:	4252      	negs	r2, r2
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	183b      	adds	r3, r7, r0
 8000a26:	705a      	strb	r2, [r3, #1]
		spi_msg_out(page_set);
 8000a28:	183b      	adds	r3, r7, r0
 8000a2a:	6818      	ldr	r0, [r3, #0]
 8000a2c:	f7ff fdf6 	bl	800061c <spi_msg_out>
		for (uint16_t n = 0; n < PIXELS_PER_CHECK; n++){
 8000a30:	2316      	movs	r3, #22
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	2200      	movs	r2, #0
 8000a36:	801a      	strh	r2, [r3, #0]
 8000a38:	e040      	b.n	8000abc <display_paint_square+0xdc>
			uint8_t col = l_to_r * PIXELS_PER_CHECK + n;
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	b2d9      	uxtb	r1, r3
 8000a42:	2516      	movs	r5, #22
 8000a44:	197b      	adds	r3, r7, r5
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	2415      	movs	r4, #21
 8000a4c:	193b      	adds	r3, r7, r4
 8000a4e:	188a      	adds	r2, r1, r2
 8000a50:	701a      	strb	r2, [r3, #0]
			DOGS_packet col_set[2] = {{0, (col &0x0f)}, {0, 0x10|(col>>4)}};
 8000a52:	200c      	movs	r0, #12
 8000a54:	183b      	adds	r3, r7, r0
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	2101      	movs	r1, #1
 8000a5a:	438a      	bics	r2, r1
 8000a5c:	701a      	strb	r2, [r3, #0]
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	220f      	movs	r2, #15
 8000a64:	4013      	ands	r3, r2
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	183b      	adds	r3, r7, r0
 8000a6a:	705a      	strb	r2, [r3, #1]
 8000a6c:	183b      	adds	r3, r7, r0
 8000a6e:	789a      	ldrb	r2, [r3, #2]
 8000a70:	2101      	movs	r1, #1
 8000a72:	438a      	bics	r2, r1
 8000a74:	709a      	strb	r2, [r3, #2]
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2210      	movs	r2, #16
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	183b      	adds	r3, r7, r0
 8000a86:	70da      	strb	r2, [r3, #3]
			spi_msg_out(col_set[0]);
 8000a88:	0004      	movs	r4, r0
 8000a8a:	183b      	adds	r3, r7, r0
 8000a8c:	6818      	ldr	r0, [r3, #0]
 8000a8e:	f7ff fdc5 	bl	800061c <spi_msg_out>
			spi_msg_out(col_set[1]);
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2202      	movs	r2, #2
 8000a96:	5a9a      	ldrh	r2, [r3, r2]
 8000a98:	2300      	movs	r3, #0
 8000a9a:	0412      	lsls	r2, r2, #16
 8000a9c:	0c12      	lsrs	r2, r2, #16
 8000a9e:	0c1b      	lsrs	r3, r3, #16
 8000aa0:	041b      	lsls	r3, r3, #16
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff fdb9 	bl	800061c <spi_msg_out>
			spi_msg_out(p);
 8000aaa:	003b      	movs	r3, r7
 8000aac:	6818      	ldr	r0, [r3, #0]
 8000aae:	f7ff fdb5 	bl	800061c <spi_msg_out>
		for (uint16_t n = 0; n < PIXELS_PER_CHECK; n++){
 8000ab2:	197b      	adds	r3, r7, r5
 8000ab4:	881a      	ldrh	r2, [r3, #0]
 8000ab6:	197b      	adds	r3, r7, r5
 8000ab8:	3201      	adds	r2, #1
 8000aba:	801a      	strh	r2, [r3, #0]
 8000abc:	2316      	movs	r3, #22
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	2b07      	cmp	r3, #7
 8000ac4:	d9b9      	bls.n	8000a3a <display_paint_square+0x5a>
		}
	}
}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b006      	add	sp, #24
 8000ace:	bdb0      	pop	{r4, r5, r7, pc}

08000ad0 <display_white_square>:

void display_white_square(uint8_t l_to_r, uint8_t t_to_b){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	1dbb      	adds	r3, r7, #6
 8000ade:	1c0a      	adds	r2, r1, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
	const DOGS_packet white = {1, 0x00};
 8000ae2:	200c      	movs	r0, #12
 8000ae4:	183b      	adds	r3, r7, r0
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	2101      	movs	r1, #1
 8000aea:	430a      	orrs	r2, r1
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	183b      	adds	r3, r7, r0
 8000af0:	2200      	movs	r2, #0
 8000af2:	705a      	strb	r2, [r3, #1]
	display_paint_square(l_to_r, t_to_b, white);
 8000af4:	183b      	adds	r3, r7, r0
 8000af6:	1dba      	adds	r2, r7, #6
 8000af8:	7811      	ldrb	r1, [r2, #0]
 8000afa:	1dfa      	adds	r2, r7, #7
 8000afc:	7810      	ldrb	r0, [r2, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	f7ff ff6e 	bl	80009e0 <display_paint_square>
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b004      	add	sp, #16
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <display_dark_square>:

void display_dark_square(uint8_t l_to_r, uint8_t t_to_b){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	0002      	movs	r2, r0
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	1dbb      	adds	r3, r7, #6
 8000b1a:	1c0a      	adds	r2, r1, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
	const DOGS_packet black = {1, 0xFF};
	display_paint_square(l_to_r, t_to_b, black);
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <display_dark_square+0x2c>)
 8000b20:	1dba      	adds	r2, r7, #6
 8000b22:	7811      	ldrb	r1, [r2, #0]
 8000b24:	1dfa      	adds	r2, r7, #7
 8000b26:	7810      	ldrb	r0, [r2, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	f7ff ff59 	bl	80009e0 <display_paint_square>
}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	080047f4 	.word	0x080047f4

08000b3c <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Timer 17 running at 10 ms period will
volatile int32_t timer_isr_countdown = 10000;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	timer_isr_countdown--;
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	1e5a      	subs	r2, r3, #1
 8000b4a:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000b4c:	601a      	str	r2, [r3, #0]
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000000 	.word	0x20000000

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b60:	f001 f838 	bl	8001bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b64:	f000 f812 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f000 f90c 	bl	8000d84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b6c:	f000 f8bc 	bl	8000ce8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000b70:	f000 f854 	bl	8000c1c <MX_SPI2_Init>
  MX_TIM17_Init();
 8000b74:	f000 f890 	bl	8000c98 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim17);  // SMC - Start the timer
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <main+0x2c>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f002 fdb6 	bl	80036ec <HAL_TIM_Base_Start_IT>
  pong_main();
 8000b80:	f000 fce2 	bl	8001548 <pong_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <main+0x28>
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	20000090 	.word	0x20000090

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b093      	sub	sp, #76	; 0x4c
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	2410      	movs	r4, #16
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	0018      	movs	r0, r3
 8000b98:	2338      	movs	r3, #56	; 0x38
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f003 fe07 	bl	80047b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	2310      	movs	r3, #16
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2100      	movs	r1, #0
 8000bac:	f003 fe00 	bl	80047b0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f001 faf3 	bl	80021a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	0052      	lsls	r2, r2, #1
 8000bc6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2240      	movs	r2, #64	; 0x40
 8000bd2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 fb2b 	bl	8002238 <HAL_RCC_OscConfig>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000be6:	f000 f981 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	003b      	movs	r3, r7
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bf0:	003b      	movs	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf6:	003b      	movs	r3, r7
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bfc:	003b      	movs	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c02:	003b      	movs	r3, r7
 8000c04:	2100      	movs	r1, #0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f001 fe30 	bl	800286c <HAL_RCC_ClockConfig>
 8000c0c:	1e03      	subs	r3, r0, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000c10:	f000 f96c 	bl	8000eec <Error_Handler>
  }
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b013      	add	sp, #76	; 0x4c
 8000c1a:	bd90      	pop	{r4, r7, pc}

08000c1c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_SPI2_Init+0x74>)
 8000c22:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <MX_SPI2_Init+0x78>)
 8000c24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_SPI2_Init+0x74>)
 8000c28:	2282      	movs	r2, #130	; 0x82
 8000c2a:	0052      	lsls	r2, r2, #1
 8000c2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_SPI2_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MX_SPI2_Init+0x74>)
 8000c36:	22e0      	movs	r2, #224	; 0xe0
 8000c38:	00d2      	lsls	r2, r2, #3
 8000c3a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_SPI2_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <MX_SPI2_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_SPI2_Init+0x74>)
 8000c4a:	2280      	movs	r2, #128	; 0x80
 8000c4c:	0092      	lsls	r2, r2, #2
 8000c4e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_SPI2_Init+0x74>)
 8000c52:	2208      	movs	r2, #8
 8000c54:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_SPI2_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_SPI2_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <MX_SPI2_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_SPI2_Init+0x74>)
 8000c6a:	2207      	movs	r2, #7
 8000c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <MX_SPI2_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_SPI2_Init+0x74>)
 8000c76:	2208      	movs	r2, #8
 8000c78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <MX_SPI2_Init+0x74>)
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f002 f957 	bl	8002f30 <HAL_SPI_Init>
 8000c82:	1e03      	subs	r3, r0, #0
 8000c84:	d001      	beq.n	8000c8a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000c86:	f000 f931 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	2000002c 	.word	0x2000002c
 8000c94:	40003800 	.word	0x40003800

08000c98 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c9c:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <MX_TIM17_Init+0x48>)
 8000c9e:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <MX_TIM17_Init+0x4c>)
 8000ca0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1;
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_TIM17_Init+0x48>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <MX_TIM17_Init+0x48>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 16000;
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_TIM17_Init+0x48>)
 8000cb0:	22fa      	movs	r2, #250	; 0xfa
 8000cb2:	0192      	lsls	r2, r2, #6
 8000cb4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <MX_TIM17_Init+0x48>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_TIM17_Init+0x48>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <MX_TIM17_Init+0x48>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <MX_TIM17_Init+0x48>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f002 fcb6 	bl	800363c <HAL_TIM_Base_Init>
 8000cd0:	1e03      	subs	r3, r0, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000cd4:	f000 f90a 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	20000090 	.word	0x20000090
 8000ce4:	40014800 	.word	0x40014800

08000ce8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cec:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <MX_USART2_UART_Init+0x94>)
 8000cee:	4a24      	ldr	r2, [pc, #144]	; (8000d80 <MX_USART2_UART_Init+0x98>)
 8000cf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cf2:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <MX_USART2_UART_Init+0x94>)
 8000cf4:	22e1      	movs	r2, #225	; 0xe1
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <MX_USART2_UART_Init+0x94>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_USART2_UART_Init+0x94>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_USART2_UART_Init+0x94>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_USART2_UART_Init+0x94>)
 8000d0e:	220c      	movs	r2, #12
 8000d10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_USART2_UART_Init+0x94>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_USART2_UART_Init+0x94>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_USART2_UART_Init+0x94>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_USART2_UART_Init+0x94>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_USART2_UART_Init+0x94>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_USART2_UART_Init+0x94>)
 8000d32:	0018      	movs	r0, r3
 8000d34:	f002 ff20 	bl	8003b78 <HAL_UART_Init>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d3c:	f000 f8d6 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_USART2_UART_Init+0x94>)
 8000d42:	2100      	movs	r1, #0
 8000d44:	0018      	movs	r0, r3
 8000d46:	f003 fc2f 	bl	80045a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d4e:	f000 f8cd 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <MX_USART2_UART_Init+0x94>)
 8000d54:	2100      	movs	r1, #0
 8000d56:	0018      	movs	r0, r3
 8000d58:	f003 fc66 	bl	8004628 <HAL_UARTEx_SetRxFifoThreshold>
 8000d5c:	1e03      	subs	r3, r0, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d60:	f000 f8c4 	bl	8000eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <MX_USART2_UART_Init+0x94>)
 8000d66:	0018      	movs	r0, r3
 8000d68:	f003 fbe4 	bl	8004534 <HAL_UARTEx_DisableFifoMode>
 8000d6c:	1e03      	subs	r3, r0, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d70:	f000 f8bc 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	200000dc 	.word	0x200000dc
 8000d80:	40004400 	.word	0x40004400

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b08b      	sub	sp, #44	; 0x2c
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	2414      	movs	r4, #20
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	0018      	movs	r0, r3
 8000d90:	2314      	movs	r3, #20
 8000d92:	001a      	movs	r2, r3
 8000d94:	2100      	movs	r1, #0
 8000d96:	f003 fd0b 	bl	80047b0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	4b51      	ldr	r3, [pc, #324]	; (8000ee0 <MX_GPIO_Init+0x15c>)
 8000d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d9e:	4b50      	ldr	r3, [pc, #320]	; (8000ee0 <MX_GPIO_Init+0x15c>)
 8000da0:	2104      	movs	r1, #4
 8000da2:	430a      	orrs	r2, r1
 8000da4:	635a      	str	r2, [r3, #52]	; 0x34
 8000da6:	4b4e      	ldr	r3, [pc, #312]	; (8000ee0 <MX_GPIO_Init+0x15c>)
 8000da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000daa:	2204      	movs	r2, #4
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000db2:	4b4b      	ldr	r3, [pc, #300]	; (8000ee0 <MX_GPIO_Init+0x15c>)
 8000db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000db6:	4b4a      	ldr	r3, [pc, #296]	; (8000ee0 <MX_GPIO_Init+0x15c>)
 8000db8:	2120      	movs	r1, #32
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34
 8000dbe:	4b48      	ldr	r3, [pc, #288]	; (8000ee0 <MX_GPIO_Init+0x15c>)
 8000dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc2:	2220      	movs	r2, #32
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b45      	ldr	r3, [pc, #276]	; (8000ee0 <MX_GPIO_Init+0x15c>)
 8000dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dce:	4b44      	ldr	r3, [pc, #272]	; (8000ee0 <MX_GPIO_Init+0x15c>)
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	635a      	str	r2, [r3, #52]	; 0x34
 8000dd6:	4b42      	ldr	r3, [pc, #264]	; (8000ee0 <MX_GPIO_Init+0x15c>)
 8000dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dda:	2201      	movs	r2, #1
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	4b3f      	ldr	r3, [pc, #252]	; (8000ee0 <MX_GPIO_Init+0x15c>)
 8000de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000de6:	4b3e      	ldr	r3, [pc, #248]	; (8000ee0 <MX_GPIO_Init+0x15c>)
 8000de8:	2102      	movs	r1, #2
 8000dea:	430a      	orrs	r2, r1
 8000dec:	635a      	str	r2, [r3, #52]	; 0x34
 8000dee:	4b3c      	ldr	r3, [pc, #240]	; (8000ee0 <MX_GPIO_Init+0x15c>)
 8000df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df2:	2202      	movs	r2, #2
 8000df4:	4013      	ands	r3, r2
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfa:	4b39      	ldr	r3, [pc, #228]	; (8000ee0 <MX_GPIO_Init+0x15c>)
 8000dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dfe:	4b38      	ldr	r3, [pc, #224]	; (8000ee0 <MX_GPIO_Init+0x15c>)
 8000e00:	2108      	movs	r1, #8
 8000e02:	430a      	orrs	r2, r1
 8000e04:	635a      	str	r2, [r3, #52]	; 0x34
 8000e06:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <MX_GPIO_Init+0x15c>)
 8000e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DOGS_reset_Pin|nC_D_Pin|LED_GREEN_Pin|QuadKnobA_Pin, GPIO_PIN_RESET);
 8000e12:	23a0      	movs	r3, #160	; 0xa0
 8000e14:	05db      	lsls	r3, r3, #23
 8000e16:	2200      	movs	r2, #0
 8000e18:	2163      	movs	r1, #99	; 0x63
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f001 f9a2 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSS_GPIO_Port, nSS_Pin, GPIO_PIN_RESET);
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	482f      	ldr	r0, [pc, #188]	; (8000ee4 <MX_GPIO_Init+0x160>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	0019      	movs	r1, r3
 8000e2a:	f001 f99b 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(QuadKnobB_GPIO_Port, QuadKnobB_Pin, GPIO_PIN_RESET);
 8000e2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <MX_GPIO_Init+0x164>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	0018      	movs	r0, r3
 8000e36:	f001 f995 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DOGS_reset_Pin nC_D_Pin QuadKnobA_Pin */
  GPIO_InitStruct.Pin = DOGS_reset_Pin|nC_D_Pin|QuadKnobA_Pin;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	2243      	movs	r2, #67	; 0x43
 8000e3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	2201      	movs	r2, #1
 8000e44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	193a      	adds	r2, r7, r4
 8000e54:	23a0      	movs	r3, #160	; 0xa0
 8000e56:	05db      	lsls	r3, r3, #23
 8000e58:	0011      	movs	r1, r2
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f001 f81e 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000e60:	193b      	adds	r3, r7, r4
 8000e62:	2220      	movs	r2, #32
 8000e64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	193b      	adds	r3, r7, r4
 8000e68:	2201      	movs	r2, #1
 8000e6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	2202      	movs	r2, #2
 8000e76:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000e78:	193a      	adds	r2, r7, r4
 8000e7a:	23a0      	movs	r3, #160	; 0xa0
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	0011      	movs	r1, r2
 8000e80:	0018      	movs	r0, r3
 8000e82:	f001 f80b 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : nSS_Pin */
  GPIO_InitStruct.Pin = nSS_Pin;
 8000e86:	0021      	movs	r1, r4
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2280      	movs	r2, #128	; 0x80
 8000e8c:	0092      	lsls	r2, r2, #2
 8000e8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	000c      	movs	r4, r1
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	2201      	movs	r2, #1
 8000e96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(nSS_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <MX_GPIO_Init+0x160>)
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	0010      	movs	r0, r2
 8000eac:	f000 fff6 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : QuadKnobB_Pin */
  GPIO_InitStruct.Pin = QuadKnobB_Pin;
 8000eb0:	0021      	movs	r1, r4
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2240      	movs	r2, #64	; 0x40
 8000eb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2201      	movs	r2, #1
 8000ebc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(QuadKnobB_GPIO_Port, &GPIO_InitStruct);
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <MX_GPIO_Init+0x164>)
 8000ece:	0019      	movs	r1, r3
 8000ed0:	0010      	movs	r0, r2
 8000ed2:	f000 ffe3 	bl	8001e9c <HAL_GPIO_Init>

}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b00b      	add	sp, #44	; 0x2c
 8000edc:	bd90      	pop	{r4, r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	50000c00 	.word	0x50000c00
 8000ee8:	50000400 	.word	0x50000400

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <Error_Handler+0x8>

08000ef6 <pong_init>:
	}
}

//init pong game. creates the bars and the ball
void pong_init(pong_game* pg)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
	//initialize left bar on left side
	pg->left_top.x = 0;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	801a      	strh	r2, [r3, #0]
	pg->left_bottom.x = 0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	811a      	strh	r2, [r3, #8]
	pg->left_middle.x = 0;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	809a      	strh	r2, [r3, #4]
	pg->left_top.y = 3;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2203      	movs	r2, #3
 8000f14:	805a      	strh	r2, [r3, #2]
	pg->left_bottom.y = 5;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2205      	movs	r2, #5
 8000f1a:	815a      	strh	r2, [r3, #10]
	pg->left_middle.y = 4;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2204      	movs	r2, #4
 8000f20:	80da      	strh	r2, [r3, #6]
	pg->left_direction = NONE;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	731a      	strb	r2, [r3, #12]
	pg->left_direction = DOWN;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	731a      	strb	r2, [r3, #12]

	//initialize right bar on right side
	pg->right_top.x = 7;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2207      	movs	r2, #7
 8000f32:	81da      	strh	r2, [r3, #14]
	pg->right_bottom.x = 7;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2207      	movs	r2, #7
 8000f38:	82da      	strh	r2, [r3, #22]
	pg->right_middle.x = 7;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	825a      	strh	r2, [r3, #18]
	pg->right_top.y = 3;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2203      	movs	r2, #3
 8000f44:	821a      	strh	r2, [r3, #16]
	pg->right_bottom.y = 5;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2205      	movs	r2, #5
 8000f4a:	831a      	strh	r2, [r3, #24]
	pg->right_middle.y = 4;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2204      	movs	r2, #4
 8000f50:	829a      	strh	r2, [r3, #20]
	pg->right_direction = NONE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	769a      	strb	r2, [r3, #26]
	pg->right_direction = UP;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	769a      	strb	r2, [r3, #26]

	//initialize ball
	pg->ball_position.x = 4;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2204      	movs	r2, #4
 8000f62:	839a      	strh	r2, [r3, #28]
	pg->ball_position.y = 4;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2204      	movs	r2, #4
 8000f68:	83da      	strh	r2, [r3, #30]
	pg->ball_direction = NORTHEAST; //heads towards the right side
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	2100      	movs	r1, #0
 8000f70:	5499      	strb	r1, [r3, r2]
}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b002      	add	sp, #8
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <ball_state>:

//switches the ball state based on where it was heading.
void ball_state(pong_game* pg)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
	switch (pg->ball_direction)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2220      	movs	r2, #32
 8000f86:	5c9b      	ldrb	r3, [r3, r2]
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d008      	beq.n	8000f9e <ball_state+0x24>
 8000f8c:	dc1b      	bgt.n	8000fc6 <ball_state+0x4c>
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d00a      	beq.n	8000fa8 <ball_state+0x2e>
 8000f92:	dc18      	bgt.n	8000fc6 <ball_state+0x4c>
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d011      	beq.n	8000fbc <ball_state+0x42>
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d00a      	beq.n	8000fb2 <ball_state+0x38>
			break;
	case(NORTHEAST):
			pg->ball_direction = NORTHWEST;
			break;
	}
}
 8000f9c:	e013      	b.n	8000fc6 <ball_state+0x4c>
			pg->ball_direction = SOUTHWEST;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	2102      	movs	r1, #2
 8000fa4:	5499      	strb	r1, [r3, r2]
			break;
 8000fa6:	e00e      	b.n	8000fc6 <ball_state+0x4c>
			pg->ball_direction = SOUTHEAST;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2220      	movs	r2, #32
 8000fac:	2101      	movs	r1, #1
 8000fae:	5499      	strb	r1, [r3, r2]
			break;
 8000fb0:	e009      	b.n	8000fc6 <ball_state+0x4c>
			pg->ball_direction = NORTHEAST;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2220      	movs	r2, #32
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	5499      	strb	r1, [r3, r2]
			break;
 8000fba:	e004      	b.n	8000fc6 <ball_state+0x4c>
			pg->ball_direction = NORTHWEST;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	2103      	movs	r1, #3
 8000fc2:	5499      	strb	r1, [r3, r2]
			break;
 8000fc4:	46c0      	nop			; (mov r8, r8)
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b002      	add	sp, #8
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <bar_update>:
//plots the the two bars
//it will check left and right bar updates for the code.
//THIS CODE IS NOT SUPPOSED TO PLOT THE GAME ON THE DISPLAY
//Does actually move the bar. Does not worry about the board.
bool bar_update(pong_game* pg, int8_t b[CHECKS_WIDE][CHECKS_WIDE])
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
	//we wanna make sure nothing broke so we check using a bool
	//variable called success.
	bool left_success = false;
 8000fd8:	2317      	movs	r3, #23
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
	bool right_success = false;
 8000fe0:	2316      	movs	r3, #22
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
	bool success = false;
 8000fe8:	2315      	movs	r3, #21
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
	//changes the left bar's top, bottom, and middle sections depending on the direction
	//of the bar and if the top or bottom hasnt already been hit
	if (pg->left_top.y != 0 && pg->left_direction == UP)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	5e9b      	ldrsh	r3, [r3, r2]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d023      	beq.n	8001042 <bar_update+0x74>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7b1b      	ldrb	r3, [r3, #12]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d11f      	bne.n	8001042 <bar_update+0x74>
	{
		pg->left_top.y--;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2202      	movs	r2, #2
 8001006:	5e9b      	ldrsh	r3, [r3, r2]
 8001008:	b29b      	uxth	r3, r3
 800100a:	3b01      	subs	r3, #1
 800100c:	b29b      	uxth	r3, r3
 800100e:	b21a      	sxth	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	805a      	strh	r2, [r3, #2]
		pg->left_middle.y--;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2206      	movs	r2, #6
 8001018:	5e9b      	ldrsh	r3, [r3, r2]
 800101a:	b29b      	uxth	r3, r3
 800101c:	3b01      	subs	r3, #1
 800101e:	b29b      	uxth	r3, r3
 8001020:	b21a      	sxth	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	80da      	strh	r2, [r3, #6]
		pg->left_bottom.y--;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	220a      	movs	r2, #10
 800102a:	5e9b      	ldrsh	r3, [r3, r2]
 800102c:	b29b      	uxth	r3, r3
 800102e:	3b01      	subs	r3, #1
 8001030:	b29b      	uxth	r3, r3
 8001032:	b21a      	sxth	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	815a      	strh	r2, [r3, #10]
		bool left_success = true;
 8001038:	2314      	movs	r3, #20
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
	{
 8001040:	e02c      	b.n	800109c <bar_update+0xce>
	}
	else if (pg->left_bottom.y != 7 && pg->left_direction == DOWN)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	220a      	movs	r2, #10
 8001046:	5e9b      	ldrsh	r3, [r3, r2]
 8001048:	2b07      	cmp	r3, #7
 800104a:	d023      	beq.n	8001094 <bar_update+0xc6>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7b1b      	ldrb	r3, [r3, #12]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d11f      	bne.n	8001094 <bar_update+0xc6>
	{
		pg->left_bottom.y++;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	220a      	movs	r2, #10
 8001058:	5e9b      	ldrsh	r3, [r3, r2]
 800105a:	b29b      	uxth	r3, r3
 800105c:	3301      	adds	r3, #1
 800105e:	b29b      	uxth	r3, r3
 8001060:	b21a      	sxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	815a      	strh	r2, [r3, #10]
		pg->left_middle.y++;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2206      	movs	r2, #6
 800106a:	5e9b      	ldrsh	r3, [r3, r2]
 800106c:	b29b      	uxth	r3, r3
 800106e:	3301      	adds	r3, #1
 8001070:	b29b      	uxth	r3, r3
 8001072:	b21a      	sxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	80da      	strh	r2, [r3, #6]
		pg->left_top.y++;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2202      	movs	r2, #2
 800107c:	5e9b      	ldrsh	r3, [r3, r2]
 800107e:	b29b      	uxth	r3, r3
 8001080:	3301      	adds	r3, #1
 8001082:	b29b      	uxth	r3, r3
 8001084:	b21a      	sxth	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	805a      	strh	r2, [r3, #2]
		bool left_success = true;
 800108a:	2313      	movs	r3, #19
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]
	{
 8001092:	e003      	b.n	800109c <bar_update+0xce>
	}
	else
		{
		//we still want to raise left_success into true if the top or bottom is hit.
		//even though it does not move at all
		bool left_success = true;
 8001094:	2312      	movs	r3, #18
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
	}

	//do the same if and if else statement for the right bars
	if (pg->right_top.y != 0 && pg->right_direction == UP)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2210      	movs	r2, #16
 80010a0:	5e9b      	ldrsh	r3, [r3, r2]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d023      	beq.n	80010ee <bar_update+0x120>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7e9b      	ldrb	r3, [r3, #26]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d11f      	bne.n	80010ee <bar_update+0x120>
	{
		pg->right_top.y--;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2210      	movs	r2, #16
 80010b2:	5e9b      	ldrsh	r3, [r3, r2]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	3b01      	subs	r3, #1
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	821a      	strh	r2, [r3, #16]
		pg->right_middle.y--;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2214      	movs	r2, #20
 80010c4:	5e9b      	ldrsh	r3, [r3, r2]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	3b01      	subs	r3, #1
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	829a      	strh	r2, [r3, #20]
		pg->right_bottom.y--;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2218      	movs	r2, #24
 80010d6:	5e9b      	ldrsh	r3, [r3, r2]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	3b01      	subs	r3, #1
 80010dc:	b29b      	uxth	r3, r3
 80010de:	b21a      	sxth	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	831a      	strh	r2, [r3, #24]
		bool right_success = true;
 80010e4:	2311      	movs	r3, #17
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
	{
 80010ec:	e02c      	b.n	8001148 <bar_update+0x17a>
	}
	else if (pg->right_bottom.y != 7 && pg->right_direction == DOWN)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2218      	movs	r2, #24
 80010f2:	5e9b      	ldrsh	r3, [r3, r2]
 80010f4:	2b07      	cmp	r3, #7
 80010f6:	d023      	beq.n	8001140 <bar_update+0x172>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7e9b      	ldrb	r3, [r3, #26]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d11f      	bne.n	8001140 <bar_update+0x172>
	{
		pg->right_bottom.y++;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2218      	movs	r2, #24
 8001104:	5e9b      	ldrsh	r3, [r3, r2]
 8001106:	b29b      	uxth	r3, r3
 8001108:	3301      	adds	r3, #1
 800110a:	b29b      	uxth	r3, r3
 800110c:	b21a      	sxth	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	831a      	strh	r2, [r3, #24]
		pg->right_middle.y++;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2214      	movs	r2, #20
 8001116:	5e9b      	ldrsh	r3, [r3, r2]
 8001118:	b29b      	uxth	r3, r3
 800111a:	3301      	adds	r3, #1
 800111c:	b29b      	uxth	r3, r3
 800111e:	b21a      	sxth	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	829a      	strh	r2, [r3, #20]
		pg->right_top.y++;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2210      	movs	r2, #16
 8001128:	5e9b      	ldrsh	r3, [r3, r2]
 800112a:	b29b      	uxth	r3, r3
 800112c:	3301      	adds	r3, #1
 800112e:	b29b      	uxth	r3, r3
 8001130:	b21a      	sxth	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	821a      	strh	r2, [r3, #16]
		bool right_success = true;
 8001136:	2310      	movs	r3, #16
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
	{
 800113e:	e003      	b.n	8001148 <bar_update+0x17a>
	}
	else
	{
		//we still want to raise right_success into true if the top or bottom is hit.
		//even though it does not move at all
		bool right_success = true;
 8001140:	230f      	movs	r3, #15
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
	}

	if (right_success == true && left_success == true)
 8001148:	2316      	movs	r3, #22
 800114a:	18fb      	adds	r3, r7, r3
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d008      	beq.n	8001164 <bar_update+0x196>
 8001152:	2317      	movs	r3, #23
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <bar_update+0x196>
	{
		bool success = true;
 800115c:	230e      	movs	r3, #14
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
	}

	return success;
 8001164:	2315      	movs	r3, #21
 8001166:	18fb      	adds	r3, r7, r3
 8001168:	781b      	ldrb	r3, [r3, #0]
}
 800116a:	0018      	movs	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	b006      	add	sp, #24
 8001170:	bd80      	pop	{r7, pc}

08001172 <ball_plot>:

//plotting the ball in code. it must check for the top and bottom, the two bars,
//and the goal zone behind the bars.
void ball_plot(pong_game* pg, int8_t b[CHECKS_WIDE][CHECKS_WIDE])
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
	//plots ball on board
	b[pg->ball_position.x][pg->ball_position.y] = -1;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	221c      	movs	r2, #28
 8001180:	5e9b      	ldrsh	r3, [r3, r2]
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	18d3      	adds	r3, r2, r3
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	211e      	movs	r1, #30
 800118c:	5e52      	ldrsh	r2, [r2, r1]
 800118e:	21ff      	movs	r1, #255	; 0xff
 8001190:	5499      	strb	r1, [r3, r2]
}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	46bd      	mov	sp, r7
 8001196:	b002      	add	sp, #8
 8001198:	bd80      	pop	{r7, pc}

0800119a <bars_plot>:

void bars_plot(pong_game* pg, int8_t b[CHECKS_WIDE][CHECKS_WIDE])
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	6039      	str	r1, [r7, #0]
	//plot the bar on the board
	b[pg->left_top.x][pg->left_top.y] = 1;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	5e9b      	ldrsh	r3, [r3, r2]
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	18d3      	adds	r3, r2, r3
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	2102      	movs	r1, #2
 80011b4:	5e52      	ldrsh	r2, [r2, r1]
 80011b6:	2101      	movs	r1, #1
 80011b8:	5499      	strb	r1, [r3, r2]
	b[pg->left_middle.x][pg->left_middle.y] = 1;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2204      	movs	r2, #4
 80011be:	5e9b      	ldrsh	r3, [r3, r2]
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	18d3      	adds	r3, r2, r3
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	2106      	movs	r1, #6
 80011ca:	5e52      	ldrsh	r2, [r2, r1]
 80011cc:	2101      	movs	r1, #1
 80011ce:	5499      	strb	r1, [r3, r2]
	b[pg->left_bottom.x][pg->left_bottom.y] = 1;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2208      	movs	r2, #8
 80011d4:	5e9b      	ldrsh	r3, [r3, r2]
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	18d3      	adds	r3, r2, r3
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	210a      	movs	r1, #10
 80011e0:	5e52      	ldrsh	r2, [r2, r1]
 80011e2:	2101      	movs	r1, #1
 80011e4:	5499      	strb	r1, [r3, r2]

	//plots right bar
	b[pg->right_top.x][pg->right_top.y] = 1;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	220e      	movs	r2, #14
 80011ea:	5e9b      	ldrsh	r3, [r3, r2]
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	18d3      	adds	r3, r2, r3
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	2110      	movs	r1, #16
 80011f6:	5e52      	ldrsh	r2, [r2, r1]
 80011f8:	2101      	movs	r1, #1
 80011fa:	5499      	strb	r1, [r3, r2]
	b[pg->right_middle.x][pg->right_middle.y] = 1;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2212      	movs	r2, #18
 8001200:	5e9b      	ldrsh	r3, [r3, r2]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	18d3      	adds	r3, r2, r3
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	2114      	movs	r1, #20
 800120c:	5e52      	ldrsh	r2, [r2, r1]
 800120e:	2101      	movs	r1, #1
 8001210:	5499      	strb	r1, [r3, r2]
	b[pg->right_bottom.x][pg->right_bottom.y] = 1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2216      	movs	r2, #22
 8001216:	5e9b      	ldrsh	r3, [r3, r2]
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	18d3      	adds	r3, r2, r3
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	2118      	movs	r1, #24
 8001222:	5e52      	ldrsh	r2, [r2, r1]
 8001224:	2101      	movs	r1, #1
 8001226:	5499      	strb	r1, [r3, r2]
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}

08001230 <check_ball_collision>:

void check_ball_collision(pong_game* pg)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	//check for bounces on the ball.
	//next check if direction needs to be switched based on if it hit the
	//ceiling or bottom, or if it hit the either bar
	//first checks top or bottom
	//quite possibly one of the grossest if statement i've ever made.
	if (pg->ball_position.y == 0 || pg->ball_position.y == 7) //if ball hits ceiling or bottom, change directions
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	221e      	movs	r2, #30
 800123c:	5e9b      	ldrsh	r3, [r3, r2]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d004      	beq.n	800124c <check_ball_collision+0x1c>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	221e      	movs	r2, #30
 8001246:	5e9b      	ldrsh	r3, [r3, r2]
 8001248:	2b07      	cmp	r3, #7
 800124a:	d104      	bne.n	8001256 <check_ball_collision+0x26>
	{
		ball_state(pg);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	0018      	movs	r0, r3
 8001250:	f7ff fe93 	bl	8000f7a <ball_state>
 8001254:	e0cb      	b.n	80013ee <check_ball_collision+0x1be>
	}
	//next check if ball is in position to hit either bar
	else if(pg->ball_position.x == 1)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	221c      	movs	r2, #28
 800125a:	5e9b      	ldrsh	r3, [r3, r2]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d160      	bne.n	8001322 <check_ball_collision+0xf2>
	{
		//next check if the next move will be into the left bar
		//we wanna make sure it goes into the bar on the next frame
		//since thats the point it will be going into
		int8_t next_position_up = pg->ball_position.y++;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	221e      	movs	r2, #30
 8001264:	5e9a      	ldrsh	r2, [r3, r2]
 8001266:	b293      	uxth	r3, r2
 8001268:	3301      	adds	r3, #1
 800126a:	b29b      	uxth	r3, r3
 800126c:	b219      	sxth	r1, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	83d9      	strh	r1, [r3, #30]
 8001272:	200d      	movs	r0, #13
 8001274:	183b      	adds	r3, r7, r0
 8001276:	701a      	strb	r2, [r3, #0]
		int8_t next_position_down = pg->ball_position.y--;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	221e      	movs	r2, #30
 800127c:	5e9a      	ldrsh	r2, [r3, r2]
 800127e:	b293      	uxth	r3, r2
 8001280:	3b01      	subs	r3, #1
 8001282:	b29b      	uxth	r3, r3
 8001284:	b219      	sxth	r1, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	83d9      	strh	r1, [r3, #30]
 800128a:	210c      	movs	r1, #12
 800128c:	187b      	adds	r3, r7, r1
 800128e:	701a      	strb	r2, [r3, #0]
		if (next_position_down == pg->left_top.y || next_position_up == pg->left_top.y)
 8001290:	187b      	adds	r3, r7, r1
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	b25b      	sxtb	r3, r3
 8001296:	b21a      	sxth	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2102      	movs	r1, #2
 800129c:	5e5b      	ldrsh	r3, [r3, r1]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d008      	beq.n	80012b4 <check_ball_collision+0x84>
 80012a2:	183b      	adds	r3, r7, r0
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2102      	movs	r1, #2
 80012ae:	5e5b      	ldrsh	r3, [r3, r1]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d104      	bne.n	80012be <check_ball_collision+0x8e>
		{
			ball_state(pg);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7ff fe5f 	bl	8000f7a <ball_state>
 80012bc:	e097      	b.n	80013ee <check_ball_collision+0x1be>
		}
		else if (next_position_down == pg->left_bottom.y || next_position_up == pg->left_bottom.y)
 80012be:	230c      	movs	r3, #12
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	210a      	movs	r1, #10
 80012cc:	5e5b      	ldrsh	r3, [r3, r1]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d009      	beq.n	80012e6 <check_ball_collision+0xb6>
 80012d2:	230d      	movs	r3, #13
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	b21a      	sxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	210a      	movs	r1, #10
 80012e0:	5e5b      	ldrsh	r3, [r3, r1]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d104      	bne.n	80012f0 <check_ball_collision+0xc0>
		{
			ball_state(pg);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff fe46 	bl	8000f7a <ball_state>
 80012ee:	e07e      	b.n	80013ee <check_ball_collision+0x1be>
		}
		else if (next_position_down == pg->left_middle.y || next_position_up == pg->left_middle.y)
 80012f0:	230c      	movs	r3, #12
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2106      	movs	r1, #6
 80012fe:	5e5b      	ldrsh	r3, [r3, r1]
 8001300:	429a      	cmp	r2, r3
 8001302:	d009      	beq.n	8001318 <check_ball_collision+0xe8>
 8001304:	230d      	movs	r3, #13
 8001306:	18fb      	adds	r3, r7, r3
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b25b      	sxtb	r3, r3
 800130c:	b21a      	sxth	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2106      	movs	r1, #6
 8001312:	5e5b      	ldrsh	r3, [r3, r1]
 8001314:	429a      	cmp	r2, r3
 8001316:	d16a      	bne.n	80013ee <check_ball_collision+0x1be>
		{
			ball_state(pg);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	0018      	movs	r0, r3
 800131c:	f7ff fe2d 	bl	8000f7a <ball_state>
		{
			ball_state(pg);
		}
	}

}
 8001320:	e065      	b.n	80013ee <check_ball_collision+0x1be>
	else if(pg->ball_position.x == 6)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	221c      	movs	r2, #28
 8001326:	5e9b      	ldrsh	r3, [r3, r2]
 8001328:	2b06      	cmp	r3, #6
 800132a:	d160      	bne.n	80013ee <check_ball_collision+0x1be>
		int8_t next_position_up = pg->ball_position.y++;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	221e      	movs	r2, #30
 8001330:	5e9a      	ldrsh	r2, [r3, r2]
 8001332:	b293      	uxth	r3, r2
 8001334:	3301      	adds	r3, #1
 8001336:	b29b      	uxth	r3, r3
 8001338:	b219      	sxth	r1, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	83d9      	strh	r1, [r3, #30]
 800133e:	200f      	movs	r0, #15
 8001340:	183b      	adds	r3, r7, r0
 8001342:	701a      	strb	r2, [r3, #0]
		int8_t next_position_down = pg->ball_position.y--;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	221e      	movs	r2, #30
 8001348:	5e9a      	ldrsh	r2, [r3, r2]
 800134a:	b293      	uxth	r3, r2
 800134c:	3b01      	subs	r3, #1
 800134e:	b29b      	uxth	r3, r3
 8001350:	b219      	sxth	r1, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	83d9      	strh	r1, [r3, #30]
 8001356:	210e      	movs	r1, #14
 8001358:	187b      	adds	r3, r7, r1
 800135a:	701a      	strb	r2, [r3, #0]
		if (next_position_down == pg->right_top.y || next_position_up == pg->right_top.y)
 800135c:	187b      	adds	r3, r7, r1
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b25b      	sxtb	r3, r3
 8001362:	b21a      	sxth	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2110      	movs	r1, #16
 8001368:	5e5b      	ldrsh	r3, [r3, r1]
 800136a:	429a      	cmp	r2, r3
 800136c:	d008      	beq.n	8001380 <check_ball_collision+0x150>
 800136e:	183b      	adds	r3, r7, r0
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b25b      	sxtb	r3, r3
 8001374:	b21a      	sxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2110      	movs	r1, #16
 800137a:	5e5b      	ldrsh	r3, [r3, r1]
 800137c:	429a      	cmp	r2, r3
 800137e:	d104      	bne.n	800138a <check_ball_collision+0x15a>
			ball_state(pg);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	0018      	movs	r0, r3
 8001384:	f7ff fdf9 	bl	8000f7a <ball_state>
 8001388:	e031      	b.n	80013ee <check_ball_collision+0x1be>
		else if (next_position_down == pg->right_bottom.y || next_position_up == pg->right_bottom.y)
 800138a:	230e      	movs	r3, #14
 800138c:	18fb      	adds	r3, r7, r3
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b25b      	sxtb	r3, r3
 8001392:	b21a      	sxth	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2118      	movs	r1, #24
 8001398:	5e5b      	ldrsh	r3, [r3, r1]
 800139a:	429a      	cmp	r2, r3
 800139c:	d009      	beq.n	80013b2 <check_ball_collision+0x182>
 800139e:	230f      	movs	r3, #15
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	b21a      	sxth	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2118      	movs	r1, #24
 80013ac:	5e5b      	ldrsh	r3, [r3, r1]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d104      	bne.n	80013bc <check_ball_collision+0x18c>
			ball_state(pg);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff fde0 	bl	8000f7a <ball_state>
 80013ba:	e018      	b.n	80013ee <check_ball_collision+0x1be>
		else if (next_position_down == pg->right_middle.y || next_position_up == pg->right_middle.y)
 80013bc:	230e      	movs	r3, #14
 80013be:	18fb      	adds	r3, r7, r3
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2114      	movs	r1, #20
 80013ca:	5e5b      	ldrsh	r3, [r3, r1]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d009      	beq.n	80013e4 <check_ball_collision+0x1b4>
 80013d0:	230f      	movs	r3, #15
 80013d2:	18fb      	adds	r3, r7, r3
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	b21a      	sxth	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2114      	movs	r1, #20
 80013de:	5e5b      	ldrsh	r3, [r3, r1]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d104      	bne.n	80013ee <check_ball_collision+0x1be>
			ball_state(pg);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7ff fdc7 	bl	8000f7a <ball_state>
}
 80013ec:	e7ff      	b.n	80013ee <check_ball_collision+0x1be>
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b004      	add	sp, #16
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <pong_periodic_play>:

void pong_periodic_play(pong_game* pg)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	//create a board for the functions to plot the points
	static int8_t board[CHECKS_WIDE][CHECKS_WIDE];

	//fill board with zeroes
	for (int x = 0; x < CHECKS_WIDE; x++){
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	e013      	b.n	800142e <pong_periodic_play+0x36>
		for (int y = 0; y < CHECKS_WIDE; y++){
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	e00a      	b.n	8001422 <pong_periodic_play+0x2a>
			board[x][y] = 0;
 800140c:	4a43      	ldr	r2, [pc, #268]	; (800151c <pong_periodic_play+0x124>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	18d2      	adds	r2, r2, r3
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	18d3      	adds	r3, r2, r3
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
		for (int y = 0; y < CHECKS_WIDE; y++){
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	3301      	adds	r3, #1
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	2b07      	cmp	r3, #7
 8001426:	ddf1      	ble.n	800140c <pong_periodic_play+0x14>
	for (int x = 0; x < CHECKS_WIDE; x++){
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3301      	adds	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2b07      	cmp	r3, #7
 8001432:	dde8      	ble.n	8001406 <pong_periodic_play+0xe>
		}
	}

	//we wanna make sure if the plotting was a success
	//the bar will be moved by pong_plot. The ball will not.
	bool success = true;
 8001434:	240f      	movs	r4, #15
 8001436:	193b      	adds	r3, r7, r4
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
	bar_update(pg, board);
 800143c:	4a37      	ldr	r2, [pc, #220]	; (800151c <pong_periodic_play+0x124>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	0011      	movs	r1, r2
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff fdc3 	bl	8000fce <bar_update>
	check_ball_collision(pg);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff fef0 	bl	8001230 <check_ball_collision>

	//dont actually want to create a function for what happens if it breaks so
	//im just gonna freeze the game
	if (success != true)
 8001450:	193b      	adds	r3, r7, r4
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2201      	movs	r2, #1
 8001456:	4053      	eors	r3, r2
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d000      	beq.n	8001460 <pong_periodic_play+0x68>
	{
		while(1);
 800145e:	e7fe      	b.n	800145e <pong_periodic_play+0x66>
	}

	//next, move the ball based on it's direction
	//bar_update updates the bar on its own so yeah
	switch (pg->ball_direction)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2220      	movs	r2, #32
 8001464:	5c9b      	ldrb	r3, [r3, r2]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d008      	beq.n	800147c <pong_periodic_play+0x84>
 800146a:	dc53      	bgt.n	8001514 <pong_periodic_play+0x11c>
 800146c:	2b02      	cmp	r3, #2
 800146e:	d018      	beq.n	80014a2 <pong_periodic_play+0xaa>
 8001470:	dc50      	bgt.n	8001514 <pong_periodic_play+0x11c>
 8001472:	2b00      	cmp	r3, #0
 8001474:	d03b      	beq.n	80014ee <pong_periodic_play+0xf6>
 8001476:	2b01      	cmp	r3, #1
 8001478:	d026      	beq.n	80014c8 <pong_periodic_play+0xd0>
			pg->ball_position.x++;
			pg->ball_position.y--;
			break;
	}

}
 800147a:	e04b      	b.n	8001514 <pong_periodic_play+0x11c>
			pg->ball_position.x--;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	221c      	movs	r2, #28
 8001480:	5e9b      	ldrsh	r3, [r3, r2]
 8001482:	b29b      	uxth	r3, r3
 8001484:	3b01      	subs	r3, #1
 8001486:	b29b      	uxth	r3, r3
 8001488:	b21a      	sxth	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	839a      	strh	r2, [r3, #28]
			pg->ball_position.y--;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	221e      	movs	r2, #30
 8001492:	5e9b      	ldrsh	r3, [r3, r2]
 8001494:	b29b      	uxth	r3, r3
 8001496:	3b01      	subs	r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	b21a      	sxth	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	83da      	strh	r2, [r3, #30]
			break;
 80014a0:	e038      	b.n	8001514 <pong_periodic_play+0x11c>
			pg->ball_position.x--;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	221c      	movs	r2, #28
 80014a6:	5e9b      	ldrsh	r3, [r3, r2]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3b01      	subs	r3, #1
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	839a      	strh	r2, [r3, #28]
			pg->ball_position.y++;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	221e      	movs	r2, #30
 80014b8:	5e9b      	ldrsh	r3, [r3, r2]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	3301      	adds	r3, #1
 80014be:	b29b      	uxth	r3, r3
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	83da      	strh	r2, [r3, #30]
			break;
 80014c6:	e025      	b.n	8001514 <pong_periodic_play+0x11c>
			pg->ball_position.x++;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	221c      	movs	r2, #28
 80014cc:	5e9b      	ldrsh	r3, [r3, r2]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	3301      	adds	r3, #1
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	839a      	strh	r2, [r3, #28]
			pg->ball_position.y++;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	221e      	movs	r2, #30
 80014de:	5e9b      	ldrsh	r3, [r3, r2]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	3301      	adds	r3, #1
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	83da      	strh	r2, [r3, #30]
			break;
 80014ec:	e012      	b.n	8001514 <pong_periodic_play+0x11c>
			pg->ball_position.x++;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	221c      	movs	r2, #28
 80014f2:	5e9b      	ldrsh	r3, [r3, r2]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	3301      	adds	r3, #1
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	839a      	strh	r2, [r3, #28]
			pg->ball_position.y--;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	221e      	movs	r2, #30
 8001504:	5e9b      	ldrsh	r3, [r3, r2]
 8001506:	b29b      	uxth	r3, r3
 8001508:	3b01      	subs	r3, #1
 800150a:	b29b      	uxth	r3, r3
 800150c:	b21a      	sxth	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	83da      	strh	r2, [r3, #30]
			break;
 8001512:	46c0      	nop			; (mov r8, r8)
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	b007      	add	sp, #28
 800151a:	bd90      	pop	{r4, r7, pc}
 800151c:	20000170 	.word	0x20000170

08001520 <ram_health>:
// this does not happen. ACCEPTABLE.

extern volatile int32_t timer_isr_countdown; // Required to control timing
const int snake_board_size = CHECKS_WIDE; // Provided for extern

void ram_health(uint16_t dummy_var, uint16_t pattern){
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	0002      	movs	r2, r0
 8001528:	1dbb      	adds	r3, r7, #6
 800152a:	801a      	strh	r2, [r3, #0]
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	1c0a      	adds	r2, r1, #0
 8001530:	801a      	strh	r2, [r3, #0]
	// DEBUGGING PHASE: LOCK UP THE PROGRAM if RAM is corrupted.
	if (dummy_var != pattern){
 8001532:	1dba      	adds	r2, r7, #6
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	8812      	ldrh	r2, [r2, #0]
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d000      	beq.n	8001540 <ram_health+0x20>
		while(1);
 800153e:	e7fe      	b.n	800153e <ram_health+0x1e>
	}
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b002      	add	sp, #8
 8001546:	bd80      	pop	{r7, pc}

08001548 <pong_main>:


void pong_main(void){
 8001548:	b580      	push	{r7, lr}
 800154a:	b09e      	sub	sp, #120	; 0x78
 800154c:	af00      	add	r7, sp, #0
	const int32_t timer_isr_500ms_restart = 500;
 800154e:	23fa      	movs	r3, #250	; 0xfa
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	673b      	str	r3, [r7, #112]	; 0x70
	const int32_t timer_isr_2000ms_restart = 2000;
 8001554:	23fa      	movs	r3, #250	; 0xfa
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	66fb      	str	r3, [r7, #108]	; 0x6c
	snake_game_init(&my_game);
	 */

	// Construct IPC
	Smc_queue turn_q;
	volatile uint16_t ram_dummy_2 = MEMORY_BARRIER_2;
 800155a:	2326      	movs	r3, #38	; 0x26
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	4a30      	ldr	r2, [pc, #192]	; (8001620 <pong_main+0xd8>)
 8001560:	801a      	strh	r2, [r3, #0]
	smc_queue_init(&turn_q);
 8001562:	2328      	movs	r3, #40	; 0x28
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	0018      	movs	r0, r3
 8001568:	f000 f90e 	bl	8001788 <smc_queue_init>
	quadknob_init(&user_knob_1);
	*/

	//pong game init
	pong_game pong_game;
	volatile uint16_t ram_dummy_4 = MEMORY_BARRIER_4;
 800156c:	1cbb      	adds	r3, r7, #2
 800156e:	4a2d      	ldr	r2, [pc, #180]	; (8001624 <pong_main+0xdc>)
 8001570:	801a      	strh	r2, [r3, #0]
	pong_init(&pong_game);
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	0018      	movs	r0, r3
 8001576:	f7ff fcbe 	bl	8000ef6 <pong_init>
  __ASM volatile ("cpsid i" : : : "memory");
 800157a:	b672      	cpsid	i
}
 800157c:	46c0      	nop			; (mov r8, r8)

	// Output object
	// Block all interrupts while initializing - initial protocol timing is critical.
	__disable_irq();
	display_init();
 800157e:	f7ff f89b 	bl	80006b8 <display_init>
  __ASM volatile ("cpsie i" : : : "memory");
 8001582:	b662      	cpsie	i
}
 8001584:	46c0      	nop			; (mov r8, r8)
	__enable_irq();

	// Welcome screen = checkerboard for 2 seconds.
	timer_isr_countdown = timer_isr_2000ms_restart;
 8001586:	4b28      	ldr	r3, [pc, #160]	; (8001628 <pong_main+0xe0>)
 8001588:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800158a:	601a      	str	r2, [r3, #0]
	display_checkerboard();
 800158c:	f7ff f982 	bl	8000894 <display_checkerboard>
	while (timer_isr_countdown > 0){}
 8001590:	46c0      	nop			; (mov r8, r8)
 8001592:	4b25      	ldr	r3, [pc, #148]	; (8001628 <pong_main+0xe0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	dcfb      	bgt.n	8001592 <pong_main+0x4a>
	timer_isr_countdown = timer_isr_500ms_restart;
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <pong_main+0xe0>)
 800159c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800159e:	601a      	str	r2, [r3, #0]
	// Confirm all the rules and paint the initial snake.
	display_blank();
 80015a0:	f7ff f8fe 	bl	80007a0 <display_blank>
	//snake_game_cleanup(&my_game);

	//display the game
	update_pong_display(&pong_game, true);
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2101      	movs	r1, #1
 80015a8:	0018      	movs	r0, r3
 80015aa:	f000 f83f 	bl	800162c <update_pong_display>

	// OPERATE THE GAME
	int32_t prior_timer_countdown = timer_isr_countdown;
 80015ae:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <pong_main+0xe0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	677b      	str	r3, [r7, #116]	; 0x74

	while(1){
		//ram_health(ram_dummy_1, MEMORY_BARRIER_1); dont need
		ram_health(ram_dummy_2, MEMORY_BARRIER_2);
 80015b4:	2326      	movs	r3, #38	; 0x26
 80015b6:	18fb      	adds	r3, r7, r3
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	4a18      	ldr	r2, [pc, #96]	; (8001620 <pong_main+0xd8>)
 80015be:	0011      	movs	r1, r2
 80015c0:	0018      	movs	r0, r3
 80015c2:	f7ff ffad 	bl	8001520 <ram_health>
		//ram_health(ram_dummy_3, MEMORY_BARRIER_3); dont need
		ram_health(ram_dummy_4, MEMORY_BARRIER_4);
 80015c6:	1cbb      	adds	r3, r7, #2
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4a15      	ldr	r2, [pc, #84]	; (8001624 <pong_main+0xdc>)
 80015ce:	0011      	movs	r1, r2
 80015d0:	0018      	movs	r0, r3
 80015d2:	f7ff ffa5 	bl	8001520 <ram_health>

	// ASSERT TIMER COUNTDOWN IN RANGE
		if ((timer_isr_countdown > timer_isr_500ms_restart)||
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <pong_main+0xe0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80015dc:	429a      	cmp	r2, r3
 80015de:	db03      	blt.n	80015e8 <pong_main+0xa0>
				(timer_isr_countdown < 0)){
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <pong_main+0xe0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
		if ((timer_isr_countdown > timer_isr_500ms_restart)||
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da02      	bge.n	80015ee <pong_main+0xa6>
			display_checkerboard();
 80015e8:	f7ff f954 	bl	8000894 <display_checkerboard>
			while(1);
 80015ec:	e7fe      	b.n	80015ec <pong_main+0xa4>
		 *insert code here for user input
		 *
		 */

		//i think hard fault is due to prior timer not being reset lol
		if (prior_timer_countdown != timer_isr_countdown )
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <pong_main+0xe0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d002      	beq.n	80015fe <pong_main+0xb6>
		{
			prior_timer_countdown = timer_isr_countdown;
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <pong_main+0xe0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	677b      	str	r3, [r7, #116]	; 0x74
		}

		//animate every 500 ms
		if (timer_isr_countdown <= 0)
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <pong_main+0xe0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	dcd6      	bgt.n	80015b4 <pong_main+0x6c>
		{
			//restart timer
			timer_isr_countdown = timer_isr_500ms_restart;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <pong_main+0xe0>)
 8001608:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800160a:	601a      	str	r2, [r3, #0]

			//move ball and bar one frame
			pong_periodic_play(&pong_game);
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	0018      	movs	r0, r3
 8001610:	f7ff fef2 	bl	80013f8 <pong_periodic_play>

			//paint on screen
			update_pong_display(&pong_game, true);
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	2101      	movs	r1, #1
 8001618:	0018      	movs	r0, r3
 800161a:	f000 f807 	bl	800162c <update_pong_display>
		ram_health(ram_dummy_2, MEMORY_BARRIER_2);
 800161e:	e7c9      	b.n	80015b4 <pong_main+0x6c>
 8001620:	00002222 	.word	0x00002222
 8001624:	00004444 	.word	0x00004444
 8001628:	20000000 	.word	0x20000000

0800162c <update_pong_display>:
	}
}

//show_pong for pong
void update_pong_display(const pong_game* pg, bool update)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	000a      	movs	r2, r1
 8001636:	1cfb      	adds	r3, r7, #3
 8001638:	701a      	strb	r2, [r3, #0]
	static int16_t x = 0;
	static int16_t y = 0;
	static int8_t b[CHECKS_WIDE][CHECKS_WIDE];

	//if the board needs to be updated, clear it
	if (update)
 800163a:	1cfb      	adds	r3, r7, #3
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d02b      	beq.n	800169a <update_pong_display+0x6e>
	{
		for (int r = 0; r < CHECKS_WIDE; r++)
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e013      	b.n	8001670 <update_pong_display+0x44>
		{
			for (int c = 0; c < CHECKS_WIDE; c++)
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	e00a      	b.n	8001664 <update_pong_display+0x38>
			{
				b[r][c] = 0;
 800164e:	4a4b      	ldr	r2, [pc, #300]	; (800177c <update_pong_display+0x150>)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	18d2      	adds	r2, r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	18d3      	adds	r3, r2, r3
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
			for (int c = 0; c < CHECKS_WIDE; c++)
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	3301      	adds	r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2b07      	cmp	r3, #7
 8001668:	ddf1      	ble.n	800164e <update_pong_display+0x22>
		for (int r = 0; r < CHECKS_WIDE; r++)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3301      	adds	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b07      	cmp	r3, #7
 8001674:	dde8      	ble.n	8001648 <update_pong_display+0x1c>
			}
		}
		//finds all the spots needing to be painted
		bars_plot(pg, b);
 8001676:	4a41      	ldr	r2, [pc, #260]	; (800177c <update_pong_display+0x150>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	0011      	movs	r1, r2
 800167c:	0018      	movs	r0, r3
 800167e:	f7ff fd8c 	bl	800119a <bars_plot>
		ball_plot(pg, b);
 8001682:	4a3e      	ldr	r2, [pc, #248]	; (800177c <update_pong_display+0x150>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	0011      	movs	r1, r2
 8001688:	0018      	movs	r0, r3
 800168a:	f7ff fd72 	bl	8001172 <ball_plot>
		x = 0;
 800168e:	4b3c      	ldr	r3, [pc, #240]	; (8001780 <update_pong_display+0x154>)
 8001690:	2200      	movs	r2, #0
 8001692:	801a      	strh	r2, [r3, #0]
		y = 0;
 8001694:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <update_pong_display+0x158>)
 8001696:	2200      	movs	r2, #0
 8001698:	801a      	strh	r2, [r3, #0]
	}

	//calls display to paint the squares.
	for (x=0; x < 8; x++)
 800169a:	4b39      	ldr	r3, [pc, #228]	; (8001780 <update_pong_display+0x154>)
 800169c:	2200      	movs	r2, #0
 800169e:	801a      	strh	r2, [r3, #0]
 80016a0:	e041      	b.n	8001726 <update_pong_display+0xfa>
	{
		for(y=0; y<8;y++)
 80016a2:	4b38      	ldr	r3, [pc, #224]	; (8001784 <update_pong_display+0x158>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	801a      	strh	r2, [r3, #0]
 80016a8:	e02f      	b.n	800170a <update_pong_display+0xde>
		{
			if (b[x][y] == 0){
 80016aa:	4b35      	ldr	r3, [pc, #212]	; (8001780 <update_pong_display+0x154>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	5e9b      	ldrsh	r3, [r3, r2]
 80016b0:	0018      	movs	r0, r3
 80016b2:	4b34      	ldr	r3, [pc, #208]	; (8001784 <update_pong_display+0x158>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	5e9b      	ldrsh	r3, [r3, r2]
 80016b8:	0019      	movs	r1, r3
 80016ba:	4a30      	ldr	r2, [pc, #192]	; (800177c <update_pong_display+0x150>)
 80016bc:	00c3      	lsls	r3, r0, #3
 80016be:	18d3      	adds	r3, r2, r3
 80016c0:	565b      	ldrsb	r3, [r3, r1]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10c      	bne.n	80016e0 <update_pong_display+0xb4>
				display_white_square(x,y);
 80016c6:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <update_pong_display+0x154>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	5e9b      	ldrsh	r3, [r3, r2]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <update_pong_display+0x158>)
 80016d0:	2100      	movs	r1, #0
 80016d2:	5e5b      	ldrsh	r3, [r3, r1]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	0019      	movs	r1, r3
 80016d8:	0010      	movs	r0, r2
 80016da:	f7ff f9f9 	bl	8000ad0 <display_white_square>
 80016de:	e00b      	b.n	80016f8 <update_pong_display+0xcc>
			}
			else {
				display_dark_square(x,y);
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <update_pong_display+0x154>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	5e9b      	ldrsh	r3, [r3, r2]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	4b26      	ldr	r3, [pc, #152]	; (8001784 <update_pong_display+0x158>)
 80016ea:	2100      	movs	r1, #0
 80016ec:	5e5b      	ldrsh	r3, [r3, r1]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	0019      	movs	r1, r3
 80016f2:	0010      	movs	r0, r2
 80016f4:	f7ff fa0a 	bl	8000b0c <display_dark_square>
		for(y=0; y<8;y++)
 80016f8:	4b22      	ldr	r3, [pc, #136]	; (8001784 <update_pong_display+0x158>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	5e9b      	ldrsh	r3, [r3, r2]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	b29b      	uxth	r3, r3
 8001704:	b21a      	sxth	r2, r3
 8001706:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <update_pong_display+0x158>)
 8001708:	801a      	strh	r2, [r3, #0]
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <update_pong_display+0x158>)
 800170c:	2200      	movs	r2, #0
 800170e:	5e9b      	ldrsh	r3, [r3, r2]
 8001710:	2b07      	cmp	r3, #7
 8001712:	ddca      	ble.n	80016aa <update_pong_display+0x7e>
	for (x=0; x < 8; x++)
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <update_pong_display+0x154>)
 8001716:	2200      	movs	r2, #0
 8001718:	5e9b      	ldrsh	r3, [r3, r2]
 800171a:	b29b      	uxth	r3, r3
 800171c:	3301      	adds	r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	b21a      	sxth	r2, r3
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <update_pong_display+0x154>)
 8001724:	801a      	strh	r2, [r3, #0]
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <update_pong_display+0x154>)
 8001728:	2200      	movs	r2, #0
 800172a:	5e9b      	ldrsh	r3, [r3, r2]
 800172c:	2b07      	cmp	r3, #7
 800172e:	ddb8      	ble.n	80016a2 <update_pong_display+0x76>
		}
	}


	// Update the statics so that the next plot is a new cell.
	x++;
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <update_pong_display+0x154>)
 8001732:	2200      	movs	r2, #0
 8001734:	5e9b      	ldrsh	r3, [r3, r2]
 8001736:	b29b      	uxth	r3, r3
 8001738:	3301      	adds	r3, #1
 800173a:	b29b      	uxth	r3, r3
 800173c:	b21a      	sxth	r2, r3
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <update_pong_display+0x154>)
 8001740:	801a      	strh	r2, [r3, #0]
	if (x >= CHECKS_WIDE){
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <update_pong_display+0x154>)
 8001744:	2200      	movs	r2, #0
 8001746:	5e9b      	ldrsh	r3, [r3, r2]
 8001748:	2b07      	cmp	r3, #7
 800174a:	dd13      	ble.n	8001774 <update_pong_display+0x148>
		x = 0;
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <update_pong_display+0x154>)
 800174e:	2200      	movs	r2, #0
 8001750:	801a      	strh	r2, [r3, #0]
		y++;
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <update_pong_display+0x158>)
 8001754:	2200      	movs	r2, #0
 8001756:	5e9b      	ldrsh	r3, [r3, r2]
 8001758:	b29b      	uxth	r3, r3
 800175a:	3301      	adds	r3, #1
 800175c:	b29b      	uxth	r3, r3
 800175e:	b21a      	sxth	r2, r3
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <update_pong_display+0x158>)
 8001762:	801a      	strh	r2, [r3, #0]
		if (y >= CHECKS_WIDE){
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <update_pong_display+0x158>)
 8001766:	2200      	movs	r2, #0
 8001768:	5e9b      	ldrsh	r3, [r3, r2]
 800176a:	2b07      	cmp	r3, #7
 800176c:	dd02      	ble.n	8001774 <update_pong_display+0x148>
			y = 0;
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <update_pong_display+0x158>)
 8001770:	2200      	movs	r2, #0
 8001772:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8001774:	46c0      	nop			; (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	b004      	add	sp, #16
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200001b0 	.word	0x200001b0
 8001780:	200001f0 	.word	0x200001f0
 8001784:	200001f2 	.word	0x200001f2

08001788 <smc_queue_init>:
 */

#include "smc_queue.h"
#include "pong_enums.h"

Smc_queue* smc_queue_init(Smc_queue* q){
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	q->head = 0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
	q->tail= 0;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
	q->cap = SMC_Q_BUFSIZE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	220a      	movs	r2, #10
 80017a0:	601a      	str	r2, [r3, #0]
	q->burden = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
	q->put = &(smc_queue_put);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <smc_queue_init+0x3c>)
 80017ac:	639a      	str	r2, [r3, #56]	; 0x38
	q->get = &(smc_queue_get);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <smc_queue_init+0x40>)
 80017b2:	641a      	str	r2, [r3, #64]	; 0x40
	q->peek = &(smc_queue_peek);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a05      	ldr	r2, [pc, #20]	; (80017cc <smc_queue_init+0x44>)
 80017b8:	63da      	str	r2, [r3, #60]	; 0x3c
	return q;
 80017ba:	687b      	ldr	r3, [r7, #4]
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b002      	add	sp, #8
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	080017d1 	.word	0x080017d1
 80017c8:	08001831 	.word	0x08001831
 80017cc:	080018b3 	.word	0x080018b3

080017d0 <smc_queue_put>:


bool smc_queue_put(Smc_queue *q, const Q_data *msg){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
	bool success = false;
 80017da:	210f      	movs	r1, #15
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
	// FIRST check if there is room in the queue
	if (q->burden >= q->cap) success = false;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d303      	bcc.n	80017f6 <smc_queue_put+0x26>
 80017ee:	187b      	adds	r3, r7, r1
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
 80017f4:	e015      	b.n	8001822 <smc_queue_put+0x52>
	else {
		 q-> burden += 1;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	605a      	str	r2, [r3, #4]
		 q->buffer[q->tail] = *msg;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	3304      	adds	r3, #4
 8001808:	0099      	lsls	r1, r3, #2
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	508b      	str	r3, [r1, r2]
		 q->tail += 1;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	609a      	str	r2, [r3, #8]
		 success = true;
 800181a:	230f      	movs	r3, #15
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
	}
	return success;
 8001822:	230f      	movs	r3, #15
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	781b      	ldrb	r3, [r3, #0]
}
 8001828:	0018      	movs	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	b004      	add	sp, #16
 800182e:	bd80      	pop	{r7, pc}

08001830 <smc_queue_get>:

bool smc_queue_get(Smc_queue *q, Q_data  *msg){
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
	bool success = false;
 800183a:	210f      	movs	r1, #15
 800183c:	187b      	adds	r3, r7, r1
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
	// FIRST check if there is data in the queue
	if (q->burden == 0) success= false;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d103      	bne.n	8001852 <smc_queue_get+0x22>
 800184a:	187b      	adds	r3, r7, r1
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
 8001850:	e028      	b.n	80018a4 <smc_queue_get+0x74>

	else {
	    // Get message from front
		*msg = q->buffer[0];
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6912      	ldr	r2, [r2, #16]
 8001858:	601a      	str	r2, [r3, #0]
		// Shuffle others forward
		for (int n = 0; n < (q->tail - 1); n++){
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	e00d      	b.n	800187c <smc_queue_get+0x4c>
		   q->buffer[n] = q->buffer[n+1];
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	1c58      	adds	r0, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	3204      	adds	r2, #4
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	3004      	adds	r0, #4
 8001870:	0080      	lsls	r0, r0, #2
 8001872:	5841      	ldr	r1, [r0, r1]
 8001874:	50d1      	str	r1, [r2, r3]
		for (int n = 0; n < (q->tail - 1); n++){
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	3301      	adds	r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	1e5a      	subs	r2, r3, #1
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	429a      	cmp	r2, r3
 8001886:	d8eb      	bhi.n	8001860 <smc_queue_get+0x30>
		}
		// Bookkeeping
		q-> tail -= 1;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	1e5a      	subs	r2, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	609a      	str	r2, [r3, #8]
		q->burden -= 1;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	1e5a      	subs	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	605a      	str	r2, [r3, #4]
		success = true;
 800189c:	230f      	movs	r3, #15
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
	}
	return success;
 80018a4:	230f      	movs	r3, #15
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	781b      	ldrb	r3, [r3, #0]
}
 80018aa:	0018      	movs	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b004      	add	sp, #16
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <smc_queue_peek>:


bool smc_queue_peek(const Smc_queue *q, Q_data  *msg){
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b084      	sub	sp, #16
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
	bool success = false;
 80018bc:	210f      	movs	r1, #15
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
	// FIRST check if there is data in the queue
	if (q->burden == 0) success = false;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d103      	bne.n	80018d4 <smc_queue_peek+0x22>
 80018cc:	187b      	adds	r3, r7, r1
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	e007      	b.n	80018e4 <smc_queue_peek+0x32>
	// If YES - copy data but do not modify anything.
	else {
		*msg = q->buffer[0];
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6912      	ldr	r2, [r2, #16]
 80018da:	601a      	str	r2, [r3, #0]
		success = true;
 80018dc:	230f      	movs	r3, #15
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
	}
	return success;
 80018e4:	230f      	movs	r3, #15
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	781b      	ldrb	r3, [r3, #0]
}
 80018ea:	0018      	movs	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b004      	add	sp, #16
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_MspInit+0x44>)
 80018fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_MspInit+0x44>)
 8001900:	2101      	movs	r1, #1
 8001902:	430a      	orrs	r2, r1
 8001904:	641a      	str	r2, [r3, #64]	; 0x40
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_MspInit+0x44>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	2201      	movs	r2, #1
 800190c:	4013      	ands	r3, r2
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_MspInit+0x44>)
 8001914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_MspInit+0x44>)
 8001918:	2180      	movs	r1, #128	; 0x80
 800191a:	0549      	lsls	r1, r1, #21
 800191c:	430a      	orrs	r2, r1
 800191e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_MspInit+0x44>)
 8001922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	055b      	lsls	r3, r3, #21
 8001928:	4013      	ands	r3, r2
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	46bd      	mov	sp, r7
 8001932:	b002      	add	sp, #8
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	40021000 	.word	0x40021000

0800193c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b08b      	sub	sp, #44	; 0x2c
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	2414      	movs	r4, #20
 8001946:	193b      	adds	r3, r7, r4
 8001948:	0018      	movs	r0, r3
 800194a:	2314      	movs	r3, #20
 800194c:	001a      	movs	r2, r3
 800194e:	2100      	movs	r1, #0
 8001950:	f002 ff2e 	bl	80047b0 <memset>
  if(hspi->Instance==SPI2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a2c      	ldr	r2, [pc, #176]	; (8001a0c <HAL_SPI_MspInit+0xd0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d151      	bne.n	8001a02 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800195e:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <HAL_SPI_MspInit+0xd4>)
 8001960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001962:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <HAL_SPI_MspInit+0xd4>)
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	01c9      	lsls	r1, r1, #7
 8001968:	430a      	orrs	r2, r1
 800196a:	63da      	str	r2, [r3, #60]	; 0x3c
 800196c:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <HAL_SPI_MspInit+0xd4>)
 800196e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	01db      	lsls	r3, r3, #7
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_SPI_MspInit+0xd4>)
 800197c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_SPI_MspInit+0xd4>)
 8001980:	2104      	movs	r1, #4
 8001982:	430a      	orrs	r2, r1
 8001984:	635a      	str	r2, [r3, #52]	; 0x34
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_SPI_MspInit+0xd4>)
 8001988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198a:	2204      	movs	r2, #4
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <HAL_SPI_MspInit+0xd4>)
 8001994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_SPI_MspInit+0xd4>)
 8001998:	2102      	movs	r1, #2
 800199a:	430a      	orrs	r2, r1
 800199c:	635a      	str	r2, [r3, #52]	; 0x34
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <HAL_SPI_MspInit+0xd4>)
 80019a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a2:	2202      	movs	r2, #2
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019aa:	193b      	adds	r3, r7, r4
 80019ac:	2208      	movs	r2, #8
 80019ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	193b      	adds	r3, r7, r4
 80019b2:	2202      	movs	r2, #2
 80019b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	193b      	adds	r3, r7, r4
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	193b      	adds	r3, r7, r4
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80019c2:	193b      	adds	r3, r7, r4
 80019c4:	2201      	movs	r2, #1
 80019c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c8:	193b      	adds	r3, r7, r4
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <HAL_SPI_MspInit+0xd8>)
 80019cc:	0019      	movs	r1, r3
 80019ce:	0010      	movs	r0, r2
 80019d0:	f000 fa64 	bl	8001e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019d4:	0021      	movs	r1, r4
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	2280      	movs	r2, #128	; 0x80
 80019da:	00d2      	lsls	r2, r2, #3
 80019dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	187b      	adds	r3, r7, r1
 80019e0:	2202      	movs	r2, #2
 80019e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	187b      	adds	r3, r7, r1
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	187b      	adds	r3, r7, r1
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019f0:	187b      	adds	r3, r7, r1
 80019f2:	2205      	movs	r2, #5
 80019f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <HAL_SPI_MspInit+0xdc>)
 80019fa:	0019      	movs	r1, r3
 80019fc:	0010      	movs	r0, r2
 80019fe:	f000 fa4d 	bl	8001e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b00b      	add	sp, #44	; 0x2c
 8001a08:	bd90      	pop	{r4, r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	40003800 	.word	0x40003800
 8001a10:	40021000 	.word	0x40021000
 8001a14:	50000800 	.word	0x50000800
 8001a18:	50000400 	.word	0x50000400

08001a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <HAL_TIM_Base_MspInit+0x48>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d115      	bne.n	8001a5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_TIM_Base_MspInit+0x4c>)
 8001a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_TIM_Base_MspInit+0x4c>)
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	02c9      	lsls	r1, r1, #11
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_TIM_Base_MspInit+0x4c>)
 8001a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	02db      	lsls	r3, r3, #11
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2016      	movs	r0, #22
 8001a50:	f000 f9f2 	bl	8001e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001a54:	2016      	movs	r0, #22
 8001a56:	f000 fa04 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b004      	add	sp, #16
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	40014800 	.word	0x40014800
 8001a68:	40021000 	.word	0x40021000

08001a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b097      	sub	sp, #92	; 0x5c
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	2344      	movs	r3, #68	; 0x44
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	0018      	movs	r0, r3
 8001a7a:	2314      	movs	r3, #20
 8001a7c:	001a      	movs	r2, r3
 8001a7e:	2100      	movs	r1, #0
 8001a80:	f002 fe96 	bl	80047b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a84:	2410      	movs	r4, #16
 8001a86:	193b      	adds	r3, r7, r4
 8001a88:	0018      	movs	r0, r3
 8001a8a:	2334      	movs	r3, #52	; 0x34
 8001a8c:	001a      	movs	r2, r3
 8001a8e:	2100      	movs	r1, #0
 8001a90:	f002 fe8e 	bl	80047b0 <memset>
  if(huart->Instance==USART2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <HAL_UART_MspInit+0xb8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d13e      	bne.n	8001b1c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a9e:	193b      	adds	r3, r7, r4
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aa4:	193b      	adds	r3, r7, r4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	0018      	movs	r0, r3
 8001aae:	f001 f887 	bl	8002bc0 <HAL_RCCEx_PeriphCLKConfig>
 8001ab2:	1e03      	subs	r3, r0, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ab6:	f7ff fa19 	bl	8000eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_UART_MspInit+0xbc>)
 8001abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001abe:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <HAL_UART_MspInit+0xbc>)
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	0289      	lsls	r1, r1, #10
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ac8:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_UART_MspInit+0xbc>)
 8001aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	029b      	lsls	r3, r3, #10
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_UART_MspInit+0xbc>)
 8001ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <HAL_UART_MspInit+0xbc>)
 8001adc:	2101      	movs	r1, #1
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <HAL_UART_MspInit+0xbc>)
 8001ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001aee:	2144      	movs	r1, #68	; 0x44
 8001af0:	187b      	adds	r3, r7, r1
 8001af2:	220c      	movs	r2, #12
 8001af4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	187b      	adds	r3, r7, r1
 8001af8:	2202      	movs	r2, #2
 8001afa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	2201      	movs	r2, #1
 8001b00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	187a      	adds	r2, r7, r1
 8001b10:	23a0      	movs	r3, #160	; 0xa0
 8001b12:	05db      	lsls	r3, r3, #23
 8001b14:	0011      	movs	r1, r2
 8001b16:	0018      	movs	r0, r3
 8001b18:	f000 f9c0 	bl	8001e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b017      	add	sp, #92	; 0x5c
 8001b22:	bd90      	pop	{r4, r7, pc}
 8001b24:	40004400 	.word	0x40004400
 8001b28:	40021000 	.word	0x40021000

08001b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <NMI_Handler+0x4>

08001b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <HardFault_Handler+0x4>

08001b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b50:	f000 f8aa 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <TIM17_IRQHandler+0x14>)
 8001b62:	0018      	movs	r0, r3
 8001b64:	f001 fe1e 	bl	80037a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001b68:	46c0      	nop			; (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	20000090 	.word	0x20000090

08001b74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b84:	f7ff fff6 	bl	8001b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b88:	480c      	ldr	r0, [pc, #48]	; (8001bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001b8a:	490d      	ldr	r1, [pc, #52]	; (8001bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <LoopForever+0xe>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b90:	e002      	b.n	8001b98 <LoopCopyDataInit>

08001b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b96:	3304      	adds	r3, #4

08001b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b9c:	d3f9      	bcc.n	8001b92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ba0:	4c0a      	ldr	r4, [pc, #40]	; (8001bcc <LoopForever+0x16>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba4:	e001      	b.n	8001baa <LoopFillZerobss>

08001ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba8:	3204      	adds	r2, #4

08001baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bac:	d3fb      	bcc.n	8001ba6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bae:	f002 fddb 	bl	8004768 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001bb2:	f7fe ffd3 	bl	8000b5c <main>

08001bb6 <LoopForever>:

LoopForever:
  b LoopForever
 8001bb6:	e7fe      	b.n	8001bb6 <LoopForever>
  ldr   r0, =_estack
 8001bb8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001bc4:	08004890 	.word	0x08004890
  ldr r2, =_sbss
 8001bc8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001bcc:	200001f8 	.word	0x200001f8

08001bd0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC1_COMP_IRQHandler>
	...

08001bd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bda:	1dfb      	adds	r3, r7, #7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_Init+0x3c>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_Init+0x3c>)
 8001be6:	2180      	movs	r1, #128	; 0x80
 8001be8:	0049      	lsls	r1, r1, #1
 8001bea:	430a      	orrs	r2, r1
 8001bec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f000 f810 	bl	8001c14 <HAL_InitTick>
 8001bf4:	1e03      	subs	r3, r0, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001bf8:	1dfb      	adds	r3, r7, #7
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e001      	b.n	8001c04 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001c00:	f7ff fe78 	bl	80018f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c04:	1dfb      	adds	r3, r7, #7
 8001c06:	781b      	ldrb	r3, [r3, #0]
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c1c:	230f      	movs	r3, #15
 8001c1e:	18fb      	adds	r3, r7, r3
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001c24:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <HAL_InitTick+0x88>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d02b      	beq.n	8001c84 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <HAL_InitTick+0x8c>)
 8001c2e:	681c      	ldr	r4, [r3, #0]
 8001c30:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <HAL_InitTick+0x88>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	0019      	movs	r1, r3
 8001c36:	23fa      	movs	r3, #250	; 0xfa
 8001c38:	0098      	lsls	r0, r3, #2
 8001c3a:	f7fe fa63 	bl	8000104 <__udivsi3>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	0019      	movs	r1, r3
 8001c42:	0020      	movs	r0, r4
 8001c44:	f7fe fa5e 	bl	8000104 <__udivsi3>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f000 f919 	bl	8001e82 <HAL_SYSTICK_Config>
 8001c50:	1e03      	subs	r3, r0, #0
 8001c52:	d112      	bne.n	8001c7a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d80a      	bhi.n	8001c70 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	425b      	negs	r3, r3
 8001c60:	2200      	movs	r2, #0
 8001c62:	0018      	movs	r0, r3
 8001c64:	f000 f8e8 	bl	8001e38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c68:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <HAL_InitTick+0x90>)
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	e00d      	b.n	8001c8c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001c70:	230f      	movs	r3, #15
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e008      	b.n	8001c8c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c7a:	230f      	movs	r3, #15
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]
 8001c82:	e003      	b.n	8001c8c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c84:	230f      	movs	r3, #15
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001c8c:	230f      	movs	r3, #15
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	781b      	ldrb	r3, [r3, #0]
}
 8001c92:	0018      	movs	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b005      	add	sp, #20
 8001c98:	bd90      	pop	{r4, r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	2000000c 	.word	0x2000000c
 8001ca0:	20000004 	.word	0x20000004
 8001ca4:	20000008 	.word	0x20000008

08001ca8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x1c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	001a      	movs	r2, r3
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	18d2      	adds	r2, r2, r3
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cba:	601a      	str	r2, [r3, #0]
}
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	2000000c 	.word	0x2000000c
 8001cc8:	200001f4 	.word	0x200001f4

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <HAL_GetTick+0x10>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	200001f4 	.word	0x200001f4

08001ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	1dfb      	adds	r3, r7, #7
 8001cea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	1dfb      	adds	r3, r7, #7
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b7f      	cmp	r3, #127	; 0x7f
 8001cf2:	d809      	bhi.n	8001d08 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf4:	1dfb      	adds	r3, r7, #7
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	001a      	movs	r2, r3
 8001cfa:	231f      	movs	r3, #31
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <__NVIC_EnableIRQ+0x30>)
 8001d00:	2101      	movs	r1, #1
 8001d02:	4091      	lsls	r1, r2
 8001d04:	000a      	movs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	e000e100 	.word	0xe000e100

08001d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d22:	1dfb      	adds	r3, r7, #7
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b7f      	cmp	r3, #127	; 0x7f
 8001d28:	d828      	bhi.n	8001d7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d2a:	4a2f      	ldr	r2, [pc, #188]	; (8001de8 <__NVIC_SetPriority+0xd4>)
 8001d2c:	1dfb      	adds	r3, r7, #7
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b25b      	sxtb	r3, r3
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	33c0      	adds	r3, #192	; 0xc0
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	589b      	ldr	r3, [r3, r2]
 8001d3a:	1dfa      	adds	r2, r7, #7
 8001d3c:	7812      	ldrb	r2, [r2, #0]
 8001d3e:	0011      	movs	r1, r2
 8001d40:	2203      	movs	r2, #3
 8001d42:	400a      	ands	r2, r1
 8001d44:	00d2      	lsls	r2, r2, #3
 8001d46:	21ff      	movs	r1, #255	; 0xff
 8001d48:	4091      	lsls	r1, r2
 8001d4a:	000a      	movs	r2, r1
 8001d4c:	43d2      	mvns	r2, r2
 8001d4e:	401a      	ands	r2, r3
 8001d50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	22ff      	movs	r2, #255	; 0xff
 8001d58:	401a      	ands	r2, r3
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	0018      	movs	r0, r3
 8001d60:	2303      	movs	r3, #3
 8001d62:	4003      	ands	r3, r0
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d68:	481f      	ldr	r0, [pc, #124]	; (8001de8 <__NVIC_SetPriority+0xd4>)
 8001d6a:	1dfb      	adds	r3, r7, #7
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b25b      	sxtb	r3, r3
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	430a      	orrs	r2, r1
 8001d74:	33c0      	adds	r3, #192	; 0xc0
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d7a:	e031      	b.n	8001de0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d7c:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <__NVIC_SetPriority+0xd8>)
 8001d7e:	1dfb      	adds	r3, r7, #7
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	0019      	movs	r1, r3
 8001d84:	230f      	movs	r3, #15
 8001d86:	400b      	ands	r3, r1
 8001d88:	3b08      	subs	r3, #8
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3306      	adds	r3, #6
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	18d3      	adds	r3, r2, r3
 8001d92:	3304      	adds	r3, #4
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	1dfa      	adds	r2, r7, #7
 8001d98:	7812      	ldrb	r2, [r2, #0]
 8001d9a:	0011      	movs	r1, r2
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	400a      	ands	r2, r1
 8001da0:	00d2      	lsls	r2, r2, #3
 8001da2:	21ff      	movs	r1, #255	; 0xff
 8001da4:	4091      	lsls	r1, r2
 8001da6:	000a      	movs	r2, r1
 8001da8:	43d2      	mvns	r2, r2
 8001daa:	401a      	ands	r2, r3
 8001dac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	22ff      	movs	r2, #255	; 0xff
 8001db4:	401a      	ands	r2, r3
 8001db6:	1dfb      	adds	r3, r7, #7
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	0018      	movs	r0, r3
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	4003      	ands	r3, r0
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dc4:	4809      	ldr	r0, [pc, #36]	; (8001dec <__NVIC_SetPriority+0xd8>)
 8001dc6:	1dfb      	adds	r3, r7, #7
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	001c      	movs	r4, r3
 8001dcc:	230f      	movs	r3, #15
 8001dce:	4023      	ands	r3, r4
 8001dd0:	3b08      	subs	r3, #8
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	3306      	adds	r3, #6
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	18c3      	adds	r3, r0, r3
 8001ddc:	3304      	adds	r3, #4
 8001dde:	601a      	str	r2, [r3, #0]
}
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b003      	add	sp, #12
 8001de6:	bd90      	pop	{r4, r7, pc}
 8001de8:	e000e100 	.word	0xe000e100
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	1e5a      	subs	r2, r3, #1
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	045b      	lsls	r3, r3, #17
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d301      	bcc.n	8001e08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e04:	2301      	movs	r3, #1
 8001e06:	e010      	b.n	8001e2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <SysTick_Config+0x44>)
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	3a01      	subs	r2, #1
 8001e0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e10:	2301      	movs	r3, #1
 8001e12:	425b      	negs	r3, r3
 8001e14:	2103      	movs	r1, #3
 8001e16:	0018      	movs	r0, r3
 8001e18:	f7ff ff7c 	bl	8001d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <SysTick_Config+0x44>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SysTick_Config+0x44>)
 8001e24:	2207      	movs	r2, #7
 8001e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b002      	add	sp, #8
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	210f      	movs	r1, #15
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	1c02      	adds	r2, r0, #0
 8001e48:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b25b      	sxtb	r3, r3
 8001e52:	0011      	movs	r1, r2
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7ff ff5d 	bl	8001d14 <__NVIC_SetPriority>
}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b004      	add	sp, #16
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	0002      	movs	r2, r0
 8001e6a:	1dfb      	adds	r3, r7, #7
 8001e6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6e:	1dfb      	adds	r3, r7, #7
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	b25b      	sxtb	r3, r3
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7ff ff33 	bl	8001ce0 <__NVIC_EnableIRQ>
}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b002      	add	sp, #8
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f7ff ffaf 	bl	8001df0 <SysTick_Config>
 8001e92:	0003      	movs	r3, r0
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b002      	add	sp, #8
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eaa:	e147      	b.n	800213c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4091      	lsls	r1, r2
 8001eb6:	000a      	movs	r2, r1
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d100      	bne.n	8001ec4 <HAL_GPIO_Init+0x28>
 8001ec2:	e138      	b.n	8002136 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2203      	movs	r2, #3
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d005      	beq.n	8001edc <HAL_GPIO_Init+0x40>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d130      	bne.n	8001f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	0013      	movs	r3, r2
 8001eec:	43da      	mvns	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	409a      	lsls	r2, r3
 8001efe:	0013      	movs	r3, r2
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f12:	2201      	movs	r2, #1
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	409a      	lsls	r2, r3
 8001f18:	0013      	movs	r3, r2
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	2201      	movs	r2, #1
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	0013      	movs	r3, r2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2203      	movs	r2, #3
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d017      	beq.n	8001f7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	2203      	movs	r2, #3
 8001f56:	409a      	lsls	r2, r3
 8001f58:	0013      	movs	r3, r2
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	0013      	movs	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2203      	movs	r2, #3
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d123      	bne.n	8001fce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	08da      	lsrs	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3208      	adds	r2, #8
 8001f8e:	0092      	lsls	r2, r2, #2
 8001f90:	58d3      	ldr	r3, [r2, r3]
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2207      	movs	r2, #7
 8001f98:	4013      	ands	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	220f      	movs	r2, #15
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	0013      	movs	r3, r2
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	691a      	ldr	r2, [r3, #16]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2107      	movs	r1, #7
 8001fb2:	400b      	ands	r3, r1
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	0013      	movs	r3, r2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	08da      	lsrs	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3208      	adds	r2, #8
 8001fc8:	0092      	lsls	r2, r2, #2
 8001fca:	6939      	ldr	r1, [r7, #16]
 8001fcc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	2203      	movs	r2, #3
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	0013      	movs	r3, r2
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2203      	movs	r2, #3
 8001fec:	401a      	ands	r2, r3
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	0013      	movs	r3, r2
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	23c0      	movs	r3, #192	; 0xc0
 8002008:	029b      	lsls	r3, r3, #10
 800200a:	4013      	ands	r3, r2
 800200c:	d100      	bne.n	8002010 <HAL_GPIO_Init+0x174>
 800200e:	e092      	b.n	8002136 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002010:	4a50      	ldr	r2, [pc, #320]	; (8002154 <HAL_GPIO_Init+0x2b8>)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	3318      	adds	r3, #24
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	589b      	ldr	r3, [r3, r2]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2203      	movs	r2, #3
 8002022:	4013      	ands	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	220f      	movs	r2, #15
 8002028:	409a      	lsls	r2, r3
 800202a:	0013      	movs	r3, r2
 800202c:	43da      	mvns	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	23a0      	movs	r3, #160	; 0xa0
 8002038:	05db      	lsls	r3, r3, #23
 800203a:	429a      	cmp	r2, r3
 800203c:	d013      	beq.n	8002066 <HAL_GPIO_Init+0x1ca>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a45      	ldr	r2, [pc, #276]	; (8002158 <HAL_GPIO_Init+0x2bc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00d      	beq.n	8002062 <HAL_GPIO_Init+0x1c6>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a44      	ldr	r2, [pc, #272]	; (800215c <HAL_GPIO_Init+0x2c0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d007      	beq.n	800205e <HAL_GPIO_Init+0x1c2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a43      	ldr	r2, [pc, #268]	; (8002160 <HAL_GPIO_Init+0x2c4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d101      	bne.n	800205a <HAL_GPIO_Init+0x1be>
 8002056:	2303      	movs	r3, #3
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x1cc>
 800205a:	2305      	movs	r3, #5
 800205c:	e004      	b.n	8002068 <HAL_GPIO_Init+0x1cc>
 800205e:	2302      	movs	r3, #2
 8002060:	e002      	b.n	8002068 <HAL_GPIO_Init+0x1cc>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_GPIO_Init+0x1cc>
 8002066:	2300      	movs	r3, #0
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	2103      	movs	r1, #3
 800206c:	400a      	ands	r2, r1
 800206e:	00d2      	lsls	r2, r2, #3
 8002070:	4093      	lsls	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002078:	4936      	ldr	r1, [pc, #216]	; (8002154 <HAL_GPIO_Init+0x2b8>)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	3318      	adds	r3, #24
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002086:	4b33      	ldr	r3, [pc, #204]	; (8002154 <HAL_GPIO_Init+0x2b8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	43da      	mvns	r2, r3
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	035b      	lsls	r3, r3, #13
 800209e:	4013      	ands	r3, r2
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020aa:	4b2a      	ldr	r3, [pc, #168]	; (8002154 <HAL_GPIO_Init+0x2b8>)
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80020b0:	4b28      	ldr	r3, [pc, #160]	; (8002154 <HAL_GPIO_Init+0x2b8>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	43da      	mvns	r2, r3
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	039b      	lsls	r3, r3, #14
 80020c8:	4013      	ands	r3, r2
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020d4:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <HAL_GPIO_Init+0x2b8>)
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020da:	4a1e      	ldr	r2, [pc, #120]	; (8002154 <HAL_GPIO_Init+0x2b8>)
 80020dc:	2384      	movs	r3, #132	; 0x84
 80020de:	58d3      	ldr	r3, [r2, r3]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43da      	mvns	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	029b      	lsls	r3, r3, #10
 80020f4:	4013      	ands	r3, r2
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002100:	4914      	ldr	r1, [pc, #80]	; (8002154 <HAL_GPIO_Init+0x2b8>)
 8002102:	2284      	movs	r2, #132	; 0x84
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002108:	4a12      	ldr	r2, [pc, #72]	; (8002154 <HAL_GPIO_Init+0x2b8>)
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	58d3      	ldr	r3, [r2, r3]
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	43da      	mvns	r2, r3
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	025b      	lsls	r3, r3, #9
 8002122:	4013      	ands	r3, r2
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800212e:	4909      	ldr	r1, [pc, #36]	; (8002154 <HAL_GPIO_Init+0x2b8>)
 8002130:	2280      	movs	r2, #128	; 0x80
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	40da      	lsrs	r2, r3
 8002144:	1e13      	subs	r3, r2, #0
 8002146:	d000      	beq.n	800214a <HAL_GPIO_Init+0x2ae>
 8002148:	e6b0      	b.n	8001eac <HAL_GPIO_Init+0x10>
  }
}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	b006      	add	sp, #24
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021800 	.word	0x40021800
 8002158:	50000400 	.word	0x50000400
 800215c:	50000800 	.word	0x50000800
 8002160:	50000c00 	.word	0x50000c00

08002164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	0008      	movs	r0, r1
 800216e:	0011      	movs	r1, r2
 8002170:	1cbb      	adds	r3, r7, #2
 8002172:	1c02      	adds	r2, r0, #0
 8002174:	801a      	strh	r2, [r3, #0]
 8002176:	1c7b      	adds	r3, r7, #1
 8002178:	1c0a      	adds	r2, r1, #0
 800217a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800217c:	1c7b      	adds	r3, r7, #1
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d004      	beq.n	800218e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002184:	1cbb      	adds	r3, r7, #2
 8002186:	881a      	ldrh	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800218c:	e003      	b.n	8002196 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800218e:	1cbb      	adds	r3, r7, #2
 8002190:	881a      	ldrh	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	46bd      	mov	sp, r7
 800219a:	b002      	add	sp, #8
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a19      	ldr	r2, [pc, #100]	; (8002214 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	4b17      	ldr	r3, [pc, #92]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d11f      	bne.n	8002204 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	0013      	movs	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	189b      	adds	r3, r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4912      	ldr	r1, [pc, #72]	; (800221c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7fd ff96 	bl	8000104 <__udivsi3>
 80021d8:	0003      	movs	r3, r0
 80021da:	3301      	adds	r3, #1
 80021dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021de:	e008      	b.n	80021f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e001      	b.n	80021f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e009      	b.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	401a      	ands	r2, r3
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	429a      	cmp	r2, r3
 8002202:	d0ed      	beq.n	80021e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	b004      	add	sp, #16
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	40007000 	.word	0x40007000
 8002214:	fffff9ff 	.word	0xfffff9ff
 8002218:	20000004 	.word	0x20000004
 800221c:	000f4240 	.word	0x000f4240

08002220 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	23e0      	movs	r3, #224	; 0xe0
 800222a:	01db      	lsls	r3, r3, #7
 800222c:	4013      	ands	r3, r2
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000

08002238 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e2fe      	b.n	8002848 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2201      	movs	r2, #1
 8002250:	4013      	ands	r3, r2
 8002252:	d100      	bne.n	8002256 <HAL_RCC_OscConfig+0x1e>
 8002254:	e07c      	b.n	8002350 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002256:	4bc3      	ldr	r3, [pc, #780]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2238      	movs	r2, #56	; 0x38
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002260:	4bc0      	ldr	r3, [pc, #768]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2203      	movs	r2, #3
 8002266:	4013      	ands	r3, r2
 8002268:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2b10      	cmp	r3, #16
 800226e:	d102      	bne.n	8002276 <HAL_RCC_OscConfig+0x3e>
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d002      	beq.n	800227c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2b08      	cmp	r3, #8
 800227a:	d10b      	bne.n	8002294 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	4bb9      	ldr	r3, [pc, #740]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	029b      	lsls	r3, r3, #10
 8002284:	4013      	ands	r3, r2
 8002286:	d062      	beq.n	800234e <HAL_RCC_OscConfig+0x116>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d15e      	bne.n	800234e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e2d9      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	025b      	lsls	r3, r3, #9
 800229c:	429a      	cmp	r2, r3
 800229e:	d107      	bne.n	80022b0 <HAL_RCC_OscConfig+0x78>
 80022a0:	4bb0      	ldr	r3, [pc, #704]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4baf      	ldr	r3, [pc, #700]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022a6:	2180      	movs	r1, #128	; 0x80
 80022a8:	0249      	lsls	r1, r1, #9
 80022aa:	430a      	orrs	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	e020      	b.n	80022f2 <HAL_RCC_OscConfig+0xba>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	23a0      	movs	r3, #160	; 0xa0
 80022b6:	02db      	lsls	r3, r3, #11
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d10e      	bne.n	80022da <HAL_RCC_OscConfig+0xa2>
 80022bc:	4ba9      	ldr	r3, [pc, #676]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4ba8      	ldr	r3, [pc, #672]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022c2:	2180      	movs	r1, #128	; 0x80
 80022c4:	02c9      	lsls	r1, r1, #11
 80022c6:	430a      	orrs	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	4ba6      	ldr	r3, [pc, #664]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4ba5      	ldr	r3, [pc, #660]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022d0:	2180      	movs	r1, #128	; 0x80
 80022d2:	0249      	lsls	r1, r1, #9
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	e00b      	b.n	80022f2 <HAL_RCC_OscConfig+0xba>
 80022da:	4ba2      	ldr	r3, [pc, #648]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4ba1      	ldr	r3, [pc, #644]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022e0:	49a1      	ldr	r1, [pc, #644]	; (8002568 <HAL_RCC_OscConfig+0x330>)
 80022e2:	400a      	ands	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	4b9f      	ldr	r3, [pc, #636]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b9e      	ldr	r3, [pc, #632]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80022ec:	499f      	ldr	r1, [pc, #636]	; (800256c <HAL_RCC_OscConfig+0x334>)
 80022ee:	400a      	ands	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d014      	beq.n	8002324 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7ff fce7 	bl	8001ccc <HAL_GetTick>
 80022fe:	0003      	movs	r3, r0
 8002300:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fce2 	bl	8001ccc <HAL_GetTick>
 8002308:	0002      	movs	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e298      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002316:	4b93      	ldr	r3, [pc, #588]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	029b      	lsls	r3, r3, #10
 800231e:	4013      	ands	r3, r2
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0xcc>
 8002322:	e015      	b.n	8002350 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7ff fcd2 	bl	8001ccc <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232e:	f7ff fccd 	bl	8001ccc <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b64      	cmp	r3, #100	; 0x64
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e283      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002340:	4b88      	ldr	r3, [pc, #544]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	029b      	lsls	r3, r3, #10
 8002348:	4013      	ands	r3, r2
 800234a:	d1f0      	bne.n	800232e <HAL_RCC_OscConfig+0xf6>
 800234c:	e000      	b.n	8002350 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2202      	movs	r2, #2
 8002356:	4013      	ands	r3, r2
 8002358:	d100      	bne.n	800235c <HAL_RCC_OscConfig+0x124>
 800235a:	e099      	b.n	8002490 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235c:	4b81      	ldr	r3, [pc, #516]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2238      	movs	r2, #56	; 0x38
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002366:	4b7f      	ldr	r3, [pc, #508]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2203      	movs	r2, #3
 800236c:	4013      	ands	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2b10      	cmp	r3, #16
 8002374:	d102      	bne.n	800237c <HAL_RCC_OscConfig+0x144>
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d002      	beq.n	8002382 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d135      	bne.n	80023ee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002382:	4b78      	ldr	r3, [pc, #480]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4013      	ands	r3, r2
 800238c:	d005      	beq.n	800239a <HAL_RCC_OscConfig+0x162>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e256      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239a:	4b72      	ldr	r3, [pc, #456]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4a74      	ldr	r2, [pc, #464]	; (8002570 <HAL_RCC_OscConfig+0x338>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	0019      	movs	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	021a      	lsls	r2, r3, #8
 80023aa:	4b6e      	ldr	r3, [pc, #440]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80023ac:	430a      	orrs	r2, r1
 80023ae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d112      	bne.n	80023dc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023b6:	4b6b      	ldr	r3, [pc, #428]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a6e      	ldr	r2, [pc, #440]	; (8002574 <HAL_RCC_OscConfig+0x33c>)
 80023bc:	4013      	ands	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	4b67      	ldr	r3, [pc, #412]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80023ca:	4b66      	ldr	r3, [pc, #408]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	0adb      	lsrs	r3, r3, #11
 80023d0:	2207      	movs	r2, #7
 80023d2:	4013      	ands	r3, r2
 80023d4:	4a68      	ldr	r2, [pc, #416]	; (8002578 <HAL_RCC_OscConfig+0x340>)
 80023d6:	40da      	lsrs	r2, r3
 80023d8:	4b68      	ldr	r3, [pc, #416]	; (800257c <HAL_RCC_OscConfig+0x344>)
 80023da:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023dc:	4b68      	ldr	r3, [pc, #416]	; (8002580 <HAL_RCC_OscConfig+0x348>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7ff fc17 	bl	8001c14 <HAL_InitTick>
 80023e6:	1e03      	subs	r3, r0, #0
 80023e8:	d051      	beq.n	800248e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e22c      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d030      	beq.n	8002458 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023f6:	4b5b      	ldr	r3, [pc, #364]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a5e      	ldr	r2, [pc, #376]	; (8002574 <HAL_RCC_OscConfig+0x33c>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	4b57      	ldr	r3, [pc, #348]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002406:	430a      	orrs	r2, r1
 8002408:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800240a:	4b56      	ldr	r3, [pc, #344]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b55      	ldr	r3, [pc, #340]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	0049      	lsls	r1, r1, #1
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7ff fc58 	bl	8001ccc <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002422:	f7ff fc53 	bl	8001ccc <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e209      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002434:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4013      	ands	r3, r2
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b48      	ldr	r3, [pc, #288]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a4a      	ldr	r2, [pc, #296]	; (8002570 <HAL_RCC_OscConfig+0x338>)
 8002446:	4013      	ands	r3, r2
 8002448:	0019      	movs	r1, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	021a      	lsls	r2, r3, #8
 8002450:	4b44      	ldr	r3, [pc, #272]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	e01b      	b.n	8002490 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002458:	4b42      	ldr	r3, [pc, #264]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b41      	ldr	r3, [pc, #260]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 800245e:	4949      	ldr	r1, [pc, #292]	; (8002584 <HAL_RCC_OscConfig+0x34c>)
 8002460:	400a      	ands	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7ff fc32 	bl	8001ccc <HAL_GetTick>
 8002468:	0003      	movs	r3, r0
 800246a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246e:	f7ff fc2d 	bl	8001ccc <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e1e3      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002480:	4b38      	ldr	r3, [pc, #224]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4013      	ands	r3, r2
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0x236>
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800248e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2208      	movs	r2, #8
 8002496:	4013      	ands	r3, r2
 8002498:	d047      	beq.n	800252a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800249a:	4b32      	ldr	r3, [pc, #200]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2238      	movs	r2, #56	; 0x38
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b18      	cmp	r3, #24
 80024a4:	d10a      	bne.n	80024bc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80024a6:	4b2f      	ldr	r3, [pc, #188]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80024a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024aa:	2202      	movs	r2, #2
 80024ac:	4013      	ands	r3, r2
 80024ae:	d03c      	beq.n	800252a <HAL_RCC_OscConfig+0x2f2>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d138      	bne.n	800252a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e1c5      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d019      	beq.n	80024f8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80024c4:	4b27      	ldr	r3, [pc, #156]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80024c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024c8:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80024ca:	2101      	movs	r1, #1
 80024cc:	430a      	orrs	r2, r1
 80024ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff fbfc 	bl	8001ccc <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024da:	f7ff fbf7 	bl	8001ccc <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e1ad      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ec:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80024ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f0:	2202      	movs	r2, #2
 80024f2:	4013      	ands	r3, r2
 80024f4:	d0f1      	beq.n	80024da <HAL_RCC_OscConfig+0x2a2>
 80024f6:	e018      	b.n	800252a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80024f8:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80024fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024fc:	4b19      	ldr	r3, [pc, #100]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 80024fe:	2101      	movs	r1, #1
 8002500:	438a      	bics	r2, r1
 8002502:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7ff fbe2 	bl	8001ccc <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250e:	f7ff fbdd 	bl	8001ccc <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e193      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002524:	2202      	movs	r2, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d1f1      	bne.n	800250e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2204      	movs	r2, #4
 8002530:	4013      	ands	r3, r2
 8002532:	d100      	bne.n	8002536 <HAL_RCC_OscConfig+0x2fe>
 8002534:	e0c6      	b.n	80026c4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002536:	231f      	movs	r3, #31
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2238      	movs	r2, #56	; 0x38
 8002544:	4013      	ands	r3, r2
 8002546:	2b20      	cmp	r3, #32
 8002548:	d11e      	bne.n	8002588 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_RCC_OscConfig+0x32c>)
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	2202      	movs	r2, #2
 8002550:	4013      	ands	r3, r2
 8002552:	d100      	bne.n	8002556 <HAL_RCC_OscConfig+0x31e>
 8002554:	e0b6      	b.n	80026c4 <HAL_RCC_OscConfig+0x48c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d000      	beq.n	8002560 <HAL_RCC_OscConfig+0x328>
 800255e:	e0b1      	b.n	80026c4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e171      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
 8002564:	40021000 	.word	0x40021000
 8002568:	fffeffff 	.word	0xfffeffff
 800256c:	fffbffff 	.word	0xfffbffff
 8002570:	ffff80ff 	.word	0xffff80ff
 8002574:	ffffc7ff 	.word	0xffffc7ff
 8002578:	00f42400 	.word	0x00f42400
 800257c:	20000004 	.word	0x20000004
 8002580:	20000008 	.word	0x20000008
 8002584:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002588:	4bb1      	ldr	r3, [pc, #708]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 800258a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	055b      	lsls	r3, r3, #21
 8002590:	4013      	ands	r3, r2
 8002592:	d101      	bne.n	8002598 <HAL_RCC_OscConfig+0x360>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x362>
 8002598:	2300      	movs	r3, #0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d011      	beq.n	80025c2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	4bac      	ldr	r3, [pc, #688]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 80025a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025a2:	4bab      	ldr	r3, [pc, #684]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	0549      	lsls	r1, r1, #21
 80025a8:	430a      	orrs	r2, r1
 80025aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80025ac:	4ba8      	ldr	r3, [pc, #672]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 80025ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	055b      	lsls	r3, r3, #21
 80025b4:	4013      	ands	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80025ba:	231f      	movs	r3, #31
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c2:	4ba4      	ldr	r3, [pc, #656]	; (8002854 <HAL_RCC_OscConfig+0x61c>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4013      	ands	r3, r2
 80025cc:	d11a      	bne.n	8002604 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025ce:	4ba1      	ldr	r3, [pc, #644]	; (8002854 <HAL_RCC_OscConfig+0x61c>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4ba0      	ldr	r3, [pc, #640]	; (8002854 <HAL_RCC_OscConfig+0x61c>)
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	0049      	lsls	r1, r1, #1
 80025d8:	430a      	orrs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80025dc:	f7ff fb76 	bl	8001ccc <HAL_GetTick>
 80025e0:	0003      	movs	r3, r0
 80025e2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7ff fb71 	bl	8001ccc <HAL_GetTick>
 80025ea:	0002      	movs	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e127      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f8:	4b96      	ldr	r3, [pc, #600]	; (8002854 <HAL_RCC_OscConfig+0x61c>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4013      	ands	r3, r2
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x3e2>
 800260c:	4b90      	ldr	r3, [pc, #576]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 800260e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002610:	4b8f      	ldr	r3, [pc, #572]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 8002612:	2101      	movs	r1, #1
 8002614:	430a      	orrs	r2, r1
 8002616:	65da      	str	r2, [r3, #92]	; 0x5c
 8002618:	e01c      	b.n	8002654 <HAL_RCC_OscConfig+0x41c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b05      	cmp	r3, #5
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x404>
 8002622:	4b8b      	ldr	r3, [pc, #556]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 8002624:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002626:	4b8a      	ldr	r3, [pc, #552]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 8002628:	2104      	movs	r1, #4
 800262a:	430a      	orrs	r2, r1
 800262c:	65da      	str	r2, [r3, #92]	; 0x5c
 800262e:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 8002630:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002632:	4b87      	ldr	r3, [pc, #540]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 8002634:	2101      	movs	r1, #1
 8002636:	430a      	orrs	r2, r1
 8002638:	65da      	str	r2, [r3, #92]	; 0x5c
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0x41c>
 800263c:	4b84      	ldr	r3, [pc, #528]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 800263e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002640:	4b83      	ldr	r3, [pc, #524]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 8002642:	2101      	movs	r1, #1
 8002644:	438a      	bics	r2, r1
 8002646:	65da      	str	r2, [r3, #92]	; 0x5c
 8002648:	4b81      	ldr	r3, [pc, #516]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 800264a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800264c:	4b80      	ldr	r3, [pc, #512]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 800264e:	2104      	movs	r1, #4
 8002650:	438a      	bics	r2, r1
 8002652:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d014      	beq.n	8002686 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7ff fb36 	bl	8001ccc <HAL_GetTick>
 8002660:	0003      	movs	r3, r0
 8002662:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002664:	e009      	b.n	800267a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7ff fb31 	bl	8001ccc <HAL_GetTick>
 800266a:	0002      	movs	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	4a79      	ldr	r2, [pc, #484]	; (8002858 <HAL_RCC_OscConfig+0x620>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e0e6      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800267a:	4b75      	ldr	r3, [pc, #468]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 800267c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267e:	2202      	movs	r2, #2
 8002680:	4013      	ands	r3, r2
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x42e>
 8002684:	e013      	b.n	80026ae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7ff fb21 	bl	8001ccc <HAL_GetTick>
 800268a:	0003      	movs	r3, r0
 800268c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800268e:	e009      	b.n	80026a4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002690:	f7ff fb1c 	bl	8001ccc <HAL_GetTick>
 8002694:	0002      	movs	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	4a6f      	ldr	r2, [pc, #444]	; (8002858 <HAL_RCC_OscConfig+0x620>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0d1      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026a4:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	2202      	movs	r2, #2
 80026aa:	4013      	ands	r3, r2
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026ae:	231f      	movs	r3, #31
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d105      	bne.n	80026c4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80026b8:	4b65      	ldr	r3, [pc, #404]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 80026ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026bc:	4b64      	ldr	r3, [pc, #400]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 80026be:	4967      	ldr	r1, [pc, #412]	; (800285c <HAL_RCC_OscConfig+0x624>)
 80026c0:	400a      	ands	r2, r1
 80026c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d100      	bne.n	80026ce <HAL_RCC_OscConfig+0x496>
 80026cc:	e0bb      	b.n	8002846 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ce:	4b60      	ldr	r3, [pc, #384]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2238      	movs	r2, #56	; 0x38
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d100      	bne.n	80026dc <HAL_RCC_OscConfig+0x4a4>
 80026da:	e07b      	b.n	80027d4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d156      	bne.n	8002792 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e4:	4b5a      	ldr	r3, [pc, #360]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b59      	ldr	r3, [pc, #356]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 80026ea:	495d      	ldr	r1, [pc, #372]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 80026ec:	400a      	ands	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7ff faec 	bl	8001ccc <HAL_GetTick>
 80026f4:	0003      	movs	r3, r0
 80026f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fa:	f7ff fae7 	bl	8001ccc <HAL_GetTick>
 80026fe:	0002      	movs	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e09d      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270c:	4b50      	ldr	r3, [pc, #320]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	049b      	lsls	r3, r3, #18
 8002714:	4013      	ands	r3, r2
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002718:	4b4d      	ldr	r3, [pc, #308]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a51      	ldr	r2, [pc, #324]	; (8002864 <HAL_RCC_OscConfig+0x62c>)
 800271e:	4013      	ands	r3, r2
 8002720:	0019      	movs	r1, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1a      	ldr	r2, [r3, #32]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002744:	431a      	orrs	r2, r3
 8002746:	4b42      	ldr	r3, [pc, #264]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 8002748:	430a      	orrs	r2, r1
 800274a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800274c:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b3f      	ldr	r3, [pc, #252]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 8002752:	2180      	movs	r1, #128	; 0x80
 8002754:	0449      	lsls	r1, r1, #17
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800275a:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	4b3c      	ldr	r3, [pc, #240]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 8002760:	2180      	movs	r1, #128	; 0x80
 8002762:	0549      	lsls	r1, r1, #21
 8002764:	430a      	orrs	r2, r1
 8002766:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7ff fab0 	bl	8001ccc <HAL_GetTick>
 800276c:	0003      	movs	r3, r0
 800276e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002772:	f7ff faab 	bl	8001ccc <HAL_GetTick>
 8002776:	0002      	movs	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e061      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002784:	4b32      	ldr	r3, [pc, #200]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	049b      	lsls	r3, r3, #18
 800278c:	4013      	ands	r3, r2
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x53a>
 8002790:	e059      	b.n	8002846 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 8002798:	4931      	ldr	r1, [pc, #196]	; (8002860 <HAL_RCC_OscConfig+0x628>)
 800279a:	400a      	ands	r2, r1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7ff fa95 	bl	8001ccc <HAL_GetTick>
 80027a2:	0003      	movs	r3, r0
 80027a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7ff fa90 	bl	8001ccc <HAL_GetTick>
 80027ac:	0002      	movs	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e046      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ba:	4b25      	ldr	r3, [pc, #148]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	049b      	lsls	r3, r3, #18
 80027c2:	4013      	ands	r3, r2
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80027c6:	4b22      	ldr	r3, [pc, #136]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	4b21      	ldr	r3, [pc, #132]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 80027cc:	4926      	ldr	r1, [pc, #152]	; (8002868 <HAL_RCC_OscConfig+0x630>)
 80027ce:	400a      	ands	r2, r1
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	e038      	b.n	8002846 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e033      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80027e0:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <HAL_RCC_OscConfig+0x618>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2203      	movs	r2, #3
 80027ea:	401a      	ands	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d126      	bne.n	8002842 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2270      	movs	r2, #112	; 0x70
 80027f8:	401a      	ands	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	429a      	cmp	r2, r3
 8002800:	d11f      	bne.n	8002842 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	23fe      	movs	r3, #254	; 0xfe
 8002806:	01db      	lsls	r3, r3, #7
 8002808:	401a      	ands	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d116      	bne.n	8002842 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	23f8      	movs	r3, #248	; 0xf8
 8002818:	039b      	lsls	r3, r3, #14
 800281a:	401a      	ands	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d10e      	bne.n	8002842 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	23e0      	movs	r3, #224	; 0xe0
 8002828:	051b      	lsls	r3, r3, #20
 800282a:	401a      	ands	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	0f5b      	lsrs	r3, r3, #29
 8002838:	075a      	lsls	r2, r3, #29
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b008      	add	sp, #32
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
 8002858:	00001388 	.word	0x00001388
 800285c:	efffffff 	.word	0xefffffff
 8002860:	feffffff 	.word	0xfeffffff
 8002864:	11c1808c 	.word	0x11c1808c
 8002868:	eefefffc 	.word	0xeefefffc

0800286c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0e9      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002880:	4b76      	ldr	r3, [pc, #472]	; (8002a5c <HAL_RCC_ClockConfig+0x1f0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2207      	movs	r2, #7
 8002886:	4013      	ands	r3, r2
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d91e      	bls.n	80028cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b73      	ldr	r3, [pc, #460]	; (8002a5c <HAL_RCC_ClockConfig+0x1f0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2207      	movs	r2, #7
 8002894:	4393      	bics	r3, r2
 8002896:	0019      	movs	r1, r3
 8002898:	4b70      	ldr	r3, [pc, #448]	; (8002a5c <HAL_RCC_ClockConfig+0x1f0>)
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028a0:	f7ff fa14 	bl	8001ccc <HAL_GetTick>
 80028a4:	0003      	movs	r3, r0
 80028a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028a8:	e009      	b.n	80028be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028aa:	f7ff fa0f 	bl	8001ccc <HAL_GetTick>
 80028ae:	0002      	movs	r2, r0
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	4a6a      	ldr	r2, [pc, #424]	; (8002a60 <HAL_RCC_ClockConfig+0x1f4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e0ca      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028be:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <HAL_RCC_ClockConfig+0x1f0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2207      	movs	r2, #7
 80028c4:	4013      	ands	r3, r2
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1ee      	bne.n	80028aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2202      	movs	r2, #2
 80028d2:	4013      	ands	r3, r2
 80028d4:	d015      	beq.n	8002902 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2204      	movs	r2, #4
 80028dc:	4013      	ands	r3, r2
 80028de:	d006      	beq.n	80028ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80028e0:	4b60      	ldr	r3, [pc, #384]	; (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	4b5f      	ldr	r3, [pc, #380]	; (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 80028e6:	21e0      	movs	r1, #224	; 0xe0
 80028e8:	01c9      	lsls	r1, r1, #7
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ee:	4b5d      	ldr	r3, [pc, #372]	; (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4a5d      	ldr	r2, [pc, #372]	; (8002a68 <HAL_RCC_ClockConfig+0x1fc>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	0019      	movs	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	4b59      	ldr	r3, [pc, #356]	; (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 80028fe:	430a      	orrs	r2, r1
 8002900:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2201      	movs	r2, #1
 8002908:	4013      	ands	r3, r2
 800290a:	d057      	beq.n	80029bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d107      	bne.n	8002924 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002914:	4b53      	ldr	r3, [pc, #332]	; (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2380      	movs	r3, #128	; 0x80
 800291a:	029b      	lsls	r3, r3, #10
 800291c:	4013      	ands	r3, r2
 800291e:	d12b      	bne.n	8002978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e097      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d107      	bne.n	800293c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292c:	4b4d      	ldr	r3, [pc, #308]	; (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	049b      	lsls	r3, r3, #18
 8002934:	4013      	ands	r3, r2
 8002936:	d11f      	bne.n	8002978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e08b      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d107      	bne.n	8002954 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002944:	4b47      	ldr	r3, [pc, #284]	; (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4013      	ands	r3, r2
 800294e:	d113      	bne.n	8002978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e07f      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d106      	bne.n	800296a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800295c:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 800295e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002960:	2202      	movs	r2, #2
 8002962:	4013      	ands	r3, r2
 8002964:	d108      	bne.n	8002978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e074      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296a:	4b3e      	ldr	r3, [pc, #248]	; (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 800296c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296e:	2202      	movs	r2, #2
 8002970:	4013      	ands	r3, r2
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e06d      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002978:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2207      	movs	r2, #7
 800297e:	4393      	bics	r3, r2
 8002980:	0019      	movs	r1, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	4b37      	ldr	r3, [pc, #220]	; (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 8002988:	430a      	orrs	r2, r1
 800298a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800298c:	f7ff f99e 	bl	8001ccc <HAL_GetTick>
 8002990:	0003      	movs	r3, r0
 8002992:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002994:	e009      	b.n	80029aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002996:	f7ff f999 	bl	8001ccc <HAL_GetTick>
 800299a:	0002      	movs	r2, r0
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	4a2f      	ldr	r2, [pc, #188]	; (8002a60 <HAL_RCC_ClockConfig+0x1f4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e054      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	4b2e      	ldr	r3, [pc, #184]	; (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2238      	movs	r2, #56	; 0x38
 80029b0:	401a      	ands	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d1ec      	bne.n	8002996 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029bc:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <HAL_RCC_ClockConfig+0x1f0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2207      	movs	r2, #7
 80029c2:	4013      	ands	r3, r2
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d21e      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <HAL_RCC_ClockConfig+0x1f0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2207      	movs	r2, #7
 80029d0:	4393      	bics	r3, r2
 80029d2:	0019      	movs	r1, r3
 80029d4:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <HAL_RCC_ClockConfig+0x1f0>)
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029dc:	f7ff f976 	bl	8001ccc <HAL_GetTick>
 80029e0:	0003      	movs	r3, r0
 80029e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029e4:	e009      	b.n	80029fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e6:	f7ff f971 	bl	8001ccc <HAL_GetTick>
 80029ea:	0002      	movs	r2, r0
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	4a1b      	ldr	r2, [pc, #108]	; (8002a60 <HAL_RCC_ClockConfig+0x1f4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e02c      	b.n	8002a54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <HAL_RCC_ClockConfig+0x1f0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2207      	movs	r2, #7
 8002a00:	4013      	ands	r3, r2
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1ee      	bne.n	80029e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d009      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a12:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	4a15      	ldr	r2, [pc, #84]	; (8002a6c <HAL_RCC_ClockConfig+0x200>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a22:	430a      	orrs	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a26:	f000 f829 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8002a2a:	0001      	movs	r1, r0
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <HAL_RCC_ClockConfig+0x1f8>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	220f      	movs	r2, #15
 8002a34:	401a      	ands	r2, r3
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <HAL_RCC_ClockConfig+0x204>)
 8002a38:	0092      	lsls	r2, r2, #2
 8002a3a:	58d3      	ldr	r3, [r2, r3]
 8002a3c:	221f      	movs	r2, #31
 8002a3e:	4013      	ands	r3, r2
 8002a40:	000a      	movs	r2, r1
 8002a42:	40da      	lsrs	r2, r3
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_ClockConfig+0x208>)
 8002a46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCC_ClockConfig+0x20c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7ff f8e1 	bl	8001c14 <HAL_InitTick>
 8002a52:	0003      	movs	r3, r0
}
 8002a54:	0018      	movs	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b004      	add	sp, #16
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40022000 	.word	0x40022000
 8002a60:	00001388 	.word	0x00001388
 8002a64:	40021000 	.word	0x40021000
 8002a68:	fffff0ff 	.word	0xfffff0ff
 8002a6c:	ffff8fff 	.word	0xffff8fff
 8002a70:	080047f8 	.word	0x080047f8
 8002a74:	20000004 	.word	0x20000004
 8002a78:	20000008 	.word	0x20000008

08002a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a82:	4b3c      	ldr	r3, [pc, #240]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2238      	movs	r2, #56	; 0x38
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d10f      	bne.n	8002aac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a8c:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	0adb      	lsrs	r3, r3, #11
 8002a92:	2207      	movs	r2, #7
 8002a94:	4013      	ands	r3, r2
 8002a96:	2201      	movs	r2, #1
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	0013      	movs	r3, r2
 8002a9c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a9e:	6839      	ldr	r1, [r7, #0]
 8002aa0:	4835      	ldr	r0, [pc, #212]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002aa2:	f7fd fb2f 	bl	8000104 <__udivsi3>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	e05d      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aac:	4b31      	ldr	r3, [pc, #196]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2238      	movs	r2, #56	; 0x38
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d102      	bne.n	8002abe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ab8:	4b30      	ldr	r3, [pc, #192]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x100>)
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	e054      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002abe:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2238      	movs	r2, #56	; 0x38
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b10      	cmp	r3, #16
 8002ac8:	d138      	bne.n	8002b3c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002aca:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	2203      	movs	r2, #3
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ad4:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	2207      	movs	r2, #7
 8002adc:	4013      	ands	r3, r2
 8002ade:	3301      	adds	r3, #1
 8002ae0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d10d      	bne.n	8002b04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	4824      	ldr	r0, [pc, #144]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x100>)
 8002aec:	f7fd fb0a 	bl	8000104 <__udivsi3>
 8002af0:	0003      	movs	r3, r0
 8002af2:	0019      	movs	r1, r3
 8002af4:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	0a1b      	lsrs	r3, r3, #8
 8002afa:	227f      	movs	r2, #127	; 0x7f
 8002afc:	4013      	ands	r3, r2
 8002afe:	434b      	muls	r3, r1
 8002b00:	617b      	str	r3, [r7, #20]
        break;
 8002b02:	e00d      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	481c      	ldr	r0, [pc, #112]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b08:	f7fd fafc 	bl	8000104 <__udivsi3>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	0019      	movs	r1, r3
 8002b10:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	227f      	movs	r2, #127	; 0x7f
 8002b18:	4013      	ands	r3, r2
 8002b1a:	434b      	muls	r3, r1
 8002b1c:	617b      	str	r3, [r7, #20]
        break;
 8002b1e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b20:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	0f5b      	lsrs	r3, r3, #29
 8002b26:	2207      	movs	r2, #7
 8002b28:	4013      	ands	r3, r2
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	6978      	ldr	r0, [r7, #20]
 8002b32:	f7fd fae7 	bl	8000104 <__udivsi3>
 8002b36:	0003      	movs	r3, r0
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	e015      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2238      	movs	r2, #56	; 0x38
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d103      	bne.n	8002b50 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	e00b      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2238      	movs	r2, #56	; 0x38
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b18      	cmp	r3, #24
 8002b5a:	d103      	bne.n	8002b64 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b5c:	23fa      	movs	r3, #250	; 0xfa
 8002b5e:	01db      	lsls	r3, r3, #7
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	e001      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b68:	693b      	ldr	r3, [r7, #16]
}
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b006      	add	sp, #24
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	40021000 	.word	0x40021000
 8002b78:	00f42400 	.word	0x00f42400
 8002b7c:	007a1200 	.word	0x007a1200

08002b80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b84:	4b02      	ldr	r3, [pc, #8]	; (8002b90 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	0018      	movs	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	20000004 	.word	0x20000004

08002b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b94:	b5b0      	push	{r4, r5, r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b98:	f7ff fff2 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002b9c:	0004      	movs	r4, r0
 8002b9e:	f7ff fb3f 	bl	8002220 <LL_RCC_GetAPB1Prescaler>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	0b1a      	lsrs	r2, r3, #12
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ba8:	0092      	lsls	r2, r2, #2
 8002baa:	58d3      	ldr	r3, [r2, r3]
 8002bac:	221f      	movs	r2, #31
 8002bae:	4013      	ands	r3, r2
 8002bb0:	40dc      	lsrs	r4, r3
 8002bb2:	0023      	movs	r3, r4
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	08004838 	.word	0x08004838

08002bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002bc8:	2313      	movs	r3, #19
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bd0:	2312      	movs	r3, #18
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	029b      	lsls	r3, r3, #10
 8002be0:	4013      	ands	r3, r2
 8002be2:	d100      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002be4:	e0a3      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be6:	2011      	movs	r0, #17
 8002be8:	183b      	adds	r3, r7, r0
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bee:	4bc3      	ldr	r3, [pc, #780]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	055b      	lsls	r3, r3, #21
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d110      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfa:	4bc0      	ldr	r3, [pc, #768]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bfe:	4bbf      	ldr	r3, [pc, #764]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c00:	2180      	movs	r1, #128	; 0x80
 8002c02:	0549      	lsls	r1, r1, #21
 8002c04:	430a      	orrs	r2, r1
 8002c06:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c08:	4bbc      	ldr	r3, [pc, #752]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	055b      	lsls	r3, r3, #21
 8002c10:	4013      	ands	r3, r2
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c16:	183b      	adds	r3, r7, r0
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c1c:	4bb8      	ldr	r3, [pc, #736]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4bb7      	ldr	r3, [pc, #732]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c22:	2180      	movs	r1, #128	; 0x80
 8002c24:	0049      	lsls	r1, r1, #1
 8002c26:	430a      	orrs	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c2a:	f7ff f84f 	bl	8001ccc <HAL_GetTick>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c32:	e00b      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c34:	f7ff f84a 	bl	8001ccc <HAL_GetTick>
 8002c38:	0002      	movs	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d904      	bls.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c42:	2313      	movs	r3, #19
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	2203      	movs	r2, #3
 8002c48:	701a      	strb	r2, [r3, #0]
        break;
 8002c4a:	e005      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c4c:	4bac      	ldr	r3, [pc, #688]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4013      	ands	r3, r2
 8002c56:	d0ed      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c58:	2313      	movs	r3, #19
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d154      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c62:	4ba6      	ldr	r3, [pc, #664]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c66:	23c0      	movs	r3, #192	; 0xc0
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d019      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d014      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c7e:	4b9f      	ldr	r3, [pc, #636]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c82:	4aa0      	ldr	r2, [pc, #640]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c88:	4b9c      	ldr	r3, [pc, #624]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c8c:	4b9b      	ldr	r3, [pc, #620]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c8e:	2180      	movs	r1, #128	; 0x80
 8002c90:	0249      	lsls	r1, r1, #9
 8002c92:	430a      	orrs	r2, r1
 8002c94:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c96:	4b99      	ldr	r3, [pc, #612]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c9a:	4b98      	ldr	r3, [pc, #608]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c9c:	499a      	ldr	r1, [pc, #616]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ca2:	4b96      	ldr	r3, [pc, #600]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2201      	movs	r2, #1
 8002cac:	4013      	ands	r3, r2
 8002cae:	d016      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7ff f80c 	bl	8001ccc <HAL_GetTick>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb8:	e00c      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7ff f807 	bl	8001ccc <HAL_GetTick>
 8002cbe:	0002      	movs	r2, r0
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	4a91      	ldr	r2, [pc, #580]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d904      	bls.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002cca:	2313      	movs	r3, #19
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	2203      	movs	r2, #3
 8002cd0:	701a      	strb	r2, [r3, #0]
            break;
 8002cd2:	e004      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd4:	4b89      	ldr	r3, [pc, #548]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	2202      	movs	r2, #2
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d0ed      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002cde:	2313      	movs	r3, #19
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10a      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ce8:	4b84      	ldr	r3, [pc, #528]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	4a85      	ldr	r2, [pc, #532]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf6:	4b81      	ldr	r3, [pc, #516]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cfc:	e00c      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cfe:	2312      	movs	r3, #18
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	2213      	movs	r2, #19
 8002d04:	18ba      	adds	r2, r7, r2
 8002d06:	7812      	ldrb	r2, [r2, #0]
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	e005      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0c:	2312      	movs	r3, #18
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	2213      	movs	r2, #19
 8002d12:	18ba      	adds	r2, r7, r2
 8002d14:	7812      	ldrb	r2, [r2, #0]
 8002d16:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d18:	2311      	movs	r3, #17
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d105      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d22:	4b76      	ldr	r3, [pc, #472]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d26:	4b75      	ldr	r3, [pc, #468]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d28:	4979      	ldr	r1, [pc, #484]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2201      	movs	r2, #1
 8002d34:	4013      	ands	r3, r2
 8002d36:	d009      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d38:	4b70      	ldr	r3, [pc, #448]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	4393      	bics	r3, r2
 8002d40:	0019      	movs	r1, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	4b6d      	ldr	r3, [pc, #436]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2202      	movs	r2, #2
 8002d52:	4013      	ands	r3, r2
 8002d54:	d009      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d56:	4b69      	ldr	r3, [pc, #420]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	4393      	bics	r3, r2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	4b65      	ldr	r3, [pc, #404]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d66:	430a      	orrs	r2, r1
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2210      	movs	r2, #16
 8002d70:	4013      	ands	r3, r2
 8002d72:	d009      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d74:	4b61      	ldr	r3, [pc, #388]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d78:	4a66      	ldr	r2, [pc, #408]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	4b5e      	ldr	r3, [pc, #376]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d84:	430a      	orrs	r2, r1
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4013      	ands	r3, r2
 8002d92:	d009      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d94:	4b59      	ldr	r3, [pc, #356]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d98:	4a5f      	ldr	r2, [pc, #380]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	4b56      	ldr	r3, [pc, #344]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002da4:	430a      	orrs	r2, r1
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4013      	ands	r3, r2
 8002db2:	d009      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002db4:	4b51      	ldr	r3, [pc, #324]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	4a58      	ldr	r2, [pc, #352]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	4b4e      	ldr	r3, [pc, #312]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d009      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dd2:	4b4a      	ldr	r3, [pc, #296]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	4a52      	ldr	r2, [pc, #328]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	0019      	movs	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	4b46      	ldr	r3, [pc, #280]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de2:	430a      	orrs	r2, r1
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	01db      	lsls	r3, r3, #7
 8002dee:	4013      	ands	r3, r2
 8002df0:	d015      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002df2:	4b42      	ldr	r3, [pc, #264]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	0899      	lsrs	r1, r3, #2
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1a      	ldr	r2, [r3, #32]
 8002dfe:	4b3f      	ldr	r3, [pc, #252]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e00:	430a      	orrs	r2, r1
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1a      	ldr	r2, [r3, #32]
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	05db      	lsls	r3, r3, #23
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e10:	4b3a      	ldr	r3, [pc, #232]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	4b39      	ldr	r3, [pc, #228]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e16:	2180      	movs	r1, #128	; 0x80
 8002e18:	0249      	lsls	r1, r1, #9
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	031b      	lsls	r3, r3, #12
 8002e26:	4013      	ands	r3, r2
 8002e28:	d009      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e2a:	4b34      	ldr	r3, [pc, #208]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	2240      	movs	r2, #64	; 0x40
 8002e30:	4393      	bics	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e38:	4b30      	ldr	r3, [pc, #192]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	039b      	lsls	r3, r3, #14
 8002e46:	4013      	ands	r3, r2
 8002e48:	d016      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e4a:	4b2c      	ldr	r3, [pc, #176]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4e:	4a35      	ldr	r2, [pc, #212]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	0019      	movs	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e58:	4b28      	ldr	r3, [pc, #160]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	03db      	lsls	r3, r3, #15
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d106      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e6a:	4b24      	ldr	r3, [pc, #144]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	4b23      	ldr	r3, [pc, #140]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e70:	2180      	movs	r1, #128	; 0x80
 8002e72:	0449      	lsls	r1, r1, #17
 8002e74:	430a      	orrs	r2, r1
 8002e76:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	03db      	lsls	r3, r3, #15
 8002e80:	4013      	ands	r3, r2
 8002e82:	d016      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	4a27      	ldr	r2, [pc, #156]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e92:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e94:	430a      	orrs	r2, r1
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	045b      	lsls	r3, r3, #17
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	4b14      	ldr	r3, [pc, #80]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eaa:	2180      	movs	r1, #128	; 0x80
 8002eac:	0449      	lsls	r1, r1, #17
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	2380      	movs	r3, #128	; 0x80
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d016      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec2:	4a1a      	ldr	r2, [pc, #104]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	01db      	lsls	r3, r3, #7
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d106      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ede:	4b07      	ldr	r3, [pc, #28]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ee4:	2180      	movs	r1, #128	; 0x80
 8002ee6:	0249      	lsls	r1, r1, #9
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002eec:	2312      	movs	r3, #18
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	781b      	ldrb	r3, [r3, #0]
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b006      	add	sp, #24
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40007000 	.word	0x40007000
 8002f04:	fffffcff 	.word	0xfffffcff
 8002f08:	fffeffff 	.word	0xfffeffff
 8002f0c:	00001388 	.word	0x00001388
 8002f10:	efffffff 	.word	0xefffffff
 8002f14:	fffff3ff 	.word	0xfffff3ff
 8002f18:	fff3ffff 	.word	0xfff3ffff
 8002f1c:	ffcfffff 	.word	0xffcfffff
 8002f20:	ffffcfff 	.word	0xffffcfff
 8002f24:	ffbfffff 	.word	0xffbfffff
 8002f28:	feffffff 	.word	0xfeffffff
 8002f2c:	ffff3fff 	.word	0xffff3fff

08002f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0a8      	b.n	8003094 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	2382      	movs	r3, #130	; 0x82
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d009      	beq.n	8002f6a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	61da      	str	r2, [r3, #28]
 8002f5c:	e005      	b.n	8002f6a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	225d      	movs	r2, #93	; 0x5d
 8002f74:	5c9b      	ldrb	r3, [r3, r2]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d107      	bne.n	8002f8c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	225c      	movs	r2, #92	; 0x5c
 8002f80:	2100      	movs	r1, #0
 8002f82:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	0018      	movs	r0, r3
 8002f88:	f7fe fcd8 	bl	800193c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	225d      	movs	r2, #93	; 0x5d
 8002f90:	2102      	movs	r1, #2
 8002f92:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2140      	movs	r1, #64	; 0x40
 8002fa0:	438a      	bics	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	23e0      	movs	r3, #224	; 0xe0
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d902      	bls.n	8002fb6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e002      	b.n	8002fbc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	015b      	lsls	r3, r3, #5
 8002fba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	23f0      	movs	r3, #240	; 0xf0
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d008      	beq.n	8002fda <HAL_SPI_Init+0xaa>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	23e0      	movs	r3, #224	; 0xe0
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d002      	beq.n	8002fda <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	2382      	movs	r3, #130	; 0x82
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6899      	ldr	r1, [r3, #8]
 8002fe8:	2384      	movs	r3, #132	; 0x84
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	400b      	ands	r3, r1
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2102      	movs	r1, #2
 8002ff6:	400b      	ands	r3, r1
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	2101      	movs	r1, #1
 8003000:	400b      	ands	r3, r1
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6999      	ldr	r1, [r3, #24]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	400b      	ands	r3, r1
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	2138      	movs	r1, #56	; 0x38
 8003016:	400b      	ands	r3, r1
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	2180      	movs	r1, #128	; 0x80
 8003020:	400b      	ands	r3, r1
 8003022:	431a      	orrs	r2, r3
 8003024:	0011      	movs	r1, r2
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	019b      	lsls	r3, r3, #6
 800302e:	401a      	ands	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	0c1b      	lsrs	r3, r3, #16
 800303e:	2204      	movs	r2, #4
 8003040:	401a      	ands	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	2110      	movs	r1, #16
 8003048:	400b      	ands	r3, r1
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003050:	2108      	movs	r1, #8
 8003052:	400b      	ands	r3, r1
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68d9      	ldr	r1, [r3, #12]
 800305a:	23f0      	movs	r3, #240	; 0xf0
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	400b      	ands	r3, r1
 8003060:	431a      	orrs	r2, r3
 8003062:	0011      	movs	r1, r2
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	015b      	lsls	r3, r3, #5
 800306a:	401a      	ands	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4907      	ldr	r1, [pc, #28]	; (800309c <HAL_SPI_Init+0x16c>)
 8003080:	400a      	ands	r2, r1
 8003082:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	225d      	movs	r2, #93	; 0x5d
 800308e:	2101      	movs	r1, #1
 8003090:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	0018      	movs	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	b004      	add	sp, #16
 800309a:	bd80      	pop	{r7, pc}
 800309c:	fffff7ff 	.word	0xfffff7ff

080030a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	1dbb      	adds	r3, r7, #6
 80030ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030b0:	231f      	movs	r3, #31
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	225c      	movs	r2, #92	; 0x5c
 80030bc:	5c9b      	ldrb	r3, [r3, r2]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_SPI_Transmit+0x26>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e140      	b.n	8003348 <HAL_SPI_Transmit+0x2a8>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	225c      	movs	r2, #92	; 0x5c
 80030ca:	2101      	movs	r1, #1
 80030cc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030ce:	f7fe fdfd 	bl	8001ccc <HAL_GetTick>
 80030d2:	0003      	movs	r3, r0
 80030d4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80030d6:	2316      	movs	r3, #22
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	1dba      	adds	r2, r7, #6
 80030dc:	8812      	ldrh	r2, [r2, #0]
 80030de:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	225d      	movs	r2, #93	; 0x5d
 80030e4:	5c9b      	ldrb	r3, [r3, r2]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d004      	beq.n	80030f6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80030ec:	231f      	movs	r3, #31
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	2202      	movs	r2, #2
 80030f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80030f4:	e11d      	b.n	8003332 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_SPI_Transmit+0x64>
 80030fc:	1dbb      	adds	r3, r7, #6
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d104      	bne.n	800310e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003104:	231f      	movs	r3, #31
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
    goto error;
 800310c:	e111      	b.n	8003332 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	225d      	movs	r2, #93	; 0x5d
 8003112:	2103      	movs	r1, #3
 8003114:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1dba      	adds	r2, r7, #6
 8003126:	8812      	ldrh	r2, [r2, #0]
 8003128:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1dba      	adds	r2, r7, #6
 800312e:	8812      	ldrh	r2, [r2, #0]
 8003130:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2244      	movs	r2, #68	; 0x44
 800313c:	2100      	movs	r1, #0
 800313e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2246      	movs	r2, #70	; 0x46
 8003144:	2100      	movs	r1, #0
 8003146:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	2380      	movs	r3, #128	; 0x80
 800315a:	021b      	lsls	r3, r3, #8
 800315c:	429a      	cmp	r2, r3
 800315e:	d110      	bne.n	8003182 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2140      	movs	r1, #64	; 0x40
 800316c:	438a      	bics	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2180      	movs	r1, #128	; 0x80
 800317c:	01c9      	lsls	r1, r1, #7
 800317e:	430a      	orrs	r2, r1
 8003180:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2240      	movs	r2, #64	; 0x40
 800318a:	4013      	ands	r3, r2
 800318c:	2b40      	cmp	r3, #64	; 0x40
 800318e:	d007      	beq.n	80031a0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2140      	movs	r1, #64	; 0x40
 800319c:	430a      	orrs	r2, r1
 800319e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	23e0      	movs	r3, #224	; 0xe0
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d94e      	bls.n	800324a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d004      	beq.n	80031be <HAL_SPI_Transmit+0x11e>
 80031b4:	2316      	movs	r3, #22
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d13f      	bne.n	800323e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	881a      	ldrh	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	1c9a      	adds	r2, r3, #2
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031e2:	e02c      	b.n	800323e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2202      	movs	r2, #2
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d112      	bne.n	8003218 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	881a      	ldrh	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	1c9a      	adds	r2, r3, #2
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003216:	e012      	b.n	800323e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003218:	f7fe fd58 	bl	8001ccc <HAL_GetTick>
 800321c:	0002      	movs	r2, r0
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d802      	bhi.n	800322e <HAL_SPI_Transmit+0x18e>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	3301      	adds	r3, #1
 800322c:	d102      	bne.n	8003234 <HAL_SPI_Transmit+0x194>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d104      	bne.n	800323e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003234:	231f      	movs	r3, #31
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	2203      	movs	r2, #3
 800323a:	701a      	strb	r2, [r3, #0]
          goto error;
 800323c:	e079      	b.n	8003332 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1cd      	bne.n	80031e4 <HAL_SPI_Transmit+0x144>
 8003248:	e04f      	b.n	80032ea <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d004      	beq.n	800325c <HAL_SPI_Transmit+0x1bc>
 8003252:	2316      	movs	r3, #22
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d141      	bne.n	80032e0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	330c      	adds	r3, #12
 8003266:	7812      	ldrb	r2, [r2, #0]
 8003268:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003282:	e02d      	b.n	80032e0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2202      	movs	r2, #2
 800328c:	4013      	ands	r3, r2
 800328e:	2b02      	cmp	r3, #2
 8003290:	d113      	bne.n	80032ba <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	330c      	adds	r3, #12
 800329c:	7812      	ldrb	r2, [r2, #0]
 800329e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032b8:	e012      	b.n	80032e0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ba:	f7fe fd07 	bl	8001ccc <HAL_GetTick>
 80032be:	0002      	movs	r2, r0
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d802      	bhi.n	80032d0 <HAL_SPI_Transmit+0x230>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	3301      	adds	r3, #1
 80032ce:	d102      	bne.n	80032d6 <HAL_SPI_Transmit+0x236>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d104      	bne.n	80032e0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80032d6:	231f      	movs	r3, #31
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	2203      	movs	r2, #3
 80032dc:	701a      	strb	r2, [r3, #0]
          goto error;
 80032de:	e028      	b.n	8003332 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1cc      	bne.n	8003284 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	6839      	ldr	r1, [r7, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	0018      	movs	r0, r3
 80032f2:	f000 f95d 	bl	80035b0 <SPI_EndRxTxTransaction>
 80032f6:	1e03      	subs	r3, r0, #0
 80032f8:	d002      	beq.n	8003300 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10a      	bne.n	800331e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003322:	2b00      	cmp	r3, #0
 8003324:	d004      	beq.n	8003330 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003326:	231f      	movs	r3, #31
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	e000      	b.n	8003332 <HAL_SPI_Transmit+0x292>
  }

error:
 8003330:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	225d      	movs	r2, #93	; 0x5d
 8003336:	2101      	movs	r1, #1
 8003338:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	225c      	movs	r2, #92	; 0x5c
 800333e:	2100      	movs	r1, #0
 8003340:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003342:	231f      	movs	r3, #31
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	781b      	ldrb	r3, [r3, #0]
}
 8003348:	0018      	movs	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	b008      	add	sp, #32
 800334e:	bd80      	pop	{r7, pc}

08003350 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	1dfb      	adds	r3, r7, #7
 800335e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003360:	f7fe fcb4 	bl	8001ccc <HAL_GetTick>
 8003364:	0002      	movs	r2, r0
 8003366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	18d3      	adds	r3, r2, r3
 800336e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003370:	f7fe fcac 	bl	8001ccc <HAL_GetTick>
 8003374:	0003      	movs	r3, r0
 8003376:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003378:	4b3a      	ldr	r3, [pc, #232]	; (8003464 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	015b      	lsls	r3, r3, #5
 800337e:	0d1b      	lsrs	r3, r3, #20
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	4353      	muls	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003386:	e058      	b.n	800343a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	3301      	adds	r3, #1
 800338c:	d055      	beq.n	800343a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800338e:	f7fe fc9d 	bl	8001ccc <HAL_GetTick>
 8003392:	0002      	movs	r2, r0
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	429a      	cmp	r2, r3
 800339c:	d902      	bls.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0x54>
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d142      	bne.n	800342a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	21e0      	movs	r1, #224	; 0xe0
 80033b0:	438a      	bics	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	2382      	movs	r3, #130	; 0x82
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	429a      	cmp	r2, r3
 80033be:	d113      	bne.n	80033e8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d005      	beq.n	80033d8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d107      	bne.n	80033e8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2140      	movs	r1, #64	; 0x40
 80033e4:	438a      	bics	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	019b      	lsls	r3, r3, #6
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d110      	bne.n	8003416 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	491a      	ldr	r1, [pc, #104]	; (8003468 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003400:	400a      	ands	r2, r1
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2180      	movs	r1, #128	; 0x80
 8003410:	0189      	lsls	r1, r1, #6
 8003412:	430a      	orrs	r2, r1
 8003414:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	225d      	movs	r2, #93	; 0x5d
 800341a:	2101      	movs	r1, #1
 800341c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	225c      	movs	r2, #92	; 0x5c
 8003422:	2100      	movs	r1, #0
 8003424:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e017      	b.n	800345a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	3b01      	subs	r3, #1
 8003438:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	4013      	ands	r3, r2
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	425a      	negs	r2, r3
 800344a:	4153      	adcs	r3, r2
 800344c:	b2db      	uxtb	r3, r3
 800344e:	001a      	movs	r2, r3
 8003450:	1dfb      	adds	r3, r7, #7
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d197      	bne.n	8003388 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b008      	add	sp, #32
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	20000004 	.word	0x20000004
 8003468:	ffffdfff 	.word	0xffffdfff

0800346c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	; 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800347a:	2317      	movs	r3, #23
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003482:	f7fe fc23 	bl	8001ccc <HAL_GetTick>
 8003486:	0002      	movs	r2, r0
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	18d3      	adds	r3, r2, r3
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003492:	f7fe fc1b 	bl	8001ccc <HAL_GetTick>
 8003496:	0003      	movs	r3, r0
 8003498:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	330c      	adds	r3, #12
 80034a0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80034a2:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	0013      	movs	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	00da      	lsls	r2, r3, #3
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	0d1b      	lsrs	r3, r3, #20
 80034b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b4:	4353      	muls	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80034b8:	e068      	b.n	800358c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	23c0      	movs	r3, #192	; 0xc0
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d10a      	bne.n	80034da <SPI_WaitFifoStateUntilTimeout+0x6e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d107      	bne.n	80034da <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	2117      	movs	r1, #23
 80034d2:	187b      	adds	r3, r7, r1
 80034d4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80034d6:	187b      	adds	r3, r7, r1
 80034d8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	d055      	beq.n	800358c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034e0:	f7fe fbf4 	bl	8001ccc <HAL_GetTick>
 80034e4:	0002      	movs	r2, r0
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d902      	bls.n	80034f6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d142      	bne.n	800357c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	21e0      	movs	r1, #224	; 0xe0
 8003502:	438a      	bics	r2, r1
 8003504:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	2382      	movs	r3, #130	; 0x82
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	429a      	cmp	r2, r3
 8003510:	d113      	bne.n	800353a <SPI_WaitFifoStateUntilTimeout+0xce>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	429a      	cmp	r2, r3
 800351c:	d005      	beq.n	800352a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	429a      	cmp	r2, r3
 8003528:	d107      	bne.n	800353a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2140      	movs	r1, #64	; 0x40
 8003536:	438a      	bics	r2, r1
 8003538:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	019b      	lsls	r3, r3, #6
 8003542:	429a      	cmp	r2, r3
 8003544:	d110      	bne.n	8003568 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4916      	ldr	r1, [pc, #88]	; (80035ac <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003552:	400a      	ands	r2, r1
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2180      	movs	r1, #128	; 0x80
 8003562:	0189      	lsls	r1, r1, #6
 8003564:	430a      	orrs	r2, r1
 8003566:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	225d      	movs	r2, #93	; 0x5d
 800356c:	2101      	movs	r1, #1
 800356e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	225c      	movs	r2, #92	; 0x5c
 8003574:	2100      	movs	r1, #0
 8003576:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e010      	b.n	800359e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	3b01      	subs	r3, #1
 800358a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	4013      	ands	r3, r2
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	429a      	cmp	r2, r3
 800359a:	d18e      	bne.n	80034ba <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	0018      	movs	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b00a      	add	sp, #40	; 0x28
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	20000004 	.word	0x20000004
 80035ac:	ffffdfff 	.word	0xffffdfff

080035b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	23c0      	movs	r3, #192	; 0xc0
 80035c0:	0159      	lsls	r1, r3, #5
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	0013      	movs	r3, r2
 80035ca:	2200      	movs	r2, #0
 80035cc:	f7ff ff4e 	bl	800346c <SPI_WaitFifoStateUntilTimeout>
 80035d0:	1e03      	subs	r3, r0, #0
 80035d2:	d007      	beq.n	80035e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d8:	2220      	movs	r2, #32
 80035da:	431a      	orrs	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e027      	b.n	8003634 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	0013      	movs	r3, r2
 80035ee:	2200      	movs	r2, #0
 80035f0:	2180      	movs	r1, #128	; 0x80
 80035f2:	f7ff fead 	bl	8003350 <SPI_WaitFlagStateUntilTimeout>
 80035f6:	1e03      	subs	r3, r0, #0
 80035f8:	d007      	beq.n	800360a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fe:	2220      	movs	r2, #32
 8003600:	431a      	orrs	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e014      	b.n	8003634 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	23c0      	movs	r3, #192	; 0xc0
 800360e:	00d9      	lsls	r1, r3, #3
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	0013      	movs	r3, r2
 8003618:	2200      	movs	r2, #0
 800361a:	f7ff ff27 	bl	800346c <SPI_WaitFifoStateUntilTimeout>
 800361e:	1e03      	subs	r3, r0, #0
 8003620:	d007      	beq.n	8003632 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003626:	2220      	movs	r2, #32
 8003628:	431a      	orrs	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e000      	b.n	8003634 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	b004      	add	sp, #16
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e04a      	b.n	80036e4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	223d      	movs	r2, #61	; 0x3d
 8003652:	5c9b      	ldrb	r3, [r3, r2]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d107      	bne.n	800366a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	223c      	movs	r2, #60	; 0x3c
 800365e:	2100      	movs	r1, #0
 8003660:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	0018      	movs	r0, r3
 8003666:	f7fe f9d9 	bl	8001a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	223d      	movs	r2, #61	; 0x3d
 800366e:	2102      	movs	r1, #2
 8003670:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3304      	adds	r3, #4
 800367a:	0019      	movs	r1, r3
 800367c:	0010      	movs	r0, r2
 800367e:	f000 f9e3 	bl	8003a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2248      	movs	r2, #72	; 0x48
 8003686:	2101      	movs	r1, #1
 8003688:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	223e      	movs	r2, #62	; 0x3e
 800368e:	2101      	movs	r1, #1
 8003690:	5499      	strb	r1, [r3, r2]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	223f      	movs	r2, #63	; 0x3f
 8003696:	2101      	movs	r1, #1
 8003698:	5499      	strb	r1, [r3, r2]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2240      	movs	r2, #64	; 0x40
 800369e:	2101      	movs	r1, #1
 80036a0:	5499      	strb	r1, [r3, r2]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2241      	movs	r2, #65	; 0x41
 80036a6:	2101      	movs	r1, #1
 80036a8:	5499      	strb	r1, [r3, r2]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2242      	movs	r2, #66	; 0x42
 80036ae:	2101      	movs	r1, #1
 80036b0:	5499      	strb	r1, [r3, r2]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2243      	movs	r2, #67	; 0x43
 80036b6:	2101      	movs	r1, #1
 80036b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2244      	movs	r2, #68	; 0x44
 80036be:	2101      	movs	r1, #1
 80036c0:	5499      	strb	r1, [r3, r2]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2245      	movs	r2, #69	; 0x45
 80036c6:	2101      	movs	r1, #1
 80036c8:	5499      	strb	r1, [r3, r2]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2246      	movs	r2, #70	; 0x46
 80036ce:	2101      	movs	r1, #1
 80036d0:	5499      	strb	r1, [r3, r2]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2247      	movs	r2, #71	; 0x47
 80036d6:	2101      	movs	r1, #1
 80036d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	223d      	movs	r2, #61	; 0x3d
 80036de:	2101      	movs	r1, #1
 80036e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b002      	add	sp, #8
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	223d      	movs	r2, #61	; 0x3d
 80036f8:	5c9b      	ldrb	r3, [r3, r2]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d001      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e042      	b.n	800378a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	223d      	movs	r2, #61	; 0x3d
 8003708:	2102      	movs	r1, #2
 800370a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2101      	movs	r1, #1
 8003718:	430a      	orrs	r2, r1
 800371a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <HAL_TIM_Base_Start_IT+0xa8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00f      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x5a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	2380      	movs	r3, #128	; 0x80
 800372c:	05db      	lsls	r3, r3, #23
 800372e:	429a      	cmp	r2, r3
 8003730:	d009      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x5a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a18      	ldr	r2, [pc, #96]	; (8003798 <HAL_TIM_Base_Start_IT+0xac>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d004      	beq.n	8003746 <HAL_TIM_Base_Start_IT+0x5a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a16      	ldr	r2, [pc, #88]	; (800379c <HAL_TIM_Base_Start_IT+0xb0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d116      	bne.n	8003774 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4a14      	ldr	r2, [pc, #80]	; (80037a0 <HAL_TIM_Base_Start_IT+0xb4>)
 800374e:	4013      	ands	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b06      	cmp	r3, #6
 8003756:	d016      	beq.n	8003786 <HAL_TIM_Base_Start_IT+0x9a>
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	025b      	lsls	r3, r3, #9
 800375e:	429a      	cmp	r2, r3
 8003760:	d011      	beq.n	8003786 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2101      	movs	r1, #1
 800376e:	430a      	orrs	r2, r1
 8003770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003772:	e008      	b.n	8003786 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2101      	movs	r1, #1
 8003780:	430a      	orrs	r2, r1
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	e000      	b.n	8003788 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003786:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	0018      	movs	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	b004      	add	sp, #16
 8003790:	bd80      	pop	{r7, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	40012c00 	.word	0x40012c00
 8003798:	40000400 	.word	0x40000400
 800379c:	40014000 	.word	0x40014000
 80037a0:	00010007 	.word	0x00010007

080037a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2202      	movs	r2, #2
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d124      	bne.n	8003804 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2202      	movs	r2, #2
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d11d      	bne.n	8003804 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2203      	movs	r2, #3
 80037ce:	4252      	negs	r2, r2
 80037d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2203      	movs	r2, #3
 80037e0:	4013      	ands	r3, r2
 80037e2:	d004      	beq.n	80037ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 f916 	bl	8003a18 <HAL_TIM_IC_CaptureCallback>
 80037ec:	e007      	b.n	80037fe <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 f909 	bl	8003a08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	0018      	movs	r0, r3
 80037fa:	f000 f915 	bl	8003a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2204      	movs	r2, #4
 800380c:	4013      	ands	r3, r2
 800380e:	2b04      	cmp	r3, #4
 8003810:	d125      	bne.n	800385e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2204      	movs	r2, #4
 800381a:	4013      	ands	r3, r2
 800381c:	2b04      	cmp	r3, #4
 800381e:	d11e      	bne.n	800385e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2205      	movs	r2, #5
 8003826:	4252      	negs	r2, r2
 8003828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	23c0      	movs	r3, #192	; 0xc0
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4013      	ands	r3, r2
 800383c:	d004      	beq.n	8003848 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	0018      	movs	r0, r3
 8003842:	f000 f8e9 	bl	8003a18 <HAL_TIM_IC_CaptureCallback>
 8003846:	e007      	b.n	8003858 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	0018      	movs	r0, r3
 800384c:	f000 f8dc 	bl	8003a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	0018      	movs	r0, r3
 8003854:	f000 f8e8 	bl	8003a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	2208      	movs	r2, #8
 8003866:	4013      	ands	r3, r2
 8003868:	2b08      	cmp	r3, #8
 800386a:	d124      	bne.n	80038b6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2208      	movs	r2, #8
 8003874:	4013      	ands	r3, r2
 8003876:	2b08      	cmp	r3, #8
 8003878:	d11d      	bne.n	80038b6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2209      	movs	r2, #9
 8003880:	4252      	negs	r2, r2
 8003882:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2204      	movs	r2, #4
 8003888:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	2203      	movs	r2, #3
 8003892:	4013      	ands	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0018      	movs	r0, r3
 800389a:	f000 f8bd 	bl	8003a18 <HAL_TIM_IC_CaptureCallback>
 800389e:	e007      	b.n	80038b0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	0018      	movs	r0, r3
 80038a4:	f000 f8b0 	bl	8003a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	0018      	movs	r0, r3
 80038ac:	f000 f8bc 	bl	8003a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	2210      	movs	r2, #16
 80038be:	4013      	ands	r3, r2
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d125      	bne.n	8003910 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2210      	movs	r2, #16
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b10      	cmp	r3, #16
 80038d0:	d11e      	bne.n	8003910 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2211      	movs	r2, #17
 80038d8:	4252      	negs	r2, r2
 80038da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2208      	movs	r2, #8
 80038e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69da      	ldr	r2, [r3, #28]
 80038e8:	23c0      	movs	r3, #192	; 0xc0
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4013      	ands	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f000 f890 	bl	8003a18 <HAL_TIM_IC_CaptureCallback>
 80038f8:	e007      	b.n	800390a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	0018      	movs	r0, r3
 80038fe:	f000 f883 	bl	8003a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	0018      	movs	r0, r3
 8003906:	f000 f88f 	bl	8003a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2201      	movs	r2, #1
 8003918:	4013      	ands	r3, r2
 800391a:	2b01      	cmp	r3, #1
 800391c:	d10f      	bne.n	800393e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	4013      	ands	r3, r2
 8003928:	2b01      	cmp	r3, #1
 800392a:	d108      	bne.n	800393e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2202      	movs	r2, #2
 8003932:	4252      	negs	r2, r2
 8003934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	0018      	movs	r0, r3
 800393a:	f7fd f8ff 	bl	8000b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2280      	movs	r2, #128	; 0x80
 8003946:	4013      	ands	r3, r2
 8003948:	2b80      	cmp	r3, #128	; 0x80
 800394a:	d10f      	bne.n	800396c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2280      	movs	r2, #128	; 0x80
 8003954:	4013      	ands	r3, r2
 8003956:	2b80      	cmp	r3, #128	; 0x80
 8003958:	d108      	bne.n	800396c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2281      	movs	r2, #129	; 0x81
 8003960:	4252      	negs	r2, r2
 8003962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	0018      	movs	r0, r3
 8003968:	f000 f8f6 	bl	8003b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	2380      	movs	r3, #128	; 0x80
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	401a      	ands	r2, r3
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	429a      	cmp	r2, r3
 800397e:	d10e      	bne.n	800399e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2280      	movs	r2, #128	; 0x80
 8003988:	4013      	ands	r3, r2
 800398a:	2b80      	cmp	r3, #128	; 0x80
 800398c:	d107      	bne.n	800399e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1c      	ldr	r2, [pc, #112]	; (8003a04 <HAL_TIM_IRQHandler+0x260>)
 8003994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	0018      	movs	r0, r3
 800399a:	f000 f8e5 	bl	8003b68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2240      	movs	r2, #64	; 0x40
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b40      	cmp	r3, #64	; 0x40
 80039aa:	d10f      	bne.n	80039cc <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2240      	movs	r2, #64	; 0x40
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d108      	bne.n	80039cc <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2241      	movs	r2, #65	; 0x41
 80039c0:	4252      	negs	r2, r2
 80039c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	0018      	movs	r0, r3
 80039c8:	f000 f836 	bl	8003a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2220      	movs	r2, #32
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d10f      	bne.n	80039fa <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d108      	bne.n	80039fa <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2221      	movs	r2, #33	; 0x21
 80039ee:	4252      	negs	r2, r2
 80039f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0018      	movs	r0, r3
 80039f6:	f000 f8a7 	bl	8003b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b002      	add	sp, #8
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	fffffeff 	.word	0xfffffeff

08003a08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b002      	add	sp, #8
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a20:	46c0      	nop			; (mov r8, r8)
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b002      	add	sp, #8
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a30:	46c0      	nop			; (mov r8, r8)
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b002      	add	sp, #8
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b002      	add	sp, #8
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a34      	ldr	r2, [pc, #208]	; (8003b2c <TIM_Base_SetConfig+0xe4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d008      	beq.n	8003a72 <TIM_Base_SetConfig+0x2a>
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	2380      	movs	r3, #128	; 0x80
 8003a64:	05db      	lsls	r3, r3, #23
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d003      	beq.n	8003a72 <TIM_Base_SetConfig+0x2a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a30      	ldr	r2, [pc, #192]	; (8003b30 <TIM_Base_SetConfig+0xe8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d108      	bne.n	8003a84 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2270      	movs	r2, #112	; 0x70
 8003a76:	4393      	bics	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a29      	ldr	r2, [pc, #164]	; (8003b2c <TIM_Base_SetConfig+0xe4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d018      	beq.n	8003abe <TIM_Base_SetConfig+0x76>
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	05db      	lsls	r3, r3, #23
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d013      	beq.n	8003abe <TIM_Base_SetConfig+0x76>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a25      	ldr	r2, [pc, #148]	; (8003b30 <TIM_Base_SetConfig+0xe8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00f      	beq.n	8003abe <TIM_Base_SetConfig+0x76>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a24      	ldr	r2, [pc, #144]	; (8003b34 <TIM_Base_SetConfig+0xec>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00b      	beq.n	8003abe <TIM_Base_SetConfig+0x76>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a23      	ldr	r2, [pc, #140]	; (8003b38 <TIM_Base_SetConfig+0xf0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d007      	beq.n	8003abe <TIM_Base_SetConfig+0x76>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a22      	ldr	r2, [pc, #136]	; (8003b3c <TIM_Base_SetConfig+0xf4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d003      	beq.n	8003abe <TIM_Base_SetConfig+0x76>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a21      	ldr	r2, [pc, #132]	; (8003b40 <TIM_Base_SetConfig+0xf8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d108      	bne.n	8003ad0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a20      	ldr	r2, [pc, #128]	; (8003b44 <TIM_Base_SetConfig+0xfc>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2280      	movs	r2, #128	; 0x80
 8003ad4:	4393      	bics	r3, r2
 8003ad6:	001a      	movs	r2, r3
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <TIM_Base_SetConfig+0xe4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00b      	beq.n	8003b16 <TIM_Base_SetConfig+0xce>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a0d      	ldr	r2, [pc, #52]	; (8003b38 <TIM_Base_SetConfig+0xf0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d007      	beq.n	8003b16 <TIM_Base_SetConfig+0xce>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a0c      	ldr	r2, [pc, #48]	; (8003b3c <TIM_Base_SetConfig+0xf4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_Base_SetConfig+0xce>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a0b      	ldr	r2, [pc, #44]	; (8003b40 <TIM_Base_SetConfig+0xf8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d103      	bne.n	8003b1e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	615a      	str	r2, [r3, #20]
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b004      	add	sp, #16
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40002000 	.word	0x40002000
 8003b38:	40014000 	.word	0x40014000
 8003b3c:	40014400 	.word	0x40014400
 8003b40:	40014800 	.word	0x40014800
 8003b44:	fffffcff 	.word	0xfffffcff

08003b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b50:	46c0      	nop			; (mov r8, r8)
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b002      	add	sp, #8
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b60:	46c0      	nop			; (mov r8, r8)
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b002      	add	sp, #8
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b70:	46c0      	nop			; (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b002      	add	sp, #8
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e046      	b.n	8003c18 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2288      	movs	r2, #136	; 0x88
 8003b8e:	589b      	ldr	r3, [r3, r2]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d107      	bne.n	8003ba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2284      	movs	r2, #132	; 0x84
 8003b98:	2100      	movs	r1, #0
 8003b9a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7fd ff64 	bl	8001a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2288      	movs	r2, #136	; 0x88
 8003ba8:	2124      	movs	r1, #36	; 0x24
 8003baa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	438a      	bics	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f000 f830 	bl	8003c24 <UART_SetConfig>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e024      	b.n	8003c18 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f000 fae1 	bl	80041a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	490d      	ldr	r1, [pc, #52]	; (8003c20 <HAL_UART_Init+0xa8>)
 8003bea:	400a      	ands	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	212a      	movs	r1, #42	; 0x2a
 8003bfa:	438a      	bics	r2, r1
 8003bfc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2101      	movs	r1, #1
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	0018      	movs	r0, r3
 8003c12:	f000 fb79 	bl	8004308 <UART_CheckIdleState>
 8003c16:	0003      	movs	r3, r0
}
 8003c18:	0018      	movs	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b002      	add	sp, #8
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	ffffb7ff 	.word	0xffffb7ff

08003c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c24:	b5b0      	push	{r4, r5, r7, lr}
 8003c26:	b090      	sub	sp, #64	; 0x40
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c2c:	231a      	movs	r3, #26
 8003c2e:	2220      	movs	r2, #32
 8003c30:	189b      	adds	r3, r3, r2
 8003c32:	19db      	adds	r3, r3, r7
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	431a      	orrs	r2, r3
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4aaf      	ldr	r2, [pc, #700]	; (8003f14 <UART_SetConfig+0x2f0>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c62:	430b      	orrs	r3, r1
 8003c64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4aaa      	ldr	r2, [pc, #680]	; (8003f18 <UART_SetConfig+0x2f4>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	0018      	movs	r0, r3
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	68d9      	ldr	r1, [r3, #12]
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	0003      	movs	r3, r0
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4aa4      	ldr	r2, [pc, #656]	; (8003f1c <UART_SetConfig+0x2f8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c96:	4313      	orrs	r3, r2
 8003c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	4a9f      	ldr	r2, [pc, #636]	; (8003f20 <UART_SetConfig+0x2fc>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	0019      	movs	r1, r3
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	220f      	movs	r2, #15
 8003cb8:	4393      	bics	r3, r2
 8003cba:	0018      	movs	r0, r3
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	0003      	movs	r3, r0
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a95      	ldr	r2, [pc, #596]	; (8003f24 <UART_SetConfig+0x300>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d131      	bne.n	8003d38 <UART_SetConfig+0x114>
 8003cd4:	4b94      	ldr	r3, [pc, #592]	; (8003f28 <UART_SetConfig+0x304>)
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd8:	2203      	movs	r2, #3
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d01d      	beq.n	8003d1c <UART_SetConfig+0xf8>
 8003ce0:	d823      	bhi.n	8003d2a <UART_SetConfig+0x106>
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d00c      	beq.n	8003d00 <UART_SetConfig+0xdc>
 8003ce6:	d820      	bhi.n	8003d2a <UART_SetConfig+0x106>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <UART_SetConfig+0xce>
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d00e      	beq.n	8003d0e <UART_SetConfig+0xea>
 8003cf0:	e01b      	b.n	8003d2a <UART_SetConfig+0x106>
 8003cf2:	231b      	movs	r3, #27
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	189b      	adds	r3, r3, r2
 8003cf8:	19db      	adds	r3, r3, r7
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	e0b4      	b.n	8003e6a <UART_SetConfig+0x246>
 8003d00:	231b      	movs	r3, #27
 8003d02:	2220      	movs	r2, #32
 8003d04:	189b      	adds	r3, r3, r2
 8003d06:	19db      	adds	r3, r3, r7
 8003d08:	2202      	movs	r2, #2
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	e0ad      	b.n	8003e6a <UART_SetConfig+0x246>
 8003d0e:	231b      	movs	r3, #27
 8003d10:	2220      	movs	r2, #32
 8003d12:	189b      	adds	r3, r3, r2
 8003d14:	19db      	adds	r3, r3, r7
 8003d16:	2204      	movs	r2, #4
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	e0a6      	b.n	8003e6a <UART_SetConfig+0x246>
 8003d1c:	231b      	movs	r3, #27
 8003d1e:	2220      	movs	r2, #32
 8003d20:	189b      	adds	r3, r3, r2
 8003d22:	19db      	adds	r3, r3, r7
 8003d24:	2208      	movs	r2, #8
 8003d26:	701a      	strb	r2, [r3, #0]
 8003d28:	e09f      	b.n	8003e6a <UART_SetConfig+0x246>
 8003d2a:	231b      	movs	r3, #27
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	189b      	adds	r3, r3, r2
 8003d30:	19db      	adds	r3, r3, r7
 8003d32:	2210      	movs	r2, #16
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	e098      	b.n	8003e6a <UART_SetConfig+0x246>
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a7b      	ldr	r2, [pc, #492]	; (8003f2c <UART_SetConfig+0x308>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d131      	bne.n	8003da6 <UART_SetConfig+0x182>
 8003d42:	4b79      	ldr	r3, [pc, #484]	; (8003f28 <UART_SetConfig+0x304>)
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	220c      	movs	r2, #12
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b0c      	cmp	r3, #12
 8003d4c:	d01d      	beq.n	8003d8a <UART_SetConfig+0x166>
 8003d4e:	d823      	bhi.n	8003d98 <UART_SetConfig+0x174>
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d00c      	beq.n	8003d6e <UART_SetConfig+0x14a>
 8003d54:	d820      	bhi.n	8003d98 <UART_SetConfig+0x174>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <UART_SetConfig+0x13c>
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d00e      	beq.n	8003d7c <UART_SetConfig+0x158>
 8003d5e:	e01b      	b.n	8003d98 <UART_SetConfig+0x174>
 8003d60:	231b      	movs	r3, #27
 8003d62:	2220      	movs	r2, #32
 8003d64:	189b      	adds	r3, r3, r2
 8003d66:	19db      	adds	r3, r3, r7
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
 8003d6c:	e07d      	b.n	8003e6a <UART_SetConfig+0x246>
 8003d6e:	231b      	movs	r3, #27
 8003d70:	2220      	movs	r2, #32
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	19db      	adds	r3, r3, r7
 8003d76:	2202      	movs	r2, #2
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	e076      	b.n	8003e6a <UART_SetConfig+0x246>
 8003d7c:	231b      	movs	r3, #27
 8003d7e:	2220      	movs	r2, #32
 8003d80:	189b      	adds	r3, r3, r2
 8003d82:	19db      	adds	r3, r3, r7
 8003d84:	2204      	movs	r2, #4
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	e06f      	b.n	8003e6a <UART_SetConfig+0x246>
 8003d8a:	231b      	movs	r3, #27
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	19db      	adds	r3, r3, r7
 8003d92:	2208      	movs	r2, #8
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	e068      	b.n	8003e6a <UART_SetConfig+0x246>
 8003d98:	231b      	movs	r3, #27
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	189b      	adds	r3, r3, r2
 8003d9e:	19db      	adds	r3, r3, r7
 8003da0:	2210      	movs	r2, #16
 8003da2:	701a      	strb	r2, [r3, #0]
 8003da4:	e061      	b.n	8003e6a <UART_SetConfig+0x246>
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a61      	ldr	r2, [pc, #388]	; (8003f30 <UART_SetConfig+0x30c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d106      	bne.n	8003dbe <UART_SetConfig+0x19a>
 8003db0:	231b      	movs	r3, #27
 8003db2:	2220      	movs	r2, #32
 8003db4:	189b      	adds	r3, r3, r2
 8003db6:	19db      	adds	r3, r3, r7
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	e055      	b.n	8003e6a <UART_SetConfig+0x246>
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a5c      	ldr	r2, [pc, #368]	; (8003f34 <UART_SetConfig+0x310>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d106      	bne.n	8003dd6 <UART_SetConfig+0x1b2>
 8003dc8:	231b      	movs	r3, #27
 8003dca:	2220      	movs	r2, #32
 8003dcc:	189b      	adds	r3, r3, r2
 8003dce:	19db      	adds	r3, r3, r7
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]
 8003dd4:	e049      	b.n	8003e6a <UART_SetConfig+0x246>
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a50      	ldr	r2, [pc, #320]	; (8003f1c <UART_SetConfig+0x2f8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d13e      	bne.n	8003e5e <UART_SetConfig+0x23a>
 8003de0:	4b51      	ldr	r3, [pc, #324]	; (8003f28 <UART_SetConfig+0x304>)
 8003de2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003de4:	23c0      	movs	r3, #192	; 0xc0
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	4013      	ands	r3, r2
 8003dea:	22c0      	movs	r2, #192	; 0xc0
 8003dec:	0112      	lsls	r2, r2, #4
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d027      	beq.n	8003e42 <UART_SetConfig+0x21e>
 8003df2:	22c0      	movs	r2, #192	; 0xc0
 8003df4:	0112      	lsls	r2, r2, #4
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d82a      	bhi.n	8003e50 <UART_SetConfig+0x22c>
 8003dfa:	2280      	movs	r2, #128	; 0x80
 8003dfc:	0112      	lsls	r2, r2, #4
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d011      	beq.n	8003e26 <UART_SetConfig+0x202>
 8003e02:	2280      	movs	r2, #128	; 0x80
 8003e04:	0112      	lsls	r2, r2, #4
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d822      	bhi.n	8003e50 <UART_SetConfig+0x22c>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <UART_SetConfig+0x1f4>
 8003e0e:	2280      	movs	r2, #128	; 0x80
 8003e10:	00d2      	lsls	r2, r2, #3
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00e      	beq.n	8003e34 <UART_SetConfig+0x210>
 8003e16:	e01b      	b.n	8003e50 <UART_SetConfig+0x22c>
 8003e18:	231b      	movs	r3, #27
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	189b      	adds	r3, r3, r2
 8003e1e:	19db      	adds	r3, r3, r7
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	e021      	b.n	8003e6a <UART_SetConfig+0x246>
 8003e26:	231b      	movs	r3, #27
 8003e28:	2220      	movs	r2, #32
 8003e2a:	189b      	adds	r3, r3, r2
 8003e2c:	19db      	adds	r3, r3, r7
 8003e2e:	2202      	movs	r2, #2
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	e01a      	b.n	8003e6a <UART_SetConfig+0x246>
 8003e34:	231b      	movs	r3, #27
 8003e36:	2220      	movs	r2, #32
 8003e38:	189b      	adds	r3, r3, r2
 8003e3a:	19db      	adds	r3, r3, r7
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e013      	b.n	8003e6a <UART_SetConfig+0x246>
 8003e42:	231b      	movs	r3, #27
 8003e44:	2220      	movs	r2, #32
 8003e46:	189b      	adds	r3, r3, r2
 8003e48:	19db      	adds	r3, r3, r7
 8003e4a:	2208      	movs	r2, #8
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	e00c      	b.n	8003e6a <UART_SetConfig+0x246>
 8003e50:	231b      	movs	r3, #27
 8003e52:	2220      	movs	r2, #32
 8003e54:	189b      	adds	r3, r3, r2
 8003e56:	19db      	adds	r3, r3, r7
 8003e58:	2210      	movs	r2, #16
 8003e5a:	701a      	strb	r2, [r3, #0]
 8003e5c:	e005      	b.n	8003e6a <UART_SetConfig+0x246>
 8003e5e:	231b      	movs	r3, #27
 8003e60:	2220      	movs	r2, #32
 8003e62:	189b      	adds	r3, r3, r2
 8003e64:	19db      	adds	r3, r3, r7
 8003e66:	2210      	movs	r2, #16
 8003e68:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a2b      	ldr	r2, [pc, #172]	; (8003f1c <UART_SetConfig+0x2f8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d000      	beq.n	8003e76 <UART_SetConfig+0x252>
 8003e74:	e0a9      	b.n	8003fca <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e76:	231b      	movs	r3, #27
 8003e78:	2220      	movs	r2, #32
 8003e7a:	189b      	adds	r3, r3, r2
 8003e7c:	19db      	adds	r3, r3, r7
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d015      	beq.n	8003eb0 <UART_SetConfig+0x28c>
 8003e84:	dc18      	bgt.n	8003eb8 <UART_SetConfig+0x294>
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d00d      	beq.n	8003ea6 <UART_SetConfig+0x282>
 8003e8a:	dc15      	bgt.n	8003eb8 <UART_SetConfig+0x294>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <UART_SetConfig+0x272>
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d005      	beq.n	8003ea0 <UART_SetConfig+0x27c>
 8003e94:	e010      	b.n	8003eb8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e96:	f7fe fe7d 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e9e:	e014      	b.n	8003eca <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <UART_SetConfig+0x314>)
 8003ea2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ea4:	e011      	b.n	8003eca <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ea6:	f7fe fde9 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003eae:	e00c      	b.n	8003eca <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003eb6:	e008      	b.n	8003eca <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003ebc:	231a      	movs	r3, #26
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	189b      	adds	r3, r3, r2
 8003ec2:	19db      	adds	r3, r3, r7
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	701a      	strb	r2, [r3, #0]
        break;
 8003ec8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d100      	bne.n	8003ed2 <UART_SetConfig+0x2ae>
 8003ed0:	e14b      	b.n	800416a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ed6:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <UART_SetConfig+0x318>)
 8003ed8:	0052      	lsls	r2, r2, #1
 8003eda:	5ad3      	ldrh	r3, [r2, r3]
 8003edc:	0019      	movs	r1, r3
 8003ede:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ee0:	f7fc f910 	bl	8000104 <__udivsi3>
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	0013      	movs	r3, r2
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	189b      	adds	r3, r3, r2
 8003ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d305      	bcc.n	8003f04 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d91d      	bls.n	8003f40 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003f04:	231a      	movs	r3, #26
 8003f06:	2220      	movs	r2, #32
 8003f08:	189b      	adds	r3, r3, r2
 8003f0a:	19db      	adds	r3, r3, r7
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	701a      	strb	r2, [r3, #0]
 8003f10:	e12b      	b.n	800416a <UART_SetConfig+0x546>
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	cfff69f3 	.word	0xcfff69f3
 8003f18:	ffffcfff 	.word	0xffffcfff
 8003f1c:	40008000 	.word	0x40008000
 8003f20:	11fff4ff 	.word	0x11fff4ff
 8003f24:	40013800 	.word	0x40013800
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40004400 	.word	0x40004400
 8003f30:	40004800 	.word	0x40004800
 8003f34:	40004c00 	.word	0x40004c00
 8003f38:	00f42400 	.word	0x00f42400
 8003f3c:	08004858 	.word	0x08004858
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	2300      	movs	r3, #0
 8003f46:	61fb      	str	r3, [r7, #28]
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f4c:	4b92      	ldr	r3, [pc, #584]	; (8004198 <UART_SetConfig+0x574>)
 8003f4e:	0052      	lsls	r2, r2, #1
 8003f50:	5ad3      	ldrh	r3, [r2, r3]
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	69b8      	ldr	r0, [r7, #24]
 8003f5e:	69f9      	ldr	r1, [r7, #28]
 8003f60:	f7fc fa46 	bl	80003f0 <__aeabi_uldivmod>
 8003f64:	0002      	movs	r2, r0
 8003f66:	000b      	movs	r3, r1
 8003f68:	0e11      	lsrs	r1, r2, #24
 8003f6a:	021d      	lsls	r5, r3, #8
 8003f6c:	430d      	orrs	r5, r1
 8003f6e:	0214      	lsls	r4, r2, #8
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	085b      	lsrs	r3, r3, #1
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68b8      	ldr	r0, [r7, #8]
 8003f7e:	68f9      	ldr	r1, [r7, #12]
 8003f80:	1900      	adds	r0, r0, r4
 8003f82:	4169      	adcs	r1, r5
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	603b      	str	r3, [r7, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	607b      	str	r3, [r7, #4]
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f7fc fa2d 	bl	80003f0 <__aeabi_uldivmod>
 8003f96:	0002      	movs	r2, r0
 8003f98:	000b      	movs	r3, r1
 8003f9a:	0013      	movs	r3, r2
 8003f9c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa0:	23c0      	movs	r3, #192	; 0xc0
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d309      	bcc.n	8003fbc <UART_SetConfig+0x398>
 8003fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	035b      	lsls	r3, r3, #13
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d204      	bcs.n	8003fbc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	e0d6      	b.n	800416a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003fbc:	231a      	movs	r3, #26
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	189b      	adds	r3, r3, r2
 8003fc2:	19db      	adds	r3, r3, r7
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	701a      	strb	r2, [r3, #0]
 8003fc8:	e0cf      	b.n	800416a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	69da      	ldr	r2, [r3, #28]
 8003fce:	2380      	movs	r3, #128	; 0x80
 8003fd0:	021b      	lsls	r3, r3, #8
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d000      	beq.n	8003fd8 <UART_SetConfig+0x3b4>
 8003fd6:	e070      	b.n	80040ba <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003fd8:	231b      	movs	r3, #27
 8003fda:	2220      	movs	r2, #32
 8003fdc:	189b      	adds	r3, r3, r2
 8003fde:	19db      	adds	r3, r3, r7
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d015      	beq.n	8004012 <UART_SetConfig+0x3ee>
 8003fe6:	dc18      	bgt.n	800401a <UART_SetConfig+0x3f6>
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d00d      	beq.n	8004008 <UART_SetConfig+0x3e4>
 8003fec:	dc15      	bgt.n	800401a <UART_SetConfig+0x3f6>
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <UART_SetConfig+0x3d4>
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d005      	beq.n	8004002 <UART_SetConfig+0x3de>
 8003ff6:	e010      	b.n	800401a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff8:	f7fe fdcc 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004000:	e014      	b.n	800402c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004002:	4b66      	ldr	r3, [pc, #408]	; (800419c <UART_SetConfig+0x578>)
 8004004:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004006:	e011      	b.n	800402c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004008:	f7fe fd38 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 800400c:	0003      	movs	r3, r0
 800400e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004010:	e00c      	b.n	800402c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004018:	e008      	b.n	800402c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800401e:	231a      	movs	r3, #26
 8004020:	2220      	movs	r2, #32
 8004022:	189b      	adds	r3, r3, r2
 8004024:	19db      	adds	r3, r3, r7
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
        break;
 800402a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800402c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800402e:	2b00      	cmp	r3, #0
 8004030:	d100      	bne.n	8004034 <UART_SetConfig+0x410>
 8004032:	e09a      	b.n	800416a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004038:	4b57      	ldr	r3, [pc, #348]	; (8004198 <UART_SetConfig+0x574>)
 800403a:	0052      	lsls	r2, r2, #1
 800403c:	5ad3      	ldrh	r3, [r2, r3]
 800403e:	0019      	movs	r1, r3
 8004040:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004042:	f7fc f85f 	bl	8000104 <__udivsi3>
 8004046:	0003      	movs	r3, r0
 8004048:	005a      	lsls	r2, r3, #1
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	085b      	lsrs	r3, r3, #1
 8004050:	18d2      	adds	r2, r2, r3
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	0019      	movs	r1, r3
 8004058:	0010      	movs	r0, r2
 800405a:	f7fc f853 	bl	8000104 <__udivsi3>
 800405e:	0003      	movs	r3, r0
 8004060:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	2b0f      	cmp	r3, #15
 8004066:	d921      	bls.n	80040ac <UART_SetConfig+0x488>
 8004068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800406a:	2380      	movs	r3, #128	; 0x80
 800406c:	025b      	lsls	r3, r3, #9
 800406e:	429a      	cmp	r2, r3
 8004070:	d21c      	bcs.n	80040ac <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	b29a      	uxth	r2, r3
 8004076:	200e      	movs	r0, #14
 8004078:	2420      	movs	r4, #32
 800407a:	1903      	adds	r3, r0, r4
 800407c:	19db      	adds	r3, r3, r7
 800407e:	210f      	movs	r1, #15
 8004080:	438a      	bics	r2, r1
 8004082:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	085b      	lsrs	r3, r3, #1
 8004088:	b29b      	uxth	r3, r3
 800408a:	2207      	movs	r2, #7
 800408c:	4013      	ands	r3, r2
 800408e:	b299      	uxth	r1, r3
 8004090:	1903      	adds	r3, r0, r4
 8004092:	19db      	adds	r3, r3, r7
 8004094:	1902      	adds	r2, r0, r4
 8004096:	19d2      	adds	r2, r2, r7
 8004098:	8812      	ldrh	r2, [r2, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	1902      	adds	r2, r0, r4
 80040a4:	19d2      	adds	r2, r2, r7
 80040a6:	8812      	ldrh	r2, [r2, #0]
 80040a8:	60da      	str	r2, [r3, #12]
 80040aa:	e05e      	b.n	800416a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80040ac:	231a      	movs	r3, #26
 80040ae:	2220      	movs	r2, #32
 80040b0:	189b      	adds	r3, r3, r2
 80040b2:	19db      	adds	r3, r3, r7
 80040b4:	2201      	movs	r2, #1
 80040b6:	701a      	strb	r2, [r3, #0]
 80040b8:	e057      	b.n	800416a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040ba:	231b      	movs	r3, #27
 80040bc:	2220      	movs	r2, #32
 80040be:	189b      	adds	r3, r3, r2
 80040c0:	19db      	adds	r3, r3, r7
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d015      	beq.n	80040f4 <UART_SetConfig+0x4d0>
 80040c8:	dc18      	bgt.n	80040fc <UART_SetConfig+0x4d8>
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d00d      	beq.n	80040ea <UART_SetConfig+0x4c6>
 80040ce:	dc15      	bgt.n	80040fc <UART_SetConfig+0x4d8>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <UART_SetConfig+0x4b6>
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d005      	beq.n	80040e4 <UART_SetConfig+0x4c0>
 80040d8:	e010      	b.n	80040fc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040da:	f7fe fd5b 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 80040de:	0003      	movs	r3, r0
 80040e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040e2:	e014      	b.n	800410e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e4:	4b2d      	ldr	r3, [pc, #180]	; (800419c <UART_SetConfig+0x578>)
 80040e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040e8:	e011      	b.n	800410e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ea:	f7fe fcc7 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 80040ee:	0003      	movs	r3, r0
 80040f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040f2:	e00c      	b.n	800410e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	021b      	lsls	r3, r3, #8
 80040f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040fa:	e008      	b.n	800410e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004100:	231a      	movs	r3, #26
 8004102:	2220      	movs	r2, #32
 8004104:	189b      	adds	r3, r3, r2
 8004106:	19db      	adds	r3, r3, r7
 8004108:	2201      	movs	r2, #1
 800410a:	701a      	strb	r2, [r3, #0]
        break;
 800410c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800410e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004110:	2b00      	cmp	r3, #0
 8004112:	d02a      	beq.n	800416a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004118:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <UART_SetConfig+0x574>)
 800411a:	0052      	lsls	r2, r2, #1
 800411c:	5ad3      	ldrh	r3, [r2, r3]
 800411e:	0019      	movs	r1, r3
 8004120:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004122:	f7fb ffef 	bl	8000104 <__udivsi3>
 8004126:	0003      	movs	r3, r0
 8004128:	001a      	movs	r2, r3
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	085b      	lsrs	r3, r3, #1
 8004130:	18d2      	adds	r2, r2, r3
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	0019      	movs	r1, r3
 8004138:	0010      	movs	r0, r2
 800413a:	f7fb ffe3 	bl	8000104 <__udivsi3>
 800413e:	0003      	movs	r3, r0
 8004140:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	2b0f      	cmp	r3, #15
 8004146:	d90a      	bls.n	800415e <UART_SetConfig+0x53a>
 8004148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	025b      	lsls	r3, r3, #9
 800414e:	429a      	cmp	r2, r3
 8004150:	d205      	bcs.n	800415e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	b29a      	uxth	r2, r3
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60da      	str	r2, [r3, #12]
 800415c:	e005      	b.n	800416a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800415e:	231a      	movs	r3, #26
 8004160:	2220      	movs	r2, #32
 8004162:	189b      	adds	r3, r3, r2
 8004164:	19db      	adds	r3, r3, r7
 8004166:	2201      	movs	r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	226a      	movs	r2, #106	; 0x6a
 800416e:	2101      	movs	r1, #1
 8004170:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	2268      	movs	r2, #104	; 0x68
 8004176:	2101      	movs	r1, #1
 8004178:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	2200      	movs	r2, #0
 800417e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	2200      	movs	r2, #0
 8004184:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004186:	231a      	movs	r3, #26
 8004188:	2220      	movs	r2, #32
 800418a:	189b      	adds	r3, r3, r2
 800418c:	19db      	adds	r3, r3, r7
 800418e:	781b      	ldrb	r3, [r3, #0]
}
 8004190:	0018      	movs	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	b010      	add	sp, #64	; 0x40
 8004196:	bdb0      	pop	{r4, r5, r7, pc}
 8004198:	08004858 	.word	0x08004858
 800419c:	00f42400 	.word	0x00f42400

080041a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	2201      	movs	r2, #1
 80041ae:	4013      	ands	r3, r2
 80041b0:	d00b      	beq.n	80041ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	4a4a      	ldr	r2, [pc, #296]	; (80042e4 <UART_AdvFeatureConfig+0x144>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	0019      	movs	r1, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	2202      	movs	r2, #2
 80041d0:	4013      	ands	r3, r2
 80041d2:	d00b      	beq.n	80041ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4a43      	ldr	r2, [pc, #268]	; (80042e8 <UART_AdvFeatureConfig+0x148>)
 80041dc:	4013      	ands	r3, r2
 80041de:	0019      	movs	r1, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	2204      	movs	r2, #4
 80041f2:	4013      	ands	r3, r2
 80041f4:	d00b      	beq.n	800420e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	4a3b      	ldr	r2, [pc, #236]	; (80042ec <UART_AdvFeatureConfig+0x14c>)
 80041fe:	4013      	ands	r3, r2
 8004200:	0019      	movs	r1, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	2208      	movs	r2, #8
 8004214:	4013      	ands	r3, r2
 8004216:	d00b      	beq.n	8004230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4a34      	ldr	r2, [pc, #208]	; (80042f0 <UART_AdvFeatureConfig+0x150>)
 8004220:	4013      	ands	r3, r2
 8004222:	0019      	movs	r1, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	2210      	movs	r2, #16
 8004236:	4013      	ands	r3, r2
 8004238:	d00b      	beq.n	8004252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4a2c      	ldr	r2, [pc, #176]	; (80042f4 <UART_AdvFeatureConfig+0x154>)
 8004242:	4013      	ands	r3, r2
 8004244:	0019      	movs	r1, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	2220      	movs	r2, #32
 8004258:	4013      	ands	r3, r2
 800425a:	d00b      	beq.n	8004274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	4a25      	ldr	r2, [pc, #148]	; (80042f8 <UART_AdvFeatureConfig+0x158>)
 8004264:	4013      	ands	r3, r2
 8004266:	0019      	movs	r1, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	2240      	movs	r2, #64	; 0x40
 800427a:	4013      	ands	r3, r2
 800427c:	d01d      	beq.n	80042ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	4a1d      	ldr	r2, [pc, #116]	; (80042fc <UART_AdvFeatureConfig+0x15c>)
 8004286:	4013      	ands	r3, r2
 8004288:	0019      	movs	r1, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800429a:	2380      	movs	r3, #128	; 0x80
 800429c:	035b      	lsls	r3, r3, #13
 800429e:	429a      	cmp	r2, r3
 80042a0:	d10b      	bne.n	80042ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4a15      	ldr	r2, [pc, #84]	; (8004300 <UART_AdvFeatureConfig+0x160>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	0019      	movs	r1, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	2280      	movs	r2, #128	; 0x80
 80042c0:	4013      	ands	r3, r2
 80042c2:	d00b      	beq.n	80042dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	4a0e      	ldr	r2, [pc, #56]	; (8004304 <UART_AdvFeatureConfig+0x164>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	0019      	movs	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
  }
}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	46bd      	mov	sp, r7
 80042e0:	b002      	add	sp, #8
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	fffdffff 	.word	0xfffdffff
 80042e8:	fffeffff 	.word	0xfffeffff
 80042ec:	fffbffff 	.word	0xfffbffff
 80042f0:	ffff7fff 	.word	0xffff7fff
 80042f4:	ffffefff 	.word	0xffffefff
 80042f8:	ffffdfff 	.word	0xffffdfff
 80042fc:	ffefffff 	.word	0xffefffff
 8004300:	ff9fffff 	.word	0xff9fffff
 8004304:	fff7ffff 	.word	0xfff7ffff

08004308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af02      	add	r7, sp, #8
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2290      	movs	r2, #144	; 0x90
 8004314:	2100      	movs	r1, #0
 8004316:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004318:	f7fd fcd8 	bl	8001ccc <HAL_GetTick>
 800431c:	0003      	movs	r3, r0
 800431e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2208      	movs	r2, #8
 8004328:	4013      	ands	r3, r2
 800432a:	2b08      	cmp	r3, #8
 800432c:	d10c      	bne.n	8004348 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2280      	movs	r2, #128	; 0x80
 8004332:	0391      	lsls	r1, r2, #14
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	4a1a      	ldr	r2, [pc, #104]	; (80043a0 <UART_CheckIdleState+0x98>)
 8004338:	9200      	str	r2, [sp, #0]
 800433a:	2200      	movs	r2, #0
 800433c:	f000 f832 	bl	80043a4 <UART_WaitOnFlagUntilTimeout>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d001      	beq.n	8004348 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e026      	b.n	8004396 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2204      	movs	r2, #4
 8004350:	4013      	ands	r3, r2
 8004352:	2b04      	cmp	r3, #4
 8004354:	d10c      	bne.n	8004370 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2280      	movs	r2, #128	; 0x80
 800435a:	03d1      	lsls	r1, r2, #15
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4a10      	ldr	r2, [pc, #64]	; (80043a0 <UART_CheckIdleState+0x98>)
 8004360:	9200      	str	r2, [sp, #0]
 8004362:	2200      	movs	r2, #0
 8004364:	f000 f81e 	bl	80043a4 <UART_WaitOnFlagUntilTimeout>
 8004368:	1e03      	subs	r3, r0, #0
 800436a:	d001      	beq.n	8004370 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e012      	b.n	8004396 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2288      	movs	r2, #136	; 0x88
 8004374:	2120      	movs	r1, #32
 8004376:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	228c      	movs	r2, #140	; 0x8c
 800437c:	2120      	movs	r1, #32
 800437e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2284      	movs	r2, #132	; 0x84
 8004390:	2100      	movs	r1, #0
 8004392:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	0018      	movs	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	b004      	add	sp, #16
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	01ffffff 	.word	0x01ffffff

080043a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b094      	sub	sp, #80	; 0x50
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	1dfb      	adds	r3, r7, #7
 80043b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b4:	e0a7      	b.n	8004506 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043b8:	3301      	adds	r3, #1
 80043ba:	d100      	bne.n	80043be <UART_WaitOnFlagUntilTimeout+0x1a>
 80043bc:	e0a3      	b.n	8004506 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043be:	f7fd fc85 	bl	8001ccc <HAL_GetTick>
 80043c2:	0002      	movs	r2, r0
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d302      	bcc.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80043ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d13f      	bne.n	8004454 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d4:	f3ef 8310 	mrs	r3, PRIMASK
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043dc:	647b      	str	r3, [r7, #68]	; 0x44
 80043de:	2301      	movs	r3, #1
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	f383 8810 	msr	PRIMASK, r3
}
 80043e8:	46c0      	nop			; (mov r8, r8)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	494e      	ldr	r1, [pc, #312]	; (8004530 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80043f6:	400a      	ands	r2, r1
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	f383 8810 	msr	PRIMASK, r3
}
 8004404:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004406:	f3ef 8310 	mrs	r3, PRIMASK
 800440a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800440c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440e:	643b      	str	r3, [r7, #64]	; 0x40
 8004410:	2301      	movs	r3, #1
 8004412:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004416:	f383 8810 	msr	PRIMASK, r3
}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2101      	movs	r1, #1
 8004428:	438a      	bics	r2, r1
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800442e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004432:	f383 8810 	msr	PRIMASK, r3
}
 8004436:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2288      	movs	r2, #136	; 0x88
 800443c:	2120      	movs	r1, #32
 800443e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	228c      	movs	r2, #140	; 0x8c
 8004444:	2120      	movs	r1, #32
 8004446:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2284      	movs	r2, #132	; 0x84
 800444c:	2100      	movs	r1, #0
 800444e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e069      	b.n	8004528 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2204      	movs	r2, #4
 800445c:	4013      	ands	r3, r2
 800445e:	d052      	beq.n	8004506 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	69da      	ldr	r2, [r3, #28]
 8004466:	2380      	movs	r3, #128	; 0x80
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	401a      	ands	r2, r3
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	429a      	cmp	r2, r3
 8004472:	d148      	bne.n	8004506 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2280      	movs	r2, #128	; 0x80
 800447a:	0112      	lsls	r2, r2, #4
 800447c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800447e:	f3ef 8310 	mrs	r3, PRIMASK
 8004482:	613b      	str	r3, [r7, #16]
  return(result);
 8004484:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004488:	2301      	movs	r3, #1
 800448a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f383 8810 	msr	PRIMASK, r3
}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4924      	ldr	r1, [pc, #144]	; (8004530 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80044a0:	400a      	ands	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	f383 8810 	msr	PRIMASK, r3
}
 80044ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044b0:	f3ef 8310 	mrs	r3, PRIMASK
 80044b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80044b6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80044ba:	2301      	movs	r3, #1
 80044bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	f383 8810 	msr	PRIMASK, r3
}
 80044c4:	46c0      	nop			; (mov r8, r8)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2101      	movs	r1, #1
 80044d2:	438a      	bics	r2, r1
 80044d4:	609a      	str	r2, [r3, #8]
 80044d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	f383 8810 	msr	PRIMASK, r3
}
 80044e0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2288      	movs	r2, #136	; 0x88
 80044e6:	2120      	movs	r1, #32
 80044e8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	228c      	movs	r2, #140	; 0x8c
 80044ee:	2120      	movs	r1, #32
 80044f0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2290      	movs	r2, #144	; 0x90
 80044f6:	2120      	movs	r1, #32
 80044f8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2284      	movs	r2, #132	; 0x84
 80044fe:	2100      	movs	r1, #0
 8004500:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e010      	b.n	8004528 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	4013      	ands	r3, r2
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	425a      	negs	r2, r3
 8004516:	4153      	adcs	r3, r2
 8004518:	b2db      	uxtb	r3, r3
 800451a:	001a      	movs	r2, r3
 800451c:	1dfb      	adds	r3, r7, #7
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d100      	bne.n	8004526 <UART_WaitOnFlagUntilTimeout+0x182>
 8004524:	e747      	b.n	80043b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	0018      	movs	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	b014      	add	sp, #80	; 0x50
 800452e:	bd80      	pop	{r7, pc}
 8004530:	fffffe5f 	.word	0xfffffe5f

08004534 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2284      	movs	r2, #132	; 0x84
 8004540:	5c9b      	ldrb	r3, [r3, r2]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_UARTEx_DisableFifoMode+0x16>
 8004546:	2302      	movs	r3, #2
 8004548:	e027      	b.n	800459a <HAL_UARTEx_DisableFifoMode+0x66>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2284      	movs	r2, #132	; 0x84
 800454e:	2101      	movs	r1, #1
 8004550:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2288      	movs	r2, #136	; 0x88
 8004556:	2124      	movs	r1, #36	; 0x24
 8004558:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2101      	movs	r1, #1
 800456e:	438a      	bics	r2, r1
 8004570:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4a0b      	ldr	r2, [pc, #44]	; (80045a4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004576:	4013      	ands	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2288      	movs	r2, #136	; 0x88
 800458c:	2120      	movs	r1, #32
 800458e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2284      	movs	r2, #132	; 0x84
 8004594:	2100      	movs	r1, #0
 8004596:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	0018      	movs	r0, r3
 800459c:	46bd      	mov	sp, r7
 800459e:	b004      	add	sp, #16
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	dfffffff 	.word	0xdfffffff

080045a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2284      	movs	r2, #132	; 0x84
 80045b6:	5c9b      	ldrb	r3, [r3, r2]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045bc:	2302      	movs	r3, #2
 80045be:	e02e      	b.n	800461e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2284      	movs	r2, #132	; 0x84
 80045c4:	2101      	movs	r1, #1
 80045c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2288      	movs	r2, #136	; 0x88
 80045cc:	2124      	movs	r1, #36	; 0x24
 80045ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2101      	movs	r1, #1
 80045e4:	438a      	bics	r2, r1
 80045e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	08d9      	lsrs	r1, r3, #3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	0018      	movs	r0, r3
 8004600:	f000 f854 	bl	80046ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2288      	movs	r2, #136	; 0x88
 8004610:	2120      	movs	r1, #32
 8004612:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2284      	movs	r2, #132	; 0x84
 8004618:	2100      	movs	r1, #0
 800461a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	0018      	movs	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	b004      	add	sp, #16
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2284      	movs	r2, #132	; 0x84
 8004636:	5c9b      	ldrb	r3, [r3, r2]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800463c:	2302      	movs	r3, #2
 800463e:	e02f      	b.n	80046a0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2284      	movs	r2, #132	; 0x84
 8004644:	2101      	movs	r1, #1
 8004646:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2288      	movs	r2, #136	; 0x88
 800464c:	2124      	movs	r1, #36	; 0x24
 800464e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2101      	movs	r1, #1
 8004664:	438a      	bics	r2, r1
 8004666:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	4a0e      	ldr	r2, [pc, #56]	; (80046a8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004670:	4013      	ands	r3, r2
 8004672:	0019      	movs	r1, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	0018      	movs	r0, r3
 8004682:	f000 f813 	bl	80046ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2288      	movs	r2, #136	; 0x88
 8004692:	2120      	movs	r1, #32
 8004694:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2284      	movs	r2, #132	; 0x84
 800469a:	2100      	movs	r1, #0
 800469c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	0018      	movs	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b004      	add	sp, #16
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	f1ffffff 	.word	0xf1ffffff

080046ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d108      	bne.n	80046ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	226a      	movs	r2, #106	; 0x6a
 80046c0:	2101      	movs	r1, #1
 80046c2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2268      	movs	r2, #104	; 0x68
 80046c8:	2101      	movs	r1, #1
 80046ca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046cc:	e043      	b.n	8004756 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046ce:	260f      	movs	r6, #15
 80046d0:	19bb      	adds	r3, r7, r6
 80046d2:	2208      	movs	r2, #8
 80046d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046d6:	200e      	movs	r0, #14
 80046d8:	183b      	adds	r3, r7, r0
 80046da:	2208      	movs	r2, #8
 80046dc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	0e5b      	lsrs	r3, r3, #25
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	240d      	movs	r4, #13
 80046ea:	193b      	adds	r3, r7, r4
 80046ec:	2107      	movs	r1, #7
 80046ee:	400a      	ands	r2, r1
 80046f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	0f5b      	lsrs	r3, r3, #29
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	250c      	movs	r5, #12
 80046fe:	197b      	adds	r3, r7, r5
 8004700:	2107      	movs	r1, #7
 8004702:	400a      	ands	r2, r1
 8004704:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004706:	183b      	adds	r3, r7, r0
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	197a      	adds	r2, r7, r5
 800470c:	7812      	ldrb	r2, [r2, #0]
 800470e:	4914      	ldr	r1, [pc, #80]	; (8004760 <UARTEx_SetNbDataToProcess+0xb4>)
 8004710:	5c8a      	ldrb	r2, [r1, r2]
 8004712:	435a      	muls	r2, r3
 8004714:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004716:	197b      	adds	r3, r7, r5
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	4a12      	ldr	r2, [pc, #72]	; (8004764 <UARTEx_SetNbDataToProcess+0xb8>)
 800471c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800471e:	0019      	movs	r1, r3
 8004720:	f7fb fd7a 	bl	8000218 <__divsi3>
 8004724:	0003      	movs	r3, r0
 8004726:	b299      	uxth	r1, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	226a      	movs	r2, #106	; 0x6a
 800472c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800472e:	19bb      	adds	r3, r7, r6
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	193a      	adds	r2, r7, r4
 8004734:	7812      	ldrb	r2, [r2, #0]
 8004736:	490a      	ldr	r1, [pc, #40]	; (8004760 <UARTEx_SetNbDataToProcess+0xb4>)
 8004738:	5c8a      	ldrb	r2, [r1, r2]
 800473a:	435a      	muls	r2, r3
 800473c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800473e:	193b      	adds	r3, r7, r4
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	4a08      	ldr	r2, [pc, #32]	; (8004764 <UARTEx_SetNbDataToProcess+0xb8>)
 8004744:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004746:	0019      	movs	r1, r3
 8004748:	f7fb fd66 	bl	8000218 <__divsi3>
 800474c:	0003      	movs	r3, r0
 800474e:	b299      	uxth	r1, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2268      	movs	r2, #104	; 0x68
 8004754:	5299      	strh	r1, [r3, r2]
}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	46bd      	mov	sp, r7
 800475a:	b005      	add	sp, #20
 800475c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	08004870 	.word	0x08004870
 8004764:	08004878 	.word	0x08004878

08004768 <__libc_init_array>:
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	2600      	movs	r6, #0
 800476c:	4d0c      	ldr	r5, [pc, #48]	; (80047a0 <__libc_init_array+0x38>)
 800476e:	4c0d      	ldr	r4, [pc, #52]	; (80047a4 <__libc_init_array+0x3c>)
 8004770:	1b64      	subs	r4, r4, r5
 8004772:	10a4      	asrs	r4, r4, #2
 8004774:	42a6      	cmp	r6, r4
 8004776:	d109      	bne.n	800478c <__libc_init_array+0x24>
 8004778:	2600      	movs	r6, #0
 800477a:	f000 f821 	bl	80047c0 <_init>
 800477e:	4d0a      	ldr	r5, [pc, #40]	; (80047a8 <__libc_init_array+0x40>)
 8004780:	4c0a      	ldr	r4, [pc, #40]	; (80047ac <__libc_init_array+0x44>)
 8004782:	1b64      	subs	r4, r4, r5
 8004784:	10a4      	asrs	r4, r4, #2
 8004786:	42a6      	cmp	r6, r4
 8004788:	d105      	bne.n	8004796 <__libc_init_array+0x2e>
 800478a:	bd70      	pop	{r4, r5, r6, pc}
 800478c:	00b3      	lsls	r3, r6, #2
 800478e:	58eb      	ldr	r3, [r5, r3]
 8004790:	4798      	blx	r3
 8004792:	3601      	adds	r6, #1
 8004794:	e7ee      	b.n	8004774 <__libc_init_array+0xc>
 8004796:	00b3      	lsls	r3, r6, #2
 8004798:	58eb      	ldr	r3, [r5, r3]
 800479a:	4798      	blx	r3
 800479c:	3601      	adds	r6, #1
 800479e:	e7f2      	b.n	8004786 <__libc_init_array+0x1e>
 80047a0:	08004888 	.word	0x08004888
 80047a4:	08004888 	.word	0x08004888
 80047a8:	08004888 	.word	0x08004888
 80047ac:	0800488c 	.word	0x0800488c

080047b0 <memset>:
 80047b0:	0003      	movs	r3, r0
 80047b2:	1882      	adds	r2, r0, r2
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d100      	bne.n	80047ba <memset+0xa>
 80047b8:	4770      	bx	lr
 80047ba:	7019      	strb	r1, [r3, #0]
 80047bc:	3301      	adds	r3, #1
 80047be:	e7f9      	b.n	80047b4 <memset+0x4>

080047c0 <_init>:
 80047c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047c6:	bc08      	pop	{r3}
 80047c8:	469e      	mov	lr, r3
 80047ca:	4770      	bx	lr

080047cc <_fini>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d2:	bc08      	pop	{r3}
 80047d4:	469e      	mov	lr, r3
 80047d6:	4770      	bx	lr
